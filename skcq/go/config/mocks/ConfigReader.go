// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	config "go.skia.org/infra/skcq/go/config"

	mock "github.com/stretchr/testify/mock"

	specs "go.skia.org/infra/task_scheduler/go/specs"
)

// ConfigReader is an autogenerated mock type for the ConfigReader type
type ConfigReader struct {
	mock.Mock
}

type ConfigReader_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigReader) EXPECT() *ConfigReader_Expecter {
	return &ConfigReader_Expecter{mock: &_m.Mock}
}

// GetAuthorsFileContents provides a mock function with given fields: ctx, authorsPath
func (_m *ConfigReader) GetAuthorsFileContents(ctx context.Context, authorsPath string) (string, error) {
	ret := _m.Called(ctx, authorsPath)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorsFileContents")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, authorsPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, authorsPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authorsPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigReader_GetAuthorsFileContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorsFileContents'
type ConfigReader_GetAuthorsFileContents_Call struct {
	*mock.Call
}

// GetAuthorsFileContents is a helper method to define mock.On call
//   - ctx context.Context
//   - authorsPath string
func (_e *ConfigReader_Expecter) GetAuthorsFileContents(ctx interface{}, authorsPath interface{}) *ConfigReader_GetAuthorsFileContents_Call {
	return &ConfigReader_GetAuthorsFileContents_Call{Call: _e.mock.On("GetAuthorsFileContents", ctx, authorsPath)}
}

func (_c *ConfigReader_GetAuthorsFileContents_Call) Run(run func(ctx context.Context, authorsPath string)) *ConfigReader_GetAuthorsFileContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConfigReader_GetAuthorsFileContents_Call) Return(_a0 string, _a1 error) *ConfigReader_GetAuthorsFileContents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigReader_GetAuthorsFileContents_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ConfigReader_GetAuthorsFileContents_Call {
	_c.Call.Return(run)
	return _c
}

// GetSkCQCfg provides a mock function with given fields: ctx
func (_m *ConfigReader) GetSkCQCfg(ctx context.Context) (*config.SkCQCfg, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSkCQCfg")
	}

	var r0 *config.SkCQCfg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*config.SkCQCfg, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *config.SkCQCfg); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.SkCQCfg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigReader_GetSkCQCfg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSkCQCfg'
type ConfigReader_GetSkCQCfg_Call struct {
	*mock.Call
}

// GetSkCQCfg is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ConfigReader_Expecter) GetSkCQCfg(ctx interface{}) *ConfigReader_GetSkCQCfg_Call {
	return &ConfigReader_GetSkCQCfg_Call{Call: _e.mock.On("GetSkCQCfg", ctx)}
}

func (_c *ConfigReader_GetSkCQCfg_Call) Run(run func(ctx context.Context)) *ConfigReader_GetSkCQCfg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ConfigReader_GetSkCQCfg_Call) Return(_a0 *config.SkCQCfg, _a1 error) *ConfigReader_GetSkCQCfg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigReader_GetSkCQCfg_Call) RunAndReturn(run func(context.Context) (*config.SkCQCfg, error)) *ConfigReader_GetSkCQCfg_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksCfg provides a mock function with given fields: ctx, tasksJSONPath
func (_m *ConfigReader) GetTasksCfg(ctx context.Context, tasksJSONPath string) (*specs.TasksCfg, error) {
	ret := _m.Called(ctx, tasksJSONPath)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksCfg")
	}

	var r0 *specs.TasksCfg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*specs.TasksCfg, error)); ok {
		return rf(ctx, tasksJSONPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *specs.TasksCfg); ok {
		r0 = rf(ctx, tasksJSONPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*specs.TasksCfg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tasksJSONPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigReader_GetTasksCfg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksCfg'
type ConfigReader_GetTasksCfg_Call struct {
	*mock.Call
}

// GetTasksCfg is a helper method to define mock.On call
//   - ctx context.Context
//   - tasksJSONPath string
func (_e *ConfigReader_Expecter) GetTasksCfg(ctx interface{}, tasksJSONPath interface{}) *ConfigReader_GetTasksCfg_Call {
	return &ConfigReader_GetTasksCfg_Call{Call: _e.mock.On("GetTasksCfg", ctx, tasksJSONPath)}
}

func (_c *ConfigReader_GetTasksCfg_Call) Run(run func(ctx context.Context, tasksJSONPath string)) *ConfigReader_GetTasksCfg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConfigReader_GetTasksCfg_Call) Return(_a0 *specs.TasksCfg, _a1 error) *ConfigReader_GetTasksCfg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigReader_GetTasksCfg_Call) RunAndReturn(run func(context.Context, string) (*specs.TasksCfg, error)) *ConfigReader_GetTasksCfg_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigReader creates a new instance of ConfigReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigReader {
	mock := &ConfigReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
