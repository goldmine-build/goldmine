// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	alerts "go.skia.org/infra/perf/go/alerts"

	mock "github.com/stretchr/testify/mock"
)

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

type Transport_Expecter struct {
	mock *mock.Mock
}

func (_m *Transport) EXPECT() *Transport_Expecter {
	return &Transport_Expecter{mock: &_m.Mock}
}

// SendNewRegression provides a mock function with given fields: ctx, alert, body, subject
func (_m *Transport) SendNewRegression(ctx context.Context, alert *alerts.Alert, body string, subject string) (string, error) {
	ret := _m.Called(ctx, alert, body, subject)

	if len(ret) == 0 {
		panic("no return value specified for SendNewRegression")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alerts.Alert, string, string) (string, error)); ok {
		return rf(ctx, alert, body, subject)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alerts.Alert, string, string) string); ok {
		r0 = rf(ctx, alert, body, subject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alerts.Alert, string, string) error); ok {
		r1 = rf(ctx, alert, body, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transport_SendNewRegression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNewRegression'
type Transport_SendNewRegression_Call struct {
	*mock.Call
}

// SendNewRegression is a helper method to define mock.On call
//   - ctx context.Context
//   - alert *alerts.Alert
//   - body string
//   - subject string
func (_e *Transport_Expecter) SendNewRegression(ctx interface{}, alert interface{}, body interface{}, subject interface{}) *Transport_SendNewRegression_Call {
	return &Transport_SendNewRegression_Call{Call: _e.mock.On("SendNewRegression", ctx, alert, body, subject)}
}

func (_c *Transport_SendNewRegression_Call) Run(run func(ctx context.Context, alert *alerts.Alert, body string, subject string)) *Transport_SendNewRegression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*alerts.Alert), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Transport_SendNewRegression_Call) Return(threadingReference string, err error) *Transport_SendNewRegression_Call {
	_c.Call.Return(threadingReference, err)
	return _c
}

func (_c *Transport_SendNewRegression_Call) RunAndReturn(run func(context.Context, *alerts.Alert, string, string) (string, error)) *Transport_SendNewRegression_Call {
	_c.Call.Return(run)
	return _c
}

// SendRegressionMissing provides a mock function with given fields: ctx, threadingReference, alert, body, subject
func (_m *Transport) SendRegressionMissing(ctx context.Context, threadingReference string, alert *alerts.Alert, body string, subject string) error {
	ret := _m.Called(ctx, threadingReference, alert, body, subject)

	if len(ret) == 0 {
		panic("no return value specified for SendRegressionMissing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *alerts.Alert, string, string) error); ok {
		r0 = rf(ctx, threadingReference, alert, body, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transport_SendRegressionMissing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRegressionMissing'
type Transport_SendRegressionMissing_Call struct {
	*mock.Call
}

// SendRegressionMissing is a helper method to define mock.On call
//   - ctx context.Context
//   - threadingReference string
//   - alert *alerts.Alert
//   - body string
//   - subject string
func (_e *Transport_Expecter) SendRegressionMissing(ctx interface{}, threadingReference interface{}, alert interface{}, body interface{}, subject interface{}) *Transport_SendRegressionMissing_Call {
	return &Transport_SendRegressionMissing_Call{Call: _e.mock.On("SendRegressionMissing", ctx, threadingReference, alert, body, subject)}
}

func (_c *Transport_SendRegressionMissing_Call) Run(run func(ctx context.Context, threadingReference string, alert *alerts.Alert, body string, subject string)) *Transport_SendRegressionMissing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*alerts.Alert), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Transport_SendRegressionMissing_Call) Return(err error) *Transport_SendRegressionMissing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Transport_SendRegressionMissing_Call) RunAndReturn(run func(context.Context, string, *alerts.Alert, string, string) error) *Transport_SendRegressionMissing_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransport creates a new instance of Transport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transport {
	mock := &Transport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
