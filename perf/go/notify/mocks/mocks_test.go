// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/perf/go/alerts"
	"go.skia.org/infra/perf/go/clustering2"
	"go.skia.org/infra/perf/go/git/provider"
	"go.skia.org/infra/perf/go/ui/frame"
)

// NewTransport creates a new instance of Transport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transport {
	mock := &Transport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

type Transport_Expecter struct {
	mock *mock.Mock
}

func (_m *Transport) EXPECT() *Transport_Expecter {
	return &Transport_Expecter{mock: &_m.Mock}
}

// SendNewRegression provides a mock function for the type Transport
func (_mock *Transport) SendNewRegression(ctx context.Context, alert *alerts.Alert, body string, subject string) (string, error) {
	ret := _mock.Called(ctx, alert, body, subject)

	if len(ret) == 0 {
		panic("no return value specified for SendNewRegression")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *alerts.Alert, string, string) (string, error)); ok {
		return returnFunc(ctx, alert, body, subject)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *alerts.Alert, string, string) string); ok {
		r0 = returnFunc(ctx, alert, body, subject)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *alerts.Alert, string, string) error); ok {
		r1 = returnFunc(ctx, alert, body, subject)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Transport_SendNewRegression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNewRegression'
type Transport_SendNewRegression_Call struct {
	*mock.Call
}

// SendNewRegression is a helper method to define mock.On call
//   - ctx context.Context
//   - alert *alerts.Alert
//   - body string
//   - subject string
func (_e *Transport_Expecter) SendNewRegression(ctx interface{}, alert interface{}, body interface{}, subject interface{}) *Transport_SendNewRegression_Call {
	return &Transport_SendNewRegression_Call{Call: _e.mock.On("SendNewRegression", ctx, alert, body, subject)}
}

func (_c *Transport_SendNewRegression_Call) Run(run func(ctx context.Context, alert *alerts.Alert, body string, subject string)) *Transport_SendNewRegression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *alerts.Alert
		if args[1] != nil {
			arg1 = args[1].(*alerts.Alert)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Transport_SendNewRegression_Call) Return(threadingReference string, err error) *Transport_SendNewRegression_Call {
	_c.Call.Return(threadingReference, err)
	return _c
}

func (_c *Transport_SendNewRegression_Call) RunAndReturn(run func(ctx context.Context, alert *alerts.Alert, body string, subject string) (string, error)) *Transport_SendNewRegression_Call {
	_c.Call.Return(run)
	return _c
}

// SendRegressionMissing provides a mock function for the type Transport
func (_mock *Transport) SendRegressionMissing(ctx context.Context, threadingReference string, alert *alerts.Alert, body string, subject string) error {
	ret := _mock.Called(ctx, threadingReference, alert, body, subject)

	if len(ret) == 0 {
		panic("no return value specified for SendRegressionMissing")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *alerts.Alert, string, string) error); ok {
		r0 = returnFunc(ctx, threadingReference, alert, body, subject)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Transport_SendRegressionMissing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRegressionMissing'
type Transport_SendRegressionMissing_Call struct {
	*mock.Call
}

// SendRegressionMissing is a helper method to define mock.On call
//   - ctx context.Context
//   - threadingReference string
//   - alert *alerts.Alert
//   - body string
//   - subject string
func (_e *Transport_Expecter) SendRegressionMissing(ctx interface{}, threadingReference interface{}, alert interface{}, body interface{}, subject interface{}) *Transport_SendRegressionMissing_Call {
	return &Transport_SendRegressionMissing_Call{Call: _e.mock.On("SendRegressionMissing", ctx, threadingReference, alert, body, subject)}
}

func (_c *Transport_SendRegressionMissing_Call) Run(run func(ctx context.Context, threadingReference string, alert *alerts.Alert, body string, subject string)) *Transport_SendRegressionMissing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *alerts.Alert
		if args[2] != nil {
			arg2 = args[2].(*alerts.Alert)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *Transport_SendRegressionMissing_Call) Return(err error) *Transport_SendRegressionMissing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Transport_SendRegressionMissing_Call) RunAndReturn(run func(ctx context.Context, threadingReference string, alert *alerts.Alert, body string, subject string) error) *Transport_SendRegressionMissing_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotifier creates a new instance of Notifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notifier {
	mock := &Notifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Notifier is an autogenerated mock type for the Notifier type
type Notifier struct {
	mock.Mock
}

type Notifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Notifier) EXPECT() *Notifier_Expecter {
	return &Notifier_Expecter{mock: &_m.Mock}
}

// ExampleSend provides a mock function for the type Notifier
func (_mock *Notifier) ExampleSend(ctx context.Context, alert *alerts.Alert) error {
	ret := _mock.Called(ctx, alert)

	if len(ret) == 0 {
		panic("no return value specified for ExampleSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *alerts.Alert) error); ok {
		r0 = returnFunc(ctx, alert)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Notifier_ExampleSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExampleSend'
type Notifier_ExampleSend_Call struct {
	*mock.Call
}

// ExampleSend is a helper method to define mock.On call
//   - ctx context.Context
//   - alert *alerts.Alert
func (_e *Notifier_Expecter) ExampleSend(ctx interface{}, alert interface{}) *Notifier_ExampleSend_Call {
	return &Notifier_ExampleSend_Call{Call: _e.mock.On("ExampleSend", ctx, alert)}
}

func (_c *Notifier_ExampleSend_Call) Run(run func(ctx context.Context, alert *alerts.Alert)) *Notifier_ExampleSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *alerts.Alert
		if args[1] != nil {
			arg1 = args[1].(*alerts.Alert)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Notifier_ExampleSend_Call) Return(err error) *Notifier_ExampleSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Notifier_ExampleSend_Call) RunAndReturn(run func(ctx context.Context, alert *alerts.Alert) error) *Notifier_ExampleSend_Call {
	_c.Call.Return(run)
	return _c
}

// RegressionFound provides a mock function for the type Notifier
func (_mock *Notifier) RegressionFound(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, frame1 *frame.FrameResponse) (string, error) {
	ret := _mock.Called(ctx, commit, previousCommit, alert, cl, frame1)

	if len(ret) == 0 {
		panic("no return value specified for RegressionFound")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse) (string, error)); ok {
		return returnFunc(ctx, commit, previousCommit, alert, cl, frame1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse) string); ok {
		r0 = returnFunc(ctx, commit, previousCommit, alert, cl, frame1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse) error); ok {
		r1 = returnFunc(ctx, commit, previousCommit, alert, cl, frame1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Notifier_RegressionFound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegressionFound'
type Notifier_RegressionFound_Call struct {
	*mock.Call
}

// RegressionFound is a helper method to define mock.On call
//   - ctx context.Context
//   - commit provider.Commit
//   - previousCommit provider.Commit
//   - alert *alerts.Alert
//   - cl *clustering2.ClusterSummary
//   - frame1 *frame.FrameResponse
func (_e *Notifier_Expecter) RegressionFound(ctx interface{}, commit interface{}, previousCommit interface{}, alert interface{}, cl interface{}, frame1 interface{}) *Notifier_RegressionFound_Call {
	return &Notifier_RegressionFound_Call{Call: _e.mock.On("RegressionFound", ctx, commit, previousCommit, alert, cl, frame1)}
}

func (_c *Notifier_RegressionFound_Call) Run(run func(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, frame1 *frame.FrameResponse)) *Notifier_RegressionFound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 provider.Commit
		if args[1] != nil {
			arg1 = args[1].(provider.Commit)
		}
		var arg2 provider.Commit
		if args[2] != nil {
			arg2 = args[2].(provider.Commit)
		}
		var arg3 *alerts.Alert
		if args[3] != nil {
			arg3 = args[3].(*alerts.Alert)
		}
		var arg4 *clustering2.ClusterSummary
		if args[4] != nil {
			arg4 = args[4].(*clustering2.ClusterSummary)
		}
		var arg5 *frame.FrameResponse
		if args[5] != nil {
			arg5 = args[5].(*frame.FrameResponse)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *Notifier_RegressionFound_Call) Return(s string, err error) *Notifier_RegressionFound_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Notifier_RegressionFound_Call) RunAndReturn(run func(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, frame1 *frame.FrameResponse) (string, error)) *Notifier_RegressionFound_Call {
	_c.Call.Return(run)
	return _c
}

// RegressionMissing provides a mock function for the type Notifier
func (_mock *Notifier) RegressionMissing(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, frame1 *frame.FrameResponse, threadingReference string) error {
	ret := _mock.Called(ctx, commit, previousCommit, alert, cl, frame1, threadingReference)

	if len(ret) == 0 {
		panic("no return value specified for RegressionMissing")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse, string) error); ok {
		r0 = returnFunc(ctx, commit, previousCommit, alert, cl, frame1, threadingReference)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Notifier_RegressionMissing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegressionMissing'
type Notifier_RegressionMissing_Call struct {
	*mock.Call
}

// RegressionMissing is a helper method to define mock.On call
//   - ctx context.Context
//   - commit provider.Commit
//   - previousCommit provider.Commit
//   - alert *alerts.Alert
//   - cl *clustering2.ClusterSummary
//   - frame1 *frame.FrameResponse
//   - threadingReference string
func (_e *Notifier_Expecter) RegressionMissing(ctx interface{}, commit interface{}, previousCommit interface{}, alert interface{}, cl interface{}, frame1 interface{}, threadingReference interface{}) *Notifier_RegressionMissing_Call {
	return &Notifier_RegressionMissing_Call{Call: _e.mock.On("RegressionMissing", ctx, commit, previousCommit, alert, cl, frame1, threadingReference)}
}

func (_c *Notifier_RegressionMissing_Call) Run(run func(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, frame1 *frame.FrameResponse, threadingReference string)) *Notifier_RegressionMissing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 provider.Commit
		if args[1] != nil {
			arg1 = args[1].(provider.Commit)
		}
		var arg2 provider.Commit
		if args[2] != nil {
			arg2 = args[2].(provider.Commit)
		}
		var arg3 *alerts.Alert
		if args[3] != nil {
			arg3 = args[3].(*alerts.Alert)
		}
		var arg4 *clustering2.ClusterSummary
		if args[4] != nil {
			arg4 = args[4].(*clustering2.ClusterSummary)
		}
		var arg5 *frame.FrameResponse
		if args[5] != nil {
			arg5 = args[5].(*frame.FrameResponse)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *Notifier_RegressionMissing_Call) Return(err error) *Notifier_RegressionMissing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Notifier_RegressionMissing_Call) RunAndReturn(run func(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, frame1 *frame.FrameResponse, threadingReference string) error) *Notifier_RegressionMissing_Call {
	_c.Call.Return(run)
	return _c
}
