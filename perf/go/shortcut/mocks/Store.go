// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	shortcut "go.skia.org/infra/perf/go/shortcut"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *Store) Get(ctx context.Context, id string) (*shortcut.Shortcut, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *shortcut.Shortcut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*shortcut.Shortcut, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *shortcut.Shortcut); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shortcut.Shortcut)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Store_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Store_Expecter) Get(ctx interface{}, id interface{}) *Store_Get_Call {
	return &Store_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Store_Get_Call) Run(run func(ctx context.Context, id string)) *Store_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_Get_Call) Return(_a0 *shortcut.Shortcut, _a1 error) *Store_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Get_Call) RunAndReturn(run func(context.Context, string) (*shortcut.Shortcut, error)) *Store_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *Store) GetAll(ctx context.Context) (<-chan *shortcut.Shortcut, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 <-chan *shortcut.Shortcut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan *shortcut.Shortcut, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *shortcut.Shortcut); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *shortcut.Shortcut)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Store_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) GetAll(ctx interface{}) *Store_GetAll_Call {
	return &Store_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *Store_GetAll_Call) Run(run func(ctx context.Context)) *Store_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Store_GetAll_Call) Return(_a0 <-chan *shortcut.Shortcut, _a1 error) *Store_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAll_Call) RunAndReturn(run func(context.Context) (<-chan *shortcut.Shortcut, error)) *Store_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, r
func (_m *Store) Insert(ctx context.Context, r io.Reader) (string, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) (string, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) string); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Store_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - r io.Reader
func (_e *Store_Expecter) Insert(ctx interface{}, r interface{}) *Store_Insert_Call {
	return &Store_Insert_Call{Call: _e.mock.On("Insert", ctx, r)}
}

func (_c *Store_Insert_Call) Run(run func(ctx context.Context, r io.Reader)) *Store_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader))
	})
	return _c
}

func (_c *Store_Insert_Call) Return(_a0 string, _a1 error) *Store_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Insert_Call) RunAndReturn(run func(context.Context, io.Reader) (string, error)) *Store_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertShortcut provides a mock function with given fields: ctx, _a1
func (_m *Store) InsertShortcut(ctx context.Context, _a1 *shortcut.Shortcut) (string, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertShortcut")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shortcut.Shortcut) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shortcut.Shortcut) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shortcut.Shortcut) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_InsertShortcut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertShortcut'
type Store_InsertShortcut_Call struct {
	*mock.Call
}

// InsertShortcut is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *shortcut.Shortcut
func (_e *Store_Expecter) InsertShortcut(ctx interface{}, _a1 interface{}) *Store_InsertShortcut_Call {
	return &Store_InsertShortcut_Call{Call: _e.mock.On("InsertShortcut", ctx, _a1)}
}

func (_c *Store_InsertShortcut_Call) Run(run func(ctx context.Context, _a1 *shortcut.Shortcut)) *Store_InsertShortcut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shortcut.Shortcut))
	})
	return _c
}

func (_c *Store_InsertShortcut_Call) Return(_a0 string, _a1 error) *Store_InsertShortcut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_InsertShortcut_Call) RunAndReturn(run func(context.Context, *shortcut.Shortcut) (string, error)) *Store_InsertShortcut_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
