// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"go.goldmine.build/perf/go/git/provider"
	"go.goldmine.build/perf/go/types"
)

// NewGit creates a new instance of Git. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *Git {
	mock := &Git{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Git is an autogenerated mock type for the Git type
type Git struct {
	mock.Mock
}

type Git_Expecter struct {
	mock *mock.Mock
}

func (_m *Git) EXPECT() *Git_Expecter {
	return &Git_Expecter{mock: &_m.Mock}
}

// CommitFromCommitNumber provides a mock function for the type Git
func (_mock *Git) CommitFromCommitNumber(ctx context.Context, commitNumber types.CommitNumber) (provider.Commit, error) {
	ret := _mock.Called(ctx, commitNumber)

	if len(ret) == 0 {
		panic("no return value specified for CommitFromCommitNumber")
	}

	var r0 provider.Commit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) (provider.Commit, error)); ok {
		return returnFunc(ctx, commitNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) provider.Commit); ok {
		r0 = returnFunc(ctx, commitNumber)
	} else {
		r0 = ret.Get(0).(provider.Commit)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, commitNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitFromCommitNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitFromCommitNumber'
type Git_CommitFromCommitNumber_Call struct {
	*mock.Call
}

// CommitFromCommitNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - commitNumber types.CommitNumber
func (_e *Git_Expecter) CommitFromCommitNumber(ctx interface{}, commitNumber interface{}) *Git_CommitFromCommitNumber_Call {
	return &Git_CommitFromCommitNumber_Call{Call: _e.mock.On("CommitFromCommitNumber", ctx, commitNumber)}
}

func (_c *Git_CommitFromCommitNumber_Call) Run(run func(ctx context.Context, commitNumber types.CommitNumber)) *Git_CommitFromCommitNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_CommitFromCommitNumber_Call) Return(commit provider.Commit, err error) *Git_CommitFromCommitNumber_Call {
	_c.Call.Return(commit, err)
	return _c
}

func (_c *Git_CommitFromCommitNumber_Call) RunAndReturn(run func(ctx context.Context, commitNumber types.CommitNumber) (provider.Commit, error)) *Git_CommitFromCommitNumber_Call {
	_c.Call.Return(run)
	return _c
}

// CommitNumberFromGitHash provides a mock function for the type Git
func (_mock *Git) CommitNumberFromGitHash(ctx context.Context, githash string) (types.CommitNumber, error) {
	ret := _mock.Called(ctx, githash)

	if len(ret) == 0 {
		panic("no return value specified for CommitNumberFromGitHash")
	}

	var r0 types.CommitNumber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (types.CommitNumber, error)); ok {
		return returnFunc(ctx, githash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) types.CommitNumber); ok {
		r0 = returnFunc(ctx, githash)
	} else {
		r0 = ret.Get(0).(types.CommitNumber)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, githash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitNumberFromGitHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitNumberFromGitHash'
type Git_CommitNumberFromGitHash_Call struct {
	*mock.Call
}

// CommitNumberFromGitHash is a helper method to define mock.On call
//   - ctx context.Context
//   - githash string
func (_e *Git_Expecter) CommitNumberFromGitHash(ctx interface{}, githash interface{}) *Git_CommitNumberFromGitHash_Call {
	return &Git_CommitNumberFromGitHash_Call{Call: _e.mock.On("CommitNumberFromGitHash", ctx, githash)}
}

func (_c *Git_CommitNumberFromGitHash_Call) Run(run func(ctx context.Context, githash string)) *Git_CommitNumberFromGitHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_CommitNumberFromGitHash_Call) Return(commitNumber types.CommitNumber, err error) *Git_CommitNumberFromGitHash_Call {
	_c.Call.Return(commitNumber, err)
	return _c
}

func (_c *Git_CommitNumberFromGitHash_Call) RunAndReturn(run func(ctx context.Context, githash string) (types.CommitNumber, error)) *Git_CommitNumberFromGitHash_Call {
	_c.Call.Return(run)
	return _c
}

// CommitNumberFromTime provides a mock function for the type Git
func (_mock *Git) CommitNumberFromTime(ctx context.Context, t time.Time) (types.CommitNumber, error) {
	ret := _mock.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for CommitNumberFromTime")
	}

	var r0 types.CommitNumber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) (types.CommitNumber, error)); ok {
		return returnFunc(ctx, t)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) types.CommitNumber); ok {
		r0 = returnFunc(ctx, t)
	} else {
		r0 = ret.Get(0).(types.CommitNumber)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, t)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitNumberFromTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitNumberFromTime'
type Git_CommitNumberFromTime_Call struct {
	*mock.Call
}

// CommitNumberFromTime is a helper method to define mock.On call
//   - ctx context.Context
//   - t time.Time
func (_e *Git_Expecter) CommitNumberFromTime(ctx interface{}, t interface{}) *Git_CommitNumberFromTime_Call {
	return &Git_CommitNumberFromTime_Call{Call: _e.mock.On("CommitNumberFromTime", ctx, t)}
}

func (_c *Git_CommitNumberFromTime_Call) Run(run func(ctx context.Context, t time.Time)) *Git_CommitNumberFromTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_CommitNumberFromTime_Call) Return(commitNumber types.CommitNumber, err error) *Git_CommitNumberFromTime_Call {
	_c.Call.Return(commitNumber, err)
	return _c
}

func (_c *Git_CommitNumberFromTime_Call) RunAndReturn(run func(ctx context.Context, t time.Time) (types.CommitNumber, error)) *Git_CommitNumberFromTime_Call {
	_c.Call.Return(run)
	return _c
}

// CommitNumbersWhenFileChangesInCommitNumberRange provides a mock function for the type Git
func (_mock *Git) CommitNumbersWhenFileChangesInCommitNumberRange(ctx context.Context, begin types.CommitNumber, end types.CommitNumber, filename string) ([]types.CommitNumber, error) {
	ret := _mock.Called(ctx, begin, end, filename)

	if len(ret) == 0 {
		panic("no return value specified for CommitNumbersWhenFileChangesInCommitNumberRange")
	}

	var r0 []types.CommitNumber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber, types.CommitNumber, string) ([]types.CommitNumber, error)); ok {
		return returnFunc(ctx, begin, end, filename)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber, types.CommitNumber, string) []types.CommitNumber); ok {
		r0 = returnFunc(ctx, begin, end, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.CommitNumber)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber, types.CommitNumber, string) error); ok {
		r1 = returnFunc(ctx, begin, end, filename)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitNumbersWhenFileChangesInCommitNumberRange'
type Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call struct {
	*mock.Call
}

// CommitNumbersWhenFileChangesInCommitNumberRange is a helper method to define mock.On call
//   - ctx context.Context
//   - begin types.CommitNumber
//   - end types.CommitNumber
//   - filename string
func (_e *Git_Expecter) CommitNumbersWhenFileChangesInCommitNumberRange(ctx interface{}, begin interface{}, end interface{}, filename interface{}) *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call {
	return &Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call{Call: _e.mock.On("CommitNumbersWhenFileChangesInCommitNumberRange", ctx, begin, end, filename)}
}

func (_c *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call) Run(run func(ctx context.Context, begin types.CommitNumber, end types.CommitNumber, filename string)) *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		var arg2 types.CommitNumber
		if args[2] != nil {
			arg2 = args[2].(types.CommitNumber)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call) Return(commitNumbers []types.CommitNumber, err error) *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call {
	_c.Call.Return(commitNumbers, err)
	return _c
}

func (_c *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call) RunAndReturn(run func(ctx context.Context, begin types.CommitNumber, end types.CommitNumber, filename string) ([]types.CommitNumber, error)) *Git_CommitNumbersWhenFileChangesInCommitNumberRange_Call {
	_c.Call.Return(run)
	return _c
}

// CommitSliceFromCommitNumberRange provides a mock function for the type Git
func (_mock *Git) CommitSliceFromCommitNumberRange(ctx context.Context, begin types.CommitNumber, end types.CommitNumber) ([]provider.Commit, error) {
	ret := _mock.Called(ctx, begin, end)

	if len(ret) == 0 {
		panic("no return value specified for CommitSliceFromCommitNumberRange")
	}

	var r0 []provider.Commit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber, types.CommitNumber) ([]provider.Commit, error)); ok {
		return returnFunc(ctx, begin, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber, types.CommitNumber) []provider.Commit); ok {
		r0 = returnFunc(ctx, begin, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provider.Commit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, begin, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitSliceFromCommitNumberRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitSliceFromCommitNumberRange'
type Git_CommitSliceFromCommitNumberRange_Call struct {
	*mock.Call
}

// CommitSliceFromCommitNumberRange is a helper method to define mock.On call
//   - ctx context.Context
//   - begin types.CommitNumber
//   - end types.CommitNumber
func (_e *Git_Expecter) CommitSliceFromCommitNumberRange(ctx interface{}, begin interface{}, end interface{}) *Git_CommitSliceFromCommitNumberRange_Call {
	return &Git_CommitSliceFromCommitNumberRange_Call{Call: _e.mock.On("CommitSliceFromCommitNumberRange", ctx, begin, end)}
}

func (_c *Git_CommitSliceFromCommitNumberRange_Call) Run(run func(ctx context.Context, begin types.CommitNumber, end types.CommitNumber)) *Git_CommitSliceFromCommitNumberRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		var arg2 types.CommitNumber
		if args[2] != nil {
			arg2 = args[2].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Git_CommitSliceFromCommitNumberRange_Call) Return(commits []provider.Commit, err error) *Git_CommitSliceFromCommitNumberRange_Call {
	_c.Call.Return(commits, err)
	return _c
}

func (_c *Git_CommitSliceFromCommitNumberRange_Call) RunAndReturn(run func(ctx context.Context, begin types.CommitNumber, end types.CommitNumber) ([]provider.Commit, error)) *Git_CommitSliceFromCommitNumberRange_Call {
	_c.Call.Return(run)
	return _c
}

// CommitSliceFromCommitNumberSlice provides a mock function for the type Git
func (_mock *Git) CommitSliceFromCommitNumberSlice(ctx context.Context, commitNumberSlice []types.CommitNumber) ([]provider.Commit, error) {
	ret := _mock.Called(ctx, commitNumberSlice)

	if len(ret) == 0 {
		panic("no return value specified for CommitSliceFromCommitNumberSlice")
	}

	var r0 []provider.Commit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []types.CommitNumber) ([]provider.Commit, error)); ok {
		return returnFunc(ctx, commitNumberSlice)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []types.CommitNumber) []provider.Commit); ok {
		r0 = returnFunc(ctx, commitNumberSlice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provider.Commit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, commitNumberSlice)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitSliceFromCommitNumberSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitSliceFromCommitNumberSlice'
type Git_CommitSliceFromCommitNumberSlice_Call struct {
	*mock.Call
}

// CommitSliceFromCommitNumberSlice is a helper method to define mock.On call
//   - ctx context.Context
//   - commitNumberSlice []types.CommitNumber
func (_e *Git_Expecter) CommitSliceFromCommitNumberSlice(ctx interface{}, commitNumberSlice interface{}) *Git_CommitSliceFromCommitNumberSlice_Call {
	return &Git_CommitSliceFromCommitNumberSlice_Call{Call: _e.mock.On("CommitSliceFromCommitNumberSlice", ctx, commitNumberSlice)}
}

func (_c *Git_CommitSliceFromCommitNumberSlice_Call) Run(run func(ctx context.Context, commitNumberSlice []types.CommitNumber)) *Git_CommitSliceFromCommitNumberSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].([]types.CommitNumber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_CommitSliceFromCommitNumberSlice_Call) Return(commits []provider.Commit, err error) *Git_CommitSliceFromCommitNumberSlice_Call {
	_c.Call.Return(commits, err)
	return _c
}

func (_c *Git_CommitSliceFromCommitNumberSlice_Call) RunAndReturn(run func(ctx context.Context, commitNumberSlice []types.CommitNumber) ([]provider.Commit, error)) *Git_CommitSliceFromCommitNumberSlice_Call {
	_c.Call.Return(run)
	return _c
}

// CommitSliceFromTimeRange provides a mock function for the type Git
func (_mock *Git) CommitSliceFromTimeRange(ctx context.Context, begin time.Time, end time.Time) ([]provider.Commit, error) {
	ret := _mock.Called(ctx, begin, end)

	if len(ret) == 0 {
		panic("no return value specified for CommitSliceFromTimeRange")
	}

	var r0 []provider.Commit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]provider.Commit, error)); ok {
		return returnFunc(ctx, begin, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []provider.Commit); ok {
		r0 = returnFunc(ctx, begin, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provider.Commit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, begin, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_CommitSliceFromTimeRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitSliceFromTimeRange'
type Git_CommitSliceFromTimeRange_Call struct {
	*mock.Call
}

// CommitSliceFromTimeRange is a helper method to define mock.On call
//   - ctx context.Context
//   - begin time.Time
//   - end time.Time
func (_e *Git_Expecter) CommitSliceFromTimeRange(ctx interface{}, begin interface{}, end interface{}) *Git_CommitSliceFromTimeRange_Call {
	return &Git_CommitSliceFromTimeRange_Call{Call: _e.mock.On("CommitSliceFromTimeRange", ctx, begin, end)}
}

func (_c *Git_CommitSliceFromTimeRange_Call) Run(run func(ctx context.Context, begin time.Time, end time.Time)) *Git_CommitSliceFromTimeRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Git_CommitSliceFromTimeRange_Call) Return(commits []provider.Commit, err error) *Git_CommitSliceFromTimeRange_Call {
	_c.Call.Return(commits, err)
	return _c
}

func (_c *Git_CommitSliceFromTimeRange_Call) RunAndReturn(run func(ctx context.Context, begin time.Time, end time.Time) ([]provider.Commit, error)) *Git_CommitSliceFromTimeRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitNumber provides a mock function for the type Git
func (_mock *Git) GetCommitNumber(ctx context.Context, githash string, commitNumber types.CommitNumber) (types.CommitNumber, error) {
	ret := _mock.Called(ctx, githash, commitNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitNumber")
	}

	var r0 types.CommitNumber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.CommitNumber) (types.CommitNumber, error)); ok {
		return returnFunc(ctx, githash, commitNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.CommitNumber) types.CommitNumber); ok {
		r0 = returnFunc(ctx, githash, commitNumber)
	} else {
		r0 = ret.Get(0).(types.CommitNumber)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, githash, commitNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_GetCommitNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitNumber'
type Git_GetCommitNumber_Call struct {
	*mock.Call
}

// GetCommitNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - githash string
//   - commitNumber types.CommitNumber
func (_e *Git_Expecter) GetCommitNumber(ctx interface{}, githash interface{}, commitNumber interface{}) *Git_GetCommitNumber_Call {
	return &Git_GetCommitNumber_Call{Call: _e.mock.On("GetCommitNumber", ctx, githash, commitNumber)}
}

func (_c *Git_GetCommitNumber_Call) Run(run func(ctx context.Context, githash string, commitNumber types.CommitNumber)) *Git_GetCommitNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.CommitNumber
		if args[2] != nil {
			arg2 = args[2].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Git_GetCommitNumber_Call) Return(commitNumber1 types.CommitNumber, err error) *Git_GetCommitNumber_Call {
	_c.Call.Return(commitNumber1, err)
	return _c
}

func (_c *Git_GetCommitNumber_Call) RunAndReturn(run func(ctx context.Context, githash string, commitNumber types.CommitNumber) (types.CommitNumber, error)) *Git_GetCommitNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GitHashFromCommitNumber provides a mock function for the type Git
func (_mock *Git) GitHashFromCommitNumber(ctx context.Context, commitNumber types.CommitNumber) (string, error) {
	ret := _mock.Called(ctx, commitNumber)

	if len(ret) == 0 {
		panic("no return value specified for GitHashFromCommitNumber")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) (string, error)); ok {
		return returnFunc(ctx, commitNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) string); ok {
		r0 = returnFunc(ctx, commitNumber)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, commitNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_GitHashFromCommitNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GitHashFromCommitNumber'
type Git_GitHashFromCommitNumber_Call struct {
	*mock.Call
}

// GitHashFromCommitNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - commitNumber types.CommitNumber
func (_e *Git_Expecter) GitHashFromCommitNumber(ctx interface{}, commitNumber interface{}) *Git_GitHashFromCommitNumber_Call {
	return &Git_GitHashFromCommitNumber_Call{Call: _e.mock.On("GitHashFromCommitNumber", ctx, commitNumber)}
}

func (_c *Git_GitHashFromCommitNumber_Call) Run(run func(ctx context.Context, commitNumber types.CommitNumber)) *Git_GitHashFromCommitNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_GitHashFromCommitNumber_Call) Return(s string, err error) *Git_GitHashFromCommitNumber_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Git_GitHashFromCommitNumber_Call) RunAndReturn(run func(ctx context.Context, commitNumber types.CommitNumber) (string, error)) *Git_GitHashFromCommitNumber_Call {
	_c.Call.Return(run)
	return _c
}

// LogEntry provides a mock function for the type Git
func (_mock *Git) LogEntry(ctx context.Context, commit types.CommitNumber) (string, error) {
	ret := _mock.Called(ctx, commit)

	if len(ret) == 0 {
		panic("no return value specified for LogEntry")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) (string, error)); ok {
		return returnFunc(ctx, commit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) string); ok {
		r0 = returnFunc(ctx, commit)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, commit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_LogEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogEntry'
type Git_LogEntry_Call struct {
	*mock.Call
}

// LogEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - commit types.CommitNumber
func (_e *Git_Expecter) LogEntry(ctx interface{}, commit interface{}) *Git_LogEntry_Call {
	return &Git_LogEntry_Call{Call: _e.mock.On("LogEntry", ctx, commit)}
}

func (_c *Git_LogEntry_Call) Run(run func(ctx context.Context, commit types.CommitNumber)) *Git_LogEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_LogEntry_Call) Return(s string, err error) *Git_LogEntry_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Git_LogEntry_Call) RunAndReturn(run func(ctx context.Context, commit types.CommitNumber) (string, error)) *Git_LogEntry_Call {
	_c.Call.Return(run)
	return _c
}

// PreviousCommitNumberFromCommitNumber provides a mock function for the type Git
func (_mock *Git) PreviousCommitNumberFromCommitNumber(ctx context.Context, commitNumber types.CommitNumber) (types.CommitNumber, error) {
	ret := _mock.Called(ctx, commitNumber)

	if len(ret) == 0 {
		panic("no return value specified for PreviousCommitNumberFromCommitNumber")
	}

	var r0 types.CommitNumber
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) (types.CommitNumber, error)); ok {
		return returnFunc(ctx, commitNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) types.CommitNumber); ok {
		r0 = returnFunc(ctx, commitNumber)
	} else {
		r0 = ret.Get(0).(types.CommitNumber)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, commitNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_PreviousCommitNumberFromCommitNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreviousCommitNumberFromCommitNumber'
type Git_PreviousCommitNumberFromCommitNumber_Call struct {
	*mock.Call
}

// PreviousCommitNumberFromCommitNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - commitNumber types.CommitNumber
func (_e *Git_Expecter) PreviousCommitNumberFromCommitNumber(ctx interface{}, commitNumber interface{}) *Git_PreviousCommitNumberFromCommitNumber_Call {
	return &Git_PreviousCommitNumberFromCommitNumber_Call{Call: _e.mock.On("PreviousCommitNumberFromCommitNumber", ctx, commitNumber)}
}

func (_c *Git_PreviousCommitNumberFromCommitNumber_Call) Run(run func(ctx context.Context, commitNumber types.CommitNumber)) *Git_PreviousCommitNumberFromCommitNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_PreviousCommitNumberFromCommitNumber_Call) Return(commitNumber1 types.CommitNumber, err error) *Git_PreviousCommitNumberFromCommitNumber_Call {
	_c.Call.Return(commitNumber1, err)
	return _c
}

func (_c *Git_PreviousCommitNumberFromCommitNumber_Call) RunAndReturn(run func(ctx context.Context, commitNumber types.CommitNumber) (types.CommitNumber, error)) *Git_PreviousCommitNumberFromCommitNumber_Call {
	_c.Call.Return(run)
	return _c
}

// PreviousGitHashFromCommitNumber provides a mock function for the type Git
func (_mock *Git) PreviousGitHashFromCommitNumber(ctx context.Context, commitNumber types.CommitNumber) (string, error) {
	ret := _mock.Called(ctx, commitNumber)

	if len(ret) == 0 {
		panic("no return value specified for PreviousGitHashFromCommitNumber")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) (string, error)); ok {
		return returnFunc(ctx, commitNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.CommitNumber) string); ok {
		r0 = returnFunc(ctx, commitNumber)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.CommitNumber) error); ok {
		r1 = returnFunc(ctx, commitNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Git_PreviousGitHashFromCommitNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreviousGitHashFromCommitNumber'
type Git_PreviousGitHashFromCommitNumber_Call struct {
	*mock.Call
}

// PreviousGitHashFromCommitNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - commitNumber types.CommitNumber
func (_e *Git_Expecter) PreviousGitHashFromCommitNumber(ctx interface{}, commitNumber interface{}) *Git_PreviousGitHashFromCommitNumber_Call {
	return &Git_PreviousGitHashFromCommitNumber_Call{Call: _e.mock.On("PreviousGitHashFromCommitNumber", ctx, commitNumber)}
}

func (_c *Git_PreviousGitHashFromCommitNumber_Call) Run(run func(ctx context.Context, commitNumber types.CommitNumber)) *Git_PreviousGitHashFromCommitNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.CommitNumber
		if args[1] != nil {
			arg1 = args[1].(types.CommitNumber)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_PreviousGitHashFromCommitNumber_Call) Return(s string, err error) *Git_PreviousGitHashFromCommitNumber_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Git_PreviousGitHashFromCommitNumber_Call) RunAndReturn(run func(ctx context.Context, commitNumber types.CommitNumber) (string, error)) *Git_PreviousGitHashFromCommitNumber_Call {
	_c.Call.Return(run)
	return _c
}

// RepoSuppliedCommitNumber provides a mock function for the type Git
func (_mock *Git) RepoSuppliedCommitNumber() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RepoSuppliedCommitNumber")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Git_RepoSuppliedCommitNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepoSuppliedCommitNumber'
type Git_RepoSuppliedCommitNumber_Call struct {
	*mock.Call
}

// RepoSuppliedCommitNumber is a helper method to define mock.On call
func (_e *Git_Expecter) RepoSuppliedCommitNumber() *Git_RepoSuppliedCommitNumber_Call {
	return &Git_RepoSuppliedCommitNumber_Call{Call: _e.mock.On("RepoSuppliedCommitNumber")}
}

func (_c *Git_RepoSuppliedCommitNumber_Call) Run(run func()) *Git_RepoSuppliedCommitNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Git_RepoSuppliedCommitNumber_Call) Return(b bool) *Git_RepoSuppliedCommitNumber_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Git_RepoSuppliedCommitNumber_Call) RunAndReturn(run func() bool) *Git_RepoSuppliedCommitNumber_Call {
	_c.Call.Return(run)
	return _c
}

// StartBackgroundPolling provides a mock function for the type Git
func (_mock *Git) StartBackgroundPolling(ctx context.Context, duration time.Duration) {
	_mock.Called(ctx, duration)
	return
}

// Git_StartBackgroundPolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBackgroundPolling'
type Git_StartBackgroundPolling_Call struct {
	*mock.Call
}

// StartBackgroundPolling is a helper method to define mock.On call
//   - ctx context.Context
//   - duration time.Duration
func (_e *Git_Expecter) StartBackgroundPolling(ctx interface{}, duration interface{}) *Git_StartBackgroundPolling_Call {
	return &Git_StartBackgroundPolling_Call{Call: _e.mock.On("StartBackgroundPolling", ctx, duration)}
}

func (_c *Git_StartBackgroundPolling_Call) Run(run func(ctx context.Context, duration time.Duration)) *Git_StartBackgroundPolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Git_StartBackgroundPolling_Call) Return() *Git_StartBackgroundPolling_Call {
	_c.Call.Return()
	return _c
}

func (_c *Git_StartBackgroundPolling_Call) RunAndReturn(run func(ctx context.Context, duration time.Duration)) *Git_StartBackgroundPolling_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function for the type Git
func (_mock *Git) Update(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Git_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Git_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Git_Expecter) Update(ctx interface{}) *Git_Update_Call {
	return &Git_Update_Call{Call: _e.mock.On("Update", ctx)}
}

func (_c *Git_Update_Call) Run(run func(ctx context.Context)) *Git_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Git_Update_Call) Return(err error) *Git_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Git_Update_Call) RunAndReturn(run func(ctx context.Context) error) *Git_Update_Call {
	_c.Call.Return(run)
	return _c
}
