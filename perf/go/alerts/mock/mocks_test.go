// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/perf/go/alerts"
)

// NewConfigProvider creates a new instance of ConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigProvider {
	mock := &ConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConfigProvider is an autogenerated mock type for the ConfigProvider type
type ConfigProvider struct {
	mock.Mock
}

type ConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigProvider) EXPECT() *ConfigProvider_Expecter {
	return &ConfigProvider_Expecter{mock: &_m.Mock}
}

// GetAllAlertConfigs provides a mock function for the type ConfigProvider
func (_mock *ConfigProvider) GetAllAlertConfigs(ctx context.Context, includeDeleted bool) ([]*alerts.Alert, error) {
	ret := _mock.Called(ctx, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAlertConfigs")
	}

	var r0 []*alerts.Alert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) ([]*alerts.Alert, error)); ok {
		return returnFunc(ctx, includeDeleted)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) []*alerts.Alert); ok {
		r0 = returnFunc(ctx, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*alerts.Alert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConfigProvider_GetAllAlertConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAlertConfigs'
type ConfigProvider_GetAllAlertConfigs_Call struct {
	*mock.Call
}

// GetAllAlertConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - includeDeleted bool
func (_e *ConfigProvider_Expecter) GetAllAlertConfigs(ctx interface{}, includeDeleted interface{}) *ConfigProvider_GetAllAlertConfigs_Call {
	return &ConfigProvider_GetAllAlertConfigs_Call{Call: _e.mock.On("GetAllAlertConfigs", ctx, includeDeleted)}
}

func (_c *ConfigProvider_GetAllAlertConfigs_Call) Run(run func(ctx context.Context, includeDeleted bool)) *ConfigProvider_GetAllAlertConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ConfigProvider_GetAllAlertConfigs_Call) Return(alerts1 []*alerts.Alert, err error) *ConfigProvider_GetAllAlertConfigs_Call {
	_c.Call.Return(alerts1, err)
	return _c
}

func (_c *ConfigProvider_GetAllAlertConfigs_Call) RunAndReturn(run func(ctx context.Context, includeDeleted bool) ([]*alerts.Alert, error)) *ConfigProvider_GetAllAlertConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type ConfigProvider
func (_mock *ConfigProvider) Refresh(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConfigProvider_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type ConfigProvider_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ConfigProvider_Expecter) Refresh(ctx interface{}) *ConfigProvider_Refresh_Call {
	return &ConfigProvider_Refresh_Call{Call: _e.mock.On("Refresh", ctx)}
}

func (_c *ConfigProvider_Refresh_Call) Run(run func(ctx context.Context)) *ConfigProvider_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConfigProvider_Refresh_Call) Return(err error) *ConfigProvider_Refresh_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConfigProvider_Refresh_Call) RunAndReturn(run func(ctx context.Context) error) *ConfigProvider_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type Store
func (_mock *Store) Delete(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Store_Expecter) Delete(ctx interface{}, id interface{}) *Store_Delete_Call {
	return &Store_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Store_Delete_Call) Run(run func(ctx context.Context, id int)) *Store_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_Delete_Call) Return(err error) *Store_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Delete_Call) RunAndReturn(run func(ctx context.Context, id int) error) *Store_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Store
func (_mock *Store) List(ctx context.Context, includeDeleted bool) ([]*alerts.Alert, error) {
	ret := _mock.Called(ctx, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*alerts.Alert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) ([]*alerts.Alert, error)); ok {
		return returnFunc(ctx, includeDeleted)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) []*alerts.Alert); ok {
		r0 = returnFunc(ctx, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*alerts.Alert)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Store_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - includeDeleted bool
func (_e *Store_Expecter) List(ctx interface{}, includeDeleted interface{}) *Store_List_Call {
	return &Store_List_Call{Call: _e.mock.On("List", ctx, includeDeleted)}
}

func (_c *Store_List_Call) Run(run func(ctx context.Context, includeDeleted bool)) *Store_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_List_Call) Return(alerts1 []*alerts.Alert, err error) *Store_List_Call {
	_c.Call.Return(alerts1, err)
	return _c
}

func (_c *Store_List_Call) RunAndReturn(run func(ctx context.Context, includeDeleted bool) ([]*alerts.Alert, error)) *Store_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type Store
func (_mock *Store) Save(ctx context.Context, cfg *alerts.Alert) error {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *alerts.Alert) error); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Store_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg *alerts.Alert
func (_e *Store_Expecter) Save(ctx interface{}, cfg interface{}) *Store_Save_Call {
	return &Store_Save_Call{Call: _e.mock.On("Save", ctx, cfg)}
}

func (_c *Store_Save_Call) Run(run func(ctx context.Context, cfg *alerts.Alert)) *Store_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *alerts.Alert
		if args[1] != nil {
			arg1 = args[1].(*alerts.Alert)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_Save_Call) Return(err error) *Store_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Save_Call) RunAndReturn(run func(ctx context.Context, cfg *alerts.Alert) error) *Store_Save_Call {
	_c.Call.Return(run)
	return _c
}
