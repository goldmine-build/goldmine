// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	paramtools "go.skia.org/infra/go/paramtools"

	types "go.skia.org/infra/perf/go/types"
)

// OPSProvider is an autogenerated mock type for the OPSProvider type
type OPSProvider struct {
	mock.Mock
}

// GetLatestTile provides a mock function with given fields:
func (_m *OPSProvider) GetLatestTile() (types.TileNumber, error) {
	ret := _m.Called()

	var r0 types.TileNumber
	if rf, ok := ret.Get(0).(func() types.TileNumber); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.TileNumber)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderedParamSet provides a mock function with given fields: ctx, tileNumber
func (_m *OPSProvider) GetOrderedParamSet(ctx context.Context, tileNumber types.TileNumber) (*paramtools.OrderedParamSet, error) {
	ret := _m.Called(ctx, tileNumber)

	var r0 *paramtools.OrderedParamSet
	if rf, ok := ret.Get(0).(func(context.Context, types.TileNumber) *paramtools.OrderedParamSet); ok {
		r0 = rf(ctx, tileNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paramtools.OrderedParamSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.TileNumber) error); ok {
		r1 = rf(ctx, tileNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
