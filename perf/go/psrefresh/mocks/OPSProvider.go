// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	paramtools "go.skia.org/infra/go/paramtools"

	types "go.skia.org/infra/perf/go/types"
)

// OPSProvider is an autogenerated mock type for the OPSProvider type
type OPSProvider struct {
	mock.Mock
}

type OPSProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *OPSProvider) EXPECT() *OPSProvider_Expecter {
	return &OPSProvider_Expecter{mock: &_m.Mock}
}

// GetLatestTile provides a mock function with given fields: _a0
func (_m *OPSProvider) GetLatestTile(_a0 context.Context) (types.TileNumber, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTile")
	}

	var r0 types.TileNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.TileNumber, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.TileNumber); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.TileNumber)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OPSProvider_GetLatestTile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestTile'
type OPSProvider_GetLatestTile_Call struct {
	*mock.Call
}

// GetLatestTile is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *OPSProvider_Expecter) GetLatestTile(_a0 interface{}) *OPSProvider_GetLatestTile_Call {
	return &OPSProvider_GetLatestTile_Call{Call: _e.mock.On("GetLatestTile", _a0)}
}

func (_c *OPSProvider_GetLatestTile_Call) Run(run func(_a0 context.Context)) *OPSProvider_GetLatestTile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OPSProvider_GetLatestTile_Call) Return(_a0 types.TileNumber, _a1 error) *OPSProvider_GetLatestTile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OPSProvider_GetLatestTile_Call) RunAndReturn(run func(context.Context) (types.TileNumber, error)) *OPSProvider_GetLatestTile_Call {
	_c.Call.Return(run)
	return _c
}

// GetParamSet provides a mock function with given fields: ctx, tileNumber
func (_m *OPSProvider) GetParamSet(ctx context.Context, tileNumber types.TileNumber) (paramtools.ReadOnlyParamSet, error) {
	ret := _m.Called(ctx, tileNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetParamSet")
	}

	var r0 paramtools.ReadOnlyParamSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.TileNumber) (paramtools.ReadOnlyParamSet, error)); ok {
		return rf(ctx, tileNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.TileNumber) paramtools.ReadOnlyParamSet); ok {
		r0 = rf(ctx, tileNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(paramtools.ReadOnlyParamSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.TileNumber) error); ok {
		r1 = rf(ctx, tileNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OPSProvider_GetParamSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParamSet'
type OPSProvider_GetParamSet_Call struct {
	*mock.Call
}

// GetParamSet is a helper method to define mock.On call
//   - ctx context.Context
//   - tileNumber types.TileNumber
func (_e *OPSProvider_Expecter) GetParamSet(ctx interface{}, tileNumber interface{}) *OPSProvider_GetParamSet_Call {
	return &OPSProvider_GetParamSet_Call{Call: _e.mock.On("GetParamSet", ctx, tileNumber)}
}

func (_c *OPSProvider_GetParamSet_Call) Run(run func(ctx context.Context, tileNumber types.TileNumber)) *OPSProvider_GetParamSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.TileNumber))
	})
	return _c
}

func (_c *OPSProvider_GetParamSet_Call) Return(_a0 paramtools.ReadOnlyParamSet, _a1 error) *OPSProvider_GetParamSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OPSProvider_GetParamSet_Call) RunAndReturn(run func(context.Context, types.TileNumber) (paramtools.ReadOnlyParamSet, error)) *OPSProvider_GetParamSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewOPSProvider creates a new instance of OPSProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOPSProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *OPSProvider {
	mock := &OPSProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
