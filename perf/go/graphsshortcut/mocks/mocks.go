// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.goldmine.build/perf/go/graphsshortcut"
)

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// GetShortcut provides a mock function for the type Store
func (_mock *Store) GetShortcut(ctx context.Context, id string) (*graphsshortcut.GraphsShortcut, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetShortcut")
	}

	var r0 *graphsshortcut.GraphsShortcut
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*graphsshortcut.GraphsShortcut, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *graphsshortcut.GraphsShortcut); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graphsshortcut.GraphsShortcut)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_GetShortcut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShortcut'
type Store_GetShortcut_Call struct {
	*mock.Call
}

// GetShortcut is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Store_Expecter) GetShortcut(ctx interface{}, id interface{}) *Store_GetShortcut_Call {
	return &Store_GetShortcut_Call{Call: _e.mock.On("GetShortcut", ctx, id)}
}

func (_c *Store_GetShortcut_Call) Run(run func(ctx context.Context, id string)) *Store_GetShortcut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_GetShortcut_Call) Return(graphsShortcut *graphsshortcut.GraphsShortcut, err error) *Store_GetShortcut_Call {
	_c.Call.Return(graphsShortcut, err)
	return _c
}

func (_c *Store_GetShortcut_Call) RunAndReturn(run func(ctx context.Context, id string) (*graphsshortcut.GraphsShortcut, error)) *Store_GetShortcut_Call {
	_c.Call.Return(run)
	return _c
}

// InsertShortcut provides a mock function for the type Store
func (_mock *Store) InsertShortcut(ctx context.Context, shortcut *graphsshortcut.GraphsShortcut) (string, error) {
	ret := _mock.Called(ctx, shortcut)

	if len(ret) == 0 {
		panic("no return value specified for InsertShortcut")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *graphsshortcut.GraphsShortcut) (string, error)); ok {
		return returnFunc(ctx, shortcut)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *graphsshortcut.GraphsShortcut) string); ok {
		r0 = returnFunc(ctx, shortcut)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *graphsshortcut.GraphsShortcut) error); ok {
		r1 = returnFunc(ctx, shortcut)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_InsertShortcut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertShortcut'
type Store_InsertShortcut_Call struct {
	*mock.Call
}

// InsertShortcut is a helper method to define mock.On call
//   - ctx context.Context
//   - shortcut *graphsshortcut.GraphsShortcut
func (_e *Store_Expecter) InsertShortcut(ctx interface{}, shortcut interface{}) *Store_InsertShortcut_Call {
	return &Store_InsertShortcut_Call{Call: _e.mock.On("InsertShortcut", ctx, shortcut)}
}

func (_c *Store_InsertShortcut_Call) Run(run func(ctx context.Context, shortcut *graphsshortcut.GraphsShortcut)) *Store_InsertShortcut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *graphsshortcut.GraphsShortcut
		if args[1] != nil {
			arg1 = args[1].(*graphsshortcut.GraphsShortcut)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_InsertShortcut_Call) Return(s string, err error) *Store_InsertShortcut_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Store_InsertShortcut_Call) RunAndReturn(run func(ctx context.Context, shortcut *graphsshortcut.GraphsShortcut) (string, error)) *Store_InsertShortcut_Call {
	_c.Call.Return(run)
	return _c
}
