// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	store "go.skia.org/infra/perf/go/trybot/store"

	time "time"

	trybot "go.skia.org/infra/perf/go/trybot"

	types "go.skia.org/infra/perf/go/types"
)

// TryBotStore is an autogenerated mock type for the TryBotStore type
type TryBotStore struct {
	mock.Mock
}

type TryBotStore_Expecter struct {
	mock *mock.Mock
}

func (_m *TryBotStore) EXPECT() *TryBotStore_Expecter {
	return &TryBotStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, cl, patch
func (_m *TryBotStore) Get(ctx context.Context, cl types.CL, patch int) ([]store.GetResult, error) {
	ret := _m.Called(ctx, cl, patch)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []store.GetResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CL, int) ([]store.GetResult, error)); ok {
		return rf(ctx, cl, patch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CL, int) []store.GetResult); ok {
		r0 = rf(ctx, cl, patch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.GetResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CL, int) error); ok {
		r1 = rf(ctx, cl, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TryBotStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TryBotStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - cl types.CL
//   - patch int
func (_e *TryBotStore_Expecter) Get(ctx interface{}, cl interface{}, patch interface{}) *TryBotStore_Get_Call {
	return &TryBotStore_Get_Call{Call: _e.mock.On("Get", ctx, cl, patch)}
}

func (_c *TryBotStore_Get_Call) Run(run func(ctx context.Context, cl types.CL, patch int)) *TryBotStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CL), args[2].(int))
	})
	return _c
}

func (_c *TryBotStore_Get_Call) Return(_a0 []store.GetResult, _a1 error) *TryBotStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TryBotStore_Get_Call) RunAndReturn(run func(context.Context, types.CL, int) ([]store.GetResult, error)) *TryBotStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, since
func (_m *TryBotStore) List(ctx context.Context, since time.Time) ([]store.ListResult, error) {
	ret := _m.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []store.ListResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]store.ListResult, error)); ok {
		return rf(ctx, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []store.ListResult); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.ListResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TryBotStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type TryBotStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - since time.Time
func (_e *TryBotStore_Expecter) List(ctx interface{}, since interface{}) *TryBotStore_List_Call {
	return &TryBotStore_List_Call{Call: _e.mock.On("List", ctx, since)}
}

func (_c *TryBotStore_List_Call) Run(run func(ctx context.Context, since time.Time)) *TryBotStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *TryBotStore_List_Call) Return(_a0 []store.ListResult, _a1 error) *TryBotStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TryBotStore_List_Call) RunAndReturn(run func(context.Context, time.Time) ([]store.ListResult, error)) *TryBotStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, tryFile
func (_m *TryBotStore) Write(ctx context.Context, tryFile trybot.TryFile) error {
	ret := _m.Called(ctx, tryFile)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trybot.TryFile) error); ok {
		r0 = rf(ctx, tryFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryBotStore_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type TryBotStore_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - tryFile trybot.TryFile
func (_e *TryBotStore_Expecter) Write(ctx interface{}, tryFile interface{}) *TryBotStore_Write_Call {
	return &TryBotStore_Write_Call{Call: _e.mock.On("Write", ctx, tryFile)}
}

func (_c *TryBotStore_Write_Call) Run(run func(ctx context.Context, tryFile trybot.TryFile)) *TryBotStore_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trybot.TryFile))
	})
	return _c
}

func (_c *TryBotStore_Write_Call) Return(_a0 error) *TryBotStore_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TryBotStore_Write_Call) RunAndReturn(run func(context.Context, trybot.TryFile) error) *TryBotStore_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewTryBotStore creates a new instance of TryBotStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTryBotStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TryBotStore {
	mock := &TryBotStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
