// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProjectMirror is an autogenerated mock type for the ProjectMirror type
type ProjectMirror struct {
	mock.Mock
}

type ProjectMirror_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectMirror) EXPECT() *ProjectMirror_Expecter {
	return &ProjectMirror_Expecter{mock: &_m.Mock}
}

// AddToDownloadedPackageTarballs provides a mock function with given fields: packageTarballName
func (_m *ProjectMirror) AddToDownloadedPackageTarballs(packageTarballName string) {
	_m.Called(packageTarballName)
}

// ProjectMirror_AddToDownloadedPackageTarballs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToDownloadedPackageTarballs'
type ProjectMirror_AddToDownloadedPackageTarballs_Call struct {
	*mock.Call
}

// AddToDownloadedPackageTarballs is a helper method to define mock.On call
//   - packageTarballName string
func (_e *ProjectMirror_Expecter) AddToDownloadedPackageTarballs(packageTarballName interface{}) *ProjectMirror_AddToDownloadedPackageTarballs_Call {
	return &ProjectMirror_AddToDownloadedPackageTarballs_Call{Call: _e.mock.On("AddToDownloadedPackageTarballs", packageTarballName)}
}

func (_c *ProjectMirror_AddToDownloadedPackageTarballs_Call) Run(run func(packageTarballName string)) *ProjectMirror_AddToDownloadedPackageTarballs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ProjectMirror_AddToDownloadedPackageTarballs_Call) Return() *ProjectMirror_AddToDownloadedPackageTarballs_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProjectMirror_AddToDownloadedPackageTarballs_Call) RunAndReturn(run func(string)) *ProjectMirror_AddToDownloadedPackageTarballs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownloadedPackageNames provides a mock function with given fields:
func (_m *ProjectMirror) GetDownloadedPackageNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadedPackageNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectMirror_GetDownloadedPackageNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadedPackageNames'
type ProjectMirror_GetDownloadedPackageNames_Call struct {
	*mock.Call
}

// GetDownloadedPackageNames is a helper method to define mock.On call
func (_e *ProjectMirror_Expecter) GetDownloadedPackageNames() *ProjectMirror_GetDownloadedPackageNames_Call {
	return &ProjectMirror_GetDownloadedPackageNames_Call{Call: _e.mock.On("GetDownloadedPackageNames")}
}

func (_c *ProjectMirror_GetDownloadedPackageNames_Call) Run(run func()) *ProjectMirror_GetDownloadedPackageNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProjectMirror_GetDownloadedPackageNames_Call) Return(_a0 []string, _a1 error) *ProjectMirror_GetDownloadedPackageNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectMirror_GetDownloadedPackageNames_Call) RunAndReturn(run func() ([]string, error)) *ProjectMirror_GetDownloadedPackageNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectName provides a mock function with given fields:
func (_m *ProjectMirror) GetProjectName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjectName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProjectMirror_GetProjectName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectName'
type ProjectMirror_GetProjectName_Call struct {
	*mock.Call
}

// GetProjectName is a helper method to define mock.On call
func (_e *ProjectMirror_Expecter) GetProjectName() *ProjectMirror_GetProjectName_Call {
	return &ProjectMirror_GetProjectName_Call{Call: _e.mock.On("GetProjectName")}
}

func (_c *ProjectMirror_GetProjectName_Call) Run(run func()) *ProjectMirror_GetProjectName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProjectMirror_GetProjectName_Call) Return(_a0 string) *ProjectMirror_GetProjectName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectMirror_GetProjectName_Call) RunAndReturn(run func() string) *ProjectMirror_GetProjectName_Call {
	_c.Call.Return(run)
	return _c
}

// IsPackageTarballDownloaded provides a mock function with given fields: packageTarballName
func (_m *ProjectMirror) IsPackageTarballDownloaded(packageTarballName string) bool {
	ret := _m.Called(packageTarballName)

	if len(ret) == 0 {
		panic("no return value specified for IsPackageTarballDownloaded")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(packageTarballName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ProjectMirror_IsPackageTarballDownloaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPackageTarballDownloaded'
type ProjectMirror_IsPackageTarballDownloaded_Call struct {
	*mock.Call
}

// IsPackageTarballDownloaded is a helper method to define mock.On call
//   - packageTarballName string
func (_e *ProjectMirror_Expecter) IsPackageTarballDownloaded(packageTarballName interface{}) *ProjectMirror_IsPackageTarballDownloaded_Call {
	return &ProjectMirror_IsPackageTarballDownloaded_Call{Call: _e.mock.On("IsPackageTarballDownloaded", packageTarballName)}
}

func (_c *ProjectMirror_IsPackageTarballDownloaded_Call) Run(run func(packageTarballName string)) *ProjectMirror_IsPackageTarballDownloaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ProjectMirror_IsPackageTarballDownloaded_Call) Return(_a0 bool) *ProjectMirror_IsPackageTarballDownloaded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectMirror_IsPackageTarballDownloaded_Call) RunAndReturn(run func(string) bool) *ProjectMirror_IsPackageTarballDownloaded_Call {
	_c.Call.Return(run)
	return _c
}

// StartMirror provides a mock function with given fields: ctx, port
func (_m *ProjectMirror) StartMirror(ctx context.Context, port int) error {
	ret := _m.Called(ctx, port)

	if len(ret) == 0 {
		panic("no return value specified for StartMirror")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectMirror_StartMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMirror'
type ProjectMirror_StartMirror_Call struct {
	*mock.Call
}

// StartMirror is a helper method to define mock.On call
//   - ctx context.Context
//   - port int
func (_e *ProjectMirror_Expecter) StartMirror(ctx interface{}, port interface{}) *ProjectMirror_StartMirror_Call {
	return &ProjectMirror_StartMirror_Call{Call: _e.mock.On("StartMirror", ctx, port)}
}

func (_c *ProjectMirror_StartMirror_Call) Run(run func(ctx context.Context, port int)) *ProjectMirror_StartMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ProjectMirror_StartMirror_Call) Return(_a0 error) *ProjectMirror_StartMirror_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectMirror_StartMirror_Call) RunAndReturn(run func(context.Context, int) error) *ProjectMirror_StartMirror_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectMirror creates a new instance of ProjectMirror. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectMirror(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectMirror {
	mock := &ProjectMirror{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
