// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	issuetracker "go.skia.org/infra/go/issuetracker/v1"

	testing "testing"
)

// IIssueTrackerService is an autogenerated mock type for the IIssueTrackerService type
type IIssueTrackerService struct {
	mock.Mock
}

// GetIssue provides a mock function with given fields: issueId
func (_m *IIssueTrackerService) GetIssue(issueId int64) (*issuetracker.Issue, error) {
	ret := _m.Called(issueId)

	var r0 *issuetracker.Issue
	if rf, ok := ret.Get(0).(func(int64) *issuetracker.Issue); ok {
		r0 = rf(issueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*issuetracker.Issue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(issueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeIssue provides a mock function with given fields: title, body, owner
func (_m *IIssueTrackerService) MakeIssue(title string, body string, owner string) (*issuetracker.Issue, error) {
	ret := _m.Called(title, body, owner)

	var r0 *issuetracker.Issue
	if rf, ok := ret.Get(0).(func(string, string, string) *issuetracker.Issue); ok {
		r0 = rf(title, body, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*issuetracker.Issue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(title, body, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIIssueTrackerService creates a new instance of IIssueTrackerService. It also registers a cleanup function to assert the mocks expectations.
func NewIIssueTrackerService(t testing.TB) *IIssueTrackerService {
	mock := &IIssueTrackerService{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
