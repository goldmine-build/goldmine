// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/go/gitiles"
	"go.skia.org/infra/go/vcsinfo"
)

// NewGitilesLogger creates a new instance of GitilesLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitilesLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitilesLogger {
	mock := &GitilesLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitilesLogger is an autogenerated mock type for the GitilesLogger type
type GitilesLogger struct {
	mock.Mock
}

type GitilesLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *GitilesLogger) EXPECT() *GitilesLogger_Expecter {
	return &GitilesLogger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function for the type GitilesLogger
func (_mock *GitilesLogger) Log(ctx context.Context, logExpr string, opts ...gitiles.LogOption) ([]*vcsinfo.LongCommit, error) {
	// gitiles.LogOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, logExpr)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 []*vcsinfo.LongCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...gitiles.LogOption) ([]*vcsinfo.LongCommit, error)); ok {
		return returnFunc(ctx, logExpr, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...gitiles.LogOption) []*vcsinfo.LongCommit); ok {
		r0 = returnFunc(ctx, logExpr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.LongCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...gitiles.LogOption) error); ok {
		r1 = returnFunc(ctx, logExpr, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitilesLogger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type GitilesLogger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - logExpr string
//   - opts ...gitiles.LogOption
func (_e *GitilesLogger_Expecter) Log(ctx interface{}, logExpr interface{}, opts ...interface{}) *GitilesLogger_Log_Call {
	return &GitilesLogger_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{ctx, logExpr}, opts...)...)}
}

func (_c *GitilesLogger_Log_Call) Run(run func(ctx context.Context, logExpr string, opts ...gitiles.LogOption)) *GitilesLogger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []gitiles.LogOption
		variadicArgs := make([]gitiles.LogOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gitiles.LogOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *GitilesLogger_Log_Call) Return(longCommits []*vcsinfo.LongCommit, err error) *GitilesLogger_Log_Call {
	_c.Call.Return(longCommits, err)
	return _c
}

func (_c *GitilesLogger_Log_Call) RunAndReturn(run func(ctx context.Context, logExpr string, opts ...gitiles.LogOption) ([]*vcsinfo.LongCommit, error)) *GitilesLogger_Log_Call {
	_c.Call.Return(run)
	return _c
}

// LogFirstParent provides a mock function for the type GitilesLogger
func (_mock *GitilesLogger) LogFirstParent(ctx context.Context, from string, to string, opts ...gitiles.LogOption) ([]*vcsinfo.LongCommit, error) {
	// gitiles.LogOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, from, to)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LogFirstParent")
	}

	var r0 []*vcsinfo.LongCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...gitiles.LogOption) ([]*vcsinfo.LongCommit, error)); ok {
		return returnFunc(ctx, from, to, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...gitiles.LogOption) []*vcsinfo.LongCommit); ok {
		r0 = returnFunc(ctx, from, to, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.LongCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...gitiles.LogOption) error); ok {
		r1 = returnFunc(ctx, from, to, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitilesLogger_LogFirstParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogFirstParent'
type GitilesLogger_LogFirstParent_Call struct {
	*mock.Call
}

// LogFirstParent is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
//   - to string
//   - opts ...gitiles.LogOption
func (_e *GitilesLogger_Expecter) LogFirstParent(ctx interface{}, from interface{}, to interface{}, opts ...interface{}) *GitilesLogger_LogFirstParent_Call {
	return &GitilesLogger_LogFirstParent_Call{Call: _e.mock.On("LogFirstParent",
		append([]interface{}{ctx, from, to}, opts...)...)}
}

func (_c *GitilesLogger_LogFirstParent_Call) Run(run func(ctx context.Context, from string, to string, opts ...gitiles.LogOption)) *GitilesLogger_LogFirstParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []gitiles.LogOption
		variadicArgs := make([]gitiles.LogOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(gitiles.LogOption)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *GitilesLogger_LogFirstParent_Call) Return(longCommits []*vcsinfo.LongCommit, err error) *GitilesLogger_LogFirstParent_Call {
	_c.Call.Return(longCommits, err)
	return _c
}

func (_c *GitilesLogger_LogFirstParent_Call) RunAndReturn(run func(ctx context.Context, from string, to string, opts ...gitiles.LogOption) ([]*vcsinfo.LongCommit, error)) *GitilesLogger_LogFirstParent_Call {
	_c.Call.Return(run)
	return _c
}
