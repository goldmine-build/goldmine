// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/go/vcsinfo"
	"go.skia.org/infra/golden/go/code_review"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CommentOn provides a mock function for the type Client
func (_mock *Client) CommentOn(ctx context.Context, clID string, message string) error {
	ret := _mock.Called(ctx, clID, message)

	if len(ret) == 0 {
		panic("no return value specified for CommentOn")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, clID, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_CommentOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentOn'
type Client_CommentOn_Call struct {
	*mock.Call
}

// CommentOn is a helper method to define mock.On call
//   - ctx context.Context
//   - clID string
//   - message string
func (_e *Client_Expecter) CommentOn(ctx interface{}, clID interface{}, message interface{}) *Client_CommentOn_Call {
	return &Client_CommentOn_Call{Call: _e.mock.On("CommentOn", ctx, clID, message)}
}

func (_c *Client_CommentOn_Call) Run(run func(ctx context.Context, clID string, message string)) *Client_CommentOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_CommentOn_Call) Return(err error) *Client_CommentOn_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_CommentOn_Call) RunAndReturn(run func(ctx context.Context, clID string, message string) error) *Client_CommentOn_Call {
	_c.Call.Return(run)
	return _c
}

// GetChangelist provides a mock function for the type Client
func (_mock *Client) GetChangelist(ctx context.Context, id string) (code_review.Changelist, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChangelist")
	}

	var r0 code_review.Changelist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (code_review.Changelist, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) code_review.Changelist); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(code_review.Changelist)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetChangelist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChangelist'
type Client_GetChangelist_Call struct {
	*mock.Call
}

// GetChangelist is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Client_Expecter) GetChangelist(ctx interface{}, id interface{}) *Client_GetChangelist_Call {
	return &Client_GetChangelist_Call{Call: _e.mock.On("GetChangelist", ctx, id)}
}

func (_c *Client_GetChangelist_Call) Run(run func(ctx context.Context, id string)) *Client_GetChangelist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetChangelist_Call) Return(changelist code_review.Changelist, err error) *Client_GetChangelist_Call {
	_c.Call.Return(changelist, err)
	return _c
}

func (_c *Client_GetChangelist_Call) RunAndReturn(run func(ctx context.Context, id string) (code_review.Changelist, error)) *Client_GetChangelist_Call {
	_c.Call.Return(run)
	return _c
}

// GetChangelistIDForCommit provides a mock function for the type Client
func (_mock *Client) GetChangelistIDForCommit(ctx context.Context, commit *vcsinfo.LongCommit) (string, error) {
	ret := _mock.Called(ctx, commit)

	if len(ret) == 0 {
		panic("no return value specified for GetChangelistIDForCommit")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *vcsinfo.LongCommit) (string, error)); ok {
		return returnFunc(ctx, commit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *vcsinfo.LongCommit) string); ok {
		r0 = returnFunc(ctx, commit)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *vcsinfo.LongCommit) error); ok {
		r1 = returnFunc(ctx, commit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetChangelistIDForCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChangelistIDForCommit'
type Client_GetChangelistIDForCommit_Call struct {
	*mock.Call
}

// GetChangelistIDForCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - commit *vcsinfo.LongCommit
func (_e *Client_Expecter) GetChangelistIDForCommit(ctx interface{}, commit interface{}) *Client_GetChangelistIDForCommit_Call {
	return &Client_GetChangelistIDForCommit_Call{Call: _e.mock.On("GetChangelistIDForCommit", ctx, commit)}
}

func (_c *Client_GetChangelistIDForCommit_Call) Run(run func(ctx context.Context, commit *vcsinfo.LongCommit)) *Client_GetChangelistIDForCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *vcsinfo.LongCommit
		if args[1] != nil {
			arg1 = args[1].(*vcsinfo.LongCommit)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetChangelistIDForCommit_Call) Return(s string, err error) *Client_GetChangelistIDForCommit_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Client_GetChangelistIDForCommit_Call) RunAndReturn(run func(ctx context.Context, commit *vcsinfo.LongCommit) (string, error)) *Client_GetChangelistIDForCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatchset provides a mock function for the type Client
func (_mock *Client) GetPatchset(ctx context.Context, clID string, psID string, psOrder int) (code_review.Patchset, error) {
	ret := _mock.Called(ctx, clID, psID, psOrder)

	if len(ret) == 0 {
		panic("no return value specified for GetPatchset")
	}

	var r0 code_review.Patchset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) (code_review.Patchset, error)); ok {
		return returnFunc(ctx, clID, psID, psOrder)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int) code_review.Patchset); ok {
		r0 = returnFunc(ctx, clID, psID, psOrder)
	} else {
		r0 = ret.Get(0).(code_review.Patchset)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = returnFunc(ctx, clID, psID, psOrder)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetPatchset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatchset'
type Client_GetPatchset_Call struct {
	*mock.Call
}

// GetPatchset is a helper method to define mock.On call
//   - ctx context.Context
//   - clID string
//   - psID string
//   - psOrder int
func (_e *Client_Expecter) GetPatchset(ctx interface{}, clID interface{}, psID interface{}, psOrder interface{}) *Client_GetPatchset_Call {
	return &Client_GetPatchset_Call{Call: _e.mock.On("GetPatchset", ctx, clID, psID, psOrder)}
}

func (_c *Client_GetPatchset_Call) Run(run func(ctx context.Context, clID string, psID string, psOrder int)) *Client_GetPatchset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Client_GetPatchset_Call) Return(patchset code_review.Patchset, err error) *Client_GetPatchset_Call {
	_c.Call.Return(patchset, err)
	return _c
}

func (_c *Client_GetPatchset_Call) RunAndReturn(run func(ctx context.Context, clID string, psID string, psOrder int) (code_review.Patchset, error)) *Client_GetPatchset_Call {
	_c.Call.Return(run)
	return _c
}

// NewChangelistLandedUpdater creates a new instance of ChangelistLandedUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChangelistLandedUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChangelistLandedUpdater {
	mock := &ChangelistLandedUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChangelistLandedUpdater is an autogenerated mock type for the ChangelistLandedUpdater type
type ChangelistLandedUpdater struct {
	mock.Mock
}

type ChangelistLandedUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *ChangelistLandedUpdater) EXPECT() *ChangelistLandedUpdater_Expecter {
	return &ChangelistLandedUpdater_Expecter{mock: &_m.Mock}
}

// UpdateChangelistsAsLanded provides a mock function for the type ChangelistLandedUpdater
func (_mock *ChangelistLandedUpdater) UpdateChangelistsAsLanded(ctx context.Context, commits []*vcsinfo.LongCommit) error {
	ret := _mock.Called(ctx, commits)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChangelistsAsLanded")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*vcsinfo.LongCommit) error); ok {
		r0 = returnFunc(ctx, commits)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChangelistsAsLanded'
type ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call struct {
	*mock.Call
}

// UpdateChangelistsAsLanded is a helper method to define mock.On call
//   - ctx context.Context
//   - commits []*vcsinfo.LongCommit
func (_e *ChangelistLandedUpdater_Expecter) UpdateChangelistsAsLanded(ctx interface{}, commits interface{}) *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call {
	return &ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call{Call: _e.mock.On("UpdateChangelistsAsLanded", ctx, commits)}
}

func (_c *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call) Run(run func(ctx context.Context, commits []*vcsinfo.LongCommit)) *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*vcsinfo.LongCommit
		if args[1] != nil {
			arg1 = args[1].([]*vcsinfo.LongCommit)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call) Return(err error) *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call) RunAndReturn(run func(ctx context.Context, commits []*vcsinfo.LongCommit) error) *ChangelistLandedUpdater_UpdateChangelistsAsLanded_Call {
	_c.Call.Return(run)
	return _c
}
