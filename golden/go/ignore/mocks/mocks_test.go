// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.goldmine.build/golden/go/ignore"
)

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type Store
func (_mock *Store) Create(context1 context.Context, rule ignore.Rule) error {
	ret := _mock.Called(context1, rule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ignore.Rule) error); ok {
		r0 = returnFunc(context1, rule)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Store_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - rule ignore.Rule
func (_e *Store_Expecter) Create(context1 interface{}, rule interface{}) *Store_Create_Call {
	return &Store_Create_Call{Call: _e.mock.On("Create", context1, rule)}
}

func (_c *Store_Create_Call) Run(run func(context1 context.Context, rule ignore.Rule)) *Store_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ignore.Rule
		if args[1] != nil {
			arg1 = args[1].(ignore.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_Create_Call) Return(err error) *Store_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Create_Call) RunAndReturn(run func(context1 context.Context, rule ignore.Rule) error) *Store_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type Store
func (_mock *Store) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Store_Expecter) Delete(ctx interface{}, id interface{}) *Store_Delete_Call {
	return &Store_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Store_Delete_Call) Run(run func(ctx context.Context, id string)) *Store_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_Delete_Call) Return(err error) *Store_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *Store_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Store
func (_mock *Store) List(context1 context.Context) ([]ignore.Rule, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []ignore.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]ignore.Rule, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []ignore.Rule); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ignore.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Store_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Store_Expecter) List(context1 interface{}) *Store_List_Call {
	return &Store_List_Call{Call: _e.mock.On("List", context1)}
}

func (_c *Store_List_Call) Run(run func(context1 context.Context)) *Store_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_List_Call) Return(rules []ignore.Rule, err error) *Store_List_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *Store_List_Call) RunAndReturn(run func(context1 context.Context) ([]ignore.Rule, error)) *Store_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type Store
func (_mock *Store) Update(ctx context.Context, rule ignore.Rule) error {
	ret := _mock.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ignore.Rule) error); ok {
		r0 = returnFunc(ctx, rule)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Store_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - rule ignore.Rule
func (_e *Store_Expecter) Update(ctx interface{}, rule interface{}) *Store_Update_Call {
	return &Store_Update_Call{Call: _e.mock.On("Update", ctx, rule)}
}

func (_c *Store_Update_Call) Run(run func(ctx context.Context, rule ignore.Rule)) *Store_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ignore.Rule
		if args[1] != nil {
			arg1 = args[1].(ignore.Rule)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_Update_Call) Return(err error) *Store_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_Update_Call) RunAndReturn(run func(ctx context.Context, rule ignore.Rule) error) *Store_Update_Call {
	_c.Call.Return(run)
	return _c
}
