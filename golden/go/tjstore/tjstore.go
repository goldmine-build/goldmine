// Package tjstore defines an interface for storing TryJob-related data
// as needed for operating Gold.
package tjstore

import (
	"context"
	"errors"

	ci "go.skia.org/infra/golden/go/continuous_integration"
	"go.skia.org/infra/golden/go/types"
)

// Store (sometimes called TryJobStore) is an interface around a database
// for storing TryJobs and TryJobResults. Of note, we will only store data for
// TryJobs which uploaded data to Gold (e.g. via ingestion); the purpose of
// this interface is not to store data about every TryJob.
type Store interface {
	// GetTryJob returns the TryJob corresponding to the given id.
	// Returns NotFound if it doesn't exist.
	GetTryJob(ctx context.Context, id string) (ci.TryJob, error)
	// GetRunningTryJobs returns any TryJobs stored in the Running state.
	// The returned slice could be empty.
	GetRunningTryJobs(ctx context.Context) ([]ci.TryJob, error)
	// GetResults returns any TryJobResults for a given ChangeList and PatchSet.
	// The returned slice could be empty.
	GetResults(ctx context.Context, clID, psID string) ([]TryJobResult, error)

	// PutTryJob stores the given TryJob, overwriting any values for
	// that TryJob if they already existed. The TryJob will "belong" to the
	// the associated ChangeList and PatchSet.
	PutTryJob(ctx context.Context, clID, psID string, tj ci.TryJob) error
	// PutResults stores the given TryJobResult, overwriting any values for
	// those TryJobResult if they already existed. The TryJobResults will "belong"
	// to the the associated ChangeList and PatchSet.
	PutResults(ctx context.Context, clID, psID string, r []TryJobResult) error
}

var NotFound = errors.New("not found")

type TryJobResult struct {
	// Params describe the configuration that produced the digest/image.
	Params map[string]string

	// Options give extra details about this trace.
	Options map[string]string

	// Digest references the image that was generated by the test.
	Digest types.Digest
}
