// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	trace "go.skia.org/infra/golden/go/comment/trace"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: _a0, _a1
func (_m *Store) CreateComment(_a0 context.Context, _a1 trace.Comment) (trace.ID, error) {
	ret := _m.Called(_a0, _a1)

	var r0 trace.ID
	if rf, ok := ret.Get(0).(func(context.Context, trace.Comment) trace.ID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(trace.ID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, trace.Comment) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *Store) DeleteComment(ctx context.Context, id trace.ID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trace.ID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListComments provides a mock function with given fields: _a0
func (_m *Store) ListComments(_a0 context.Context) ([]trace.Comment, error) {
	ret := _m.Called(_a0)

	var r0 []trace.Comment
	if rf, ok := ret.Get(0).(func(context.Context) []trace.Comment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trace.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: _a0, _a1
func (_m *Store) UpdateComment(_a0 context.Context, _a1 trace.Comment) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trace.Comment) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
