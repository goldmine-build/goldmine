// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import baseline "go.skia.org/infra/golden/go/baseline"
import io "io"
import mock "github.com/stretchr/testify/mock"
import storage "go.skia.org/infra/golden/go/storage"

// GCSClient is an autogenerated mock type for the GCSClient type
type GCSClient struct {
	mock.Mock
}

// LoadKnownDigests provides a mock function with given fields: w
func (_m *GCSClient) LoadKnownDigests(w io.Writer) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Options provides a mock function with given fields:
func (_m *GCSClient) Options() storage.GCSClientOptions {
	ret := _m.Called()

	var r0 storage.GCSClientOptions
	if rf, ok := ret.Get(0).(func() storage.GCSClientOptions); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.GCSClientOptions)
	}

	return r0
}

// ReadBaseline provides a mock function with given fields: commitHash, issueID
func (_m *GCSClient) ReadBaseline(commitHash string, issueID int64) (*baseline.CommitableBaseline, error) {
	ret := _m.Called(commitHash, issueID)

	var r0 *baseline.CommitableBaseline
	if rf, ok := ret.Get(0).(func(string, int64) *baseline.CommitableBaseline); ok {
		r0 = rf(commitHash, issueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baseline.CommitableBaseline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(commitHash, issueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveForTestingOnly provides a mock function with given fields: targetPath
func (_m *GCSClient) RemoveForTestingOnly(targetPath string) error {
	ret := _m.Called(targetPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(targetPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteBaseline provides a mock function with given fields: b
func (_m *GCSClient) WriteBaseline(b *baseline.CommitableBaseline) (string, error) {
	ret := _m.Called(b)

	var r0 string
	if rf, ok := ret.Get(0).(func(*baseline.CommitableBaseline) string); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*baseline.CommitableBaseline) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteKnownDigests provides a mock function with given fields: digests
func (_m *GCSClient) WriteKnownDigests(digests []string) error {
	ret := _m.Called(digests)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(digests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
