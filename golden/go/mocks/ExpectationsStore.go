// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import expstorage "go.skia.org/infra/golden/go/expstorage"
import mock "github.com/stretchr/testify/mock"
import types "go.skia.org/infra/golden/go/types"

// ExpectationsStore is an autogenerated mock type for the ExpectationsStore type
type ExpectationsStore struct {
	mock.Mock
}

// AddChange provides a mock function with given fields: changes, userId
func (_m *ExpectationsStore) AddChange(changes types.TestExp, userId string) error {
	ret := _m.Called(changes, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.TestExp, string) error); ok {
		r0 = rf(changes, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clear provides a mock function with given fields:
func (_m *ExpectationsStore) Clear() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *ExpectationsStore) Get() (types.TestExpBuilder, error) {
	ret := _m.Called()

	var r0 types.TestExpBuilder
	if rf, ok := ret.Get(0).(func() types.TestExpBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TestExpBuilder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryLog provides a mock function with given fields: offset, size, details
func (_m *ExpectationsStore) QueryLog(offset int, size int, details bool) ([]*expstorage.TriageLogEntry, int, error) {
	ret := _m.Called(offset, size, details)

	var r0 []*expstorage.TriageLogEntry
	if rf, ok := ret.Get(0).(func(int, int, bool) []*expstorage.TriageLogEntry); ok {
		r0 = rf(offset, size, details)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*expstorage.TriageLogEntry)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, bool) int); ok {
		r1 = rf(offset, size, details)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, bool) error); ok {
		r2 = rf(offset, size, details)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UndoChange provides a mock function with given fields: changeID, userID
func (_m *ExpectationsStore) UndoChange(changeID int64, userID string) (types.TestExp, error) {
	ret := _m.Called(changeID, userID)

	var r0 types.TestExp
	if rf, ok := ret.Get(0).(func(int64, string) types.TestExp); ok {
		r0 = rf(changeID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TestExp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(changeID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
