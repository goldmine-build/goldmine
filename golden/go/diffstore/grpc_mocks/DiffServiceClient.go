// Code generated by mockery v1.0.0. DO NOT EDIT.

package grpc_mocks

import (
	context "context"

	diffstore "go.skia.org/infra/golden/go/diffstore"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DiffServiceClient is an autogenerated mock type for the DiffServiceClient type
type DiffServiceClient struct {
	mock.Mock
}

// GetDiffs provides a mock function with given fields: ctx, in, opts
func (_m *DiffServiceClient) GetDiffs(ctx context.Context, in *diffstore.GetDiffsRequest, opts ...grpc.CallOption) (*diffstore.GetDiffsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *diffstore.GetDiffsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *diffstore.GetDiffsRequest, ...grpc.CallOption) *diffstore.GetDiffsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diffstore.GetDiffsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *diffstore.GetDiffsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *DiffServiceClient) Ping(ctx context.Context, in *diffstore.Empty, opts ...grpc.CallOption) (*diffstore.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *diffstore.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *diffstore.Empty, ...grpc.CallOption) *diffstore.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diffstore.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *diffstore.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurgeDigests provides a mock function with given fields: ctx, in, opts
func (_m *DiffServiceClient) PurgeDigests(ctx context.Context, in *diffstore.PurgeDigestsRequest, opts ...grpc.CallOption) (*diffstore.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *diffstore.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *diffstore.PurgeDigestsRequest, ...grpc.CallOption) *diffstore.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diffstore.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *diffstore.PurgeDigestsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnavailableDigests provides a mock function with given fields: ctx, in, opts
func (_m *DiffServiceClient) UnavailableDigests(ctx context.Context, in *diffstore.Empty, opts ...grpc.CallOption) (*diffstore.UnavailableDigestsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *diffstore.UnavailableDigestsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *diffstore.Empty, ...grpc.CallOption) *diffstore.UnavailableDigestsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diffstore.UnavailableDigestsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *diffstore.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
