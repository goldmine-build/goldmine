// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "go.skia.org/infra/golden/go/types"
)

// MetricsStore is an autogenerated mock type for the MetricsStore type
type MetricsStore struct {
	mock.Mock
}

// LoadDiffMetrics provides a mock function with given fields: id
func (_m *MetricsStore) LoadDiffMetrics(id string) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurgeDiffMetrics provides a mock function with given fields: digests
func (_m *MetricsStore) PurgeDiffMetrics(digests types.DigestSlice) error {
	ret := _m.Called(digests)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DigestSlice) error); ok {
		r0 = rf(digests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDiffMetrics provides a mock function with given fields: id, diffMetrics
func (_m *MetricsStore) SaveDiffMetrics(id string, diffMetrics interface{}) error {
	ret := _m.Called(id, diffMetrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(id, diffMetrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
