// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	diff "go.skia.org/infra/golden/go/diff"

	mock "github.com/stretchr/testify/mock"

	types "go.skia.org/infra/golden/go/types"
)

// MetricsStore is an autogenerated mock type for the MetricsStore type
type MetricsStore struct {
	mock.Mock
}

// LoadDiffMetrics provides a mock function with given fields: ctx, id
func (_m *MetricsStore) LoadDiffMetrics(ctx context.Context, id string) (*diff.DiffMetrics, error) {
	ret := _m.Called(ctx, id)

	var r0 *diff.DiffMetrics
	if rf, ok := ret.Get(0).(func(context.Context, string) *diff.DiffMetrics); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diff.DiffMetrics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurgeDiffMetrics provides a mock function with given fields: ctx, digests
func (_m *MetricsStore) PurgeDiffMetrics(ctx context.Context, digests types.DigestSlice) error {
	ret := _m.Called(ctx, digests)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DigestSlice) error); ok {
		r0 = rf(ctx, digests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDiffMetrics provides a mock function with given fields: ctx, id, diffMetrics
func (_m *MetricsStore) SaveDiffMetrics(ctx context.Context, id string, diffMetrics *diff.DiffMetrics) error {
	ret := _m.Called(ctx, id, diffMetrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *diff.DiffMetrics) error); ok {
		r0 = rf(ctx, id, diffMetrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
