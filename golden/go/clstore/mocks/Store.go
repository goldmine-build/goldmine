// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	code_review "go.skia.org/infra/golden/go/code_review"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// GetChangeList provides a mock function with given fields: ctx, id
func (_m *Store) GetChangeList(ctx context.Context, id string) (code_review.ChangeList, error) {
	ret := _m.Called(ctx, id)

	var r0 code_review.ChangeList
	if rf, ok := ret.Get(0).(func(context.Context, string) code_review.ChangeList); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(code_review.ChangeList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatchSet provides a mock function with given fields: ctx, clID, psID
func (_m *Store) GetPatchSet(ctx context.Context, clID string, psID string) (code_review.PatchSet, error) {
	ret := _m.Called(ctx, clID, psID)

	var r0 code_review.PatchSet
	if rf, ok := ret.Get(0).(func(context.Context, string, string) code_review.PatchSet); ok {
		r0 = rf(ctx, clID, psID)
	} else {
		r0 = ret.Get(0).(code_review.PatchSet)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clID, psID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutChangeList provides a mock function with given fields: ctx, cl
func (_m *Store) PutChangeList(ctx context.Context, cl code_review.ChangeList) error {
	ret := _m.Called(ctx, cl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, code_review.ChangeList) error); ok {
		r0 = rf(ctx, cl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutPatchSet provides a mock function with given fields: ctx, ps
func (_m *Store) PutPatchSet(ctx context.Context, ps code_review.PatchSet) error {
	ret := _m.Called(ctx, ps)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, code_review.PatchSet) error); ok {
		r0 = rf(ctx, ps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
