// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewFileSearcher creates a new instance of FileSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileSearcher {
	mock := &FileSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileSearcher is an autogenerated mock type for the FileSearcher type
type FileSearcher struct {
	mock.Mock
}

type FileSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *FileSearcher) EXPECT() *FileSearcher_Expecter {
	return &FileSearcher_Expecter{mock: &_m.Mock}
}

// SearchForFiles provides a mock function for the type FileSearcher
func (_mock *FileSearcher) SearchForFiles(ctx context.Context, start time.Time, end time.Time) []string {
	ret := _mock.Called(ctx, start, end)

	if len(ret) == 0 {
		panic("no return value specified for SearchForFiles")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []string); ok {
		r0 = returnFunc(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// FileSearcher_SearchForFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchForFiles'
type FileSearcher_SearchForFiles_Call struct {
	*mock.Call
}

// SearchForFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
func (_e *FileSearcher_Expecter) SearchForFiles(ctx interface{}, start interface{}, end interface{}) *FileSearcher_SearchForFiles_Call {
	return &FileSearcher_SearchForFiles_Call{Call: _e.mock.On("SearchForFiles", ctx, start, end)}
}

func (_c *FileSearcher_SearchForFiles_Call) Run(run func(ctx context.Context, start time.Time, end time.Time)) *FileSearcher_SearchForFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FileSearcher_SearchForFiles_Call) Return(strings []string) *FileSearcher_SearchForFiles_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *FileSearcher_SearchForFiles_Call) RunAndReturn(run func(ctx context.Context, start time.Time, end time.Time) []string) *FileSearcher_SearchForFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewSource creates a new instance of Source. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *Source {
	mock := &Source{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

type Source_Expecter struct {
	mock *mock.Mock
}

func (_m *Source) EXPECT() *Source_Expecter {
	return &Source_Expecter{mock: &_m.Mock}
}

// GetReader provides a mock function for the type Source
func (_mock *Source) GetReader(ctx context.Context, name string) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetReader")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Source_GetReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReader'
type Source_GetReader_Call struct {
	*mock.Call
}

// GetReader is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Source_Expecter) GetReader(ctx interface{}, name interface{}) *Source_GetReader_Call {
	return &Source_GetReader_Call{Call: _e.mock.On("GetReader", ctx, name)}
}

func (_c *Source_GetReader_Call) Run(run func(ctx context.Context, name string)) *Source_GetReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Source_GetReader_Call) Return(readCloser io.ReadCloser, err error) *Source_GetReader_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *Source_GetReader_Call) RunAndReturn(run func(ctx context.Context, name string) (io.ReadCloser, error)) *Source_GetReader_Call {
	_c.Call.Return(run)
	return _c
}

// HandlesFile provides a mock function for the type Source
func (_mock *Source) HandlesFile(name string) bool {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for HandlesFile")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Source_HandlesFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlesFile'
type Source_HandlesFile_Call struct {
	*mock.Call
}

// HandlesFile is a helper method to define mock.On call
//   - name string
func (_e *Source_Expecter) HandlesFile(name interface{}) *Source_HandlesFile_Call {
	return &Source_HandlesFile_Call{Call: _e.mock.On("HandlesFile", name)}
}

func (_c *Source_HandlesFile_Call) Run(run func(name string)) *Source_HandlesFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Source_HandlesFile_Call) Return(b bool) *Source_HandlesFile_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Source_HandlesFile_Call) RunAndReturn(run func(name string) bool) *Source_HandlesFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

type Processor_Expecter struct {
	mock *mock.Mock
}

func (_m *Processor) EXPECT() *Processor_Expecter {
	return &Processor_Expecter{mock: &_m.Mock}
}

// HandlesFile provides a mock function for the type Processor
func (_mock *Processor) HandlesFile(name string) bool {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for HandlesFile")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Processor_HandlesFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlesFile'
type Processor_HandlesFile_Call struct {
	*mock.Call
}

// HandlesFile is a helper method to define mock.On call
//   - name string
func (_e *Processor_Expecter) HandlesFile(name interface{}) *Processor_HandlesFile_Call {
	return &Processor_HandlesFile_Call{Call: _e.mock.On("HandlesFile", name)}
}

func (_c *Processor_HandlesFile_Call) Run(run func(name string)) *Processor_HandlesFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Processor_HandlesFile_Call) Return(b bool) *Processor_HandlesFile_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Processor_HandlesFile_Call) RunAndReturn(run func(name string) bool) *Processor_HandlesFile_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type Processor
func (_mock *Processor) Process(ctx context.Context, filename string) error {
	ret := _mock.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, filename)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Processor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type Processor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *Processor_Expecter) Process(ctx interface{}, filename interface{}) *Processor_Process_Call {
	return &Processor_Process_Call{Call: _e.mock.On("Process", ctx, filename)}
}

func (_c *Processor_Process_Call) Run(run func(ctx context.Context, filename string)) *Processor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Processor_Process_Call) Return(err error) *Processor_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Processor_Process_Call) RunAndReturn(run func(ctx context.Context, filename string) error) *Processor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// SetIngested provides a mock function for the type Store
func (_mock *Store) SetIngested(ctx context.Context, fileName string, ts time.Time) error {
	ret := _mock.Called(ctx, fileName, ts)

	if len(ret) == 0 {
		panic("no return value specified for SetIngested")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = returnFunc(ctx, fileName, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_SetIngested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIngested'
type Store_SetIngested_Call struct {
	*mock.Call
}

// SetIngested is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
//   - ts time.Time
func (_e *Store_Expecter) SetIngested(ctx interface{}, fileName interface{}, ts interface{}) *Store_SetIngested_Call {
	return &Store_SetIngested_Call{Call: _e.mock.On("SetIngested", ctx, fileName, ts)}
}

func (_c *Store_SetIngested_Call) Run(run func(ctx context.Context, fileName string, ts time.Time)) *Store_SetIngested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Store_SetIngested_Call) Return(err error) *Store_SetIngested_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_SetIngested_Call) RunAndReturn(run func(ctx context.Context, fileName string, ts time.Time) error) *Store_SetIngested_Call {
	_c.Call.Return(run)
	return _c
}

// WasIngested provides a mock function for the type Store
func (_mock *Store) WasIngested(ctx context.Context, fileName string) (bool, error) {
	ret := _mock.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for WasIngested")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, fileName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_WasIngested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WasIngested'
type Store_WasIngested_Call struct {
	*mock.Call
}

// WasIngested is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
func (_e *Store_Expecter) WasIngested(ctx interface{}, fileName interface{}) *Store_WasIngested_Call {
	return &Store_WasIngested_Call{Call: _e.mock.On("WasIngested", ctx, fileName)}
}

func (_c *Store_WasIngested_Call) Run(run func(ctx context.Context, fileName string)) *Store_WasIngested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_WasIngested_Call) Return(b bool, err error) *Store_WasIngested_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Store_WasIngested_Call) RunAndReturn(run func(ctx context.Context, fileName string) (bool, error)) *Store_WasIngested_Call {
	_c.Call.Return(run)
	return _c
}
