// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	buildbucketpb "go.chromium.org/luci/buildbucket/proto"

	mock "github.com/stretchr/testify/mock"
)

// Buildbucket is an autogenerated mock type for the Buildbucket type
type Buildbucket struct {
	mock.Mock
}

// GetBuildFromWaterfall provides a mock function with given fields: ctx, builderName, commit
func (_m *Buildbucket) GetBuildFromWaterfall(ctx context.Context, builderName string, commit string) (*buildbucketpb.Build, error) {
	ret := _m.Called(ctx, builderName, commit)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildFromWaterfall")
	}

	var r0 *buildbucketpb.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*buildbucketpb.Build, error)); ok {
		return rf(ctx, builderName, commit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *buildbucketpb.Build); ok {
		r0 = rf(ctx, builderName, commit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildbucketpb.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, builderName, commit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildWithPatches provides a mock function with given fields: ctx, builderName, bucket, commit, patches
func (_m *Buildbucket) GetBuildWithPatches(ctx context.Context, builderName string, bucket string, commit string, patches []*buildbucketpb.GerritChange) (*buildbucketpb.Build, error) {
	ret := _m.Called(ctx, builderName, bucket, commit, patches)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildWithPatches")
	}

	var r0 *buildbucketpb.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*buildbucketpb.GerritChange) (*buildbucketpb.Build, error)); ok {
		return rf(ctx, builderName, bucket, commit, patches)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*buildbucketpb.GerritChange) *buildbucketpb.Build); ok {
		r0 = rf(ctx, builderName, bucket, commit, patches)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildbucketpb.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []*buildbucketpb.GerritChange) error); ok {
		r1 = rf(ctx, builderName, bucket, commit, patches)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuilds provides a mock function with given fields: ctx, builderName, bucket, commit, patches
func (_m *Buildbucket) GetBuilds(ctx context.Context, builderName string, bucket string, commit string, patches []*buildbucketpb.GerritChange) ([]*buildbucketpb.Build, error) {
	ret := _m.Called(ctx, builderName, bucket, commit, patches)

	if len(ret) == 0 {
		panic("no return value specified for GetBuilds")
	}

	var r0 []*buildbucketpb.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*buildbucketpb.GerritChange) ([]*buildbucketpb.Build, error)); ok {
		return rf(ctx, builderName, bucket, commit, patches)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*buildbucketpb.GerritChange) []*buildbucketpb.Build); ok {
		r0 = rf(ctx, builderName, bucket, commit, patches)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*buildbucketpb.Build)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []*buildbucketpb.GerritChange) error); ok {
		r1 = rf(ctx, builderName, bucket, commit, patches)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBuildbucket creates a new instance of Buildbucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuildbucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *Buildbucket {
	mock := &Buildbucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
