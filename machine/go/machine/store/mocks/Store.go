// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	machine "go.skia.org/infra/machine/go/machine"

	store "go.skia.org/infra/machine/go/machine/store"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, machineID
func (_m *Store) Delete(ctx context.Context, machineID string) error {
	ret := _m.Called(ctx, machineID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, machineID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - machineID string
func (_e *Store_Expecter) Delete(ctx interface{}, machineID interface{}) *Store_Delete_Call {
	return &Store_Delete_Call{Call: _e.mock.On("Delete", ctx, machineID)}
}

func (_c *Store_Delete_Call) Run(run func(ctx context.Context, machineID string)) *Store_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_Delete_Call) Return(_a0 error) *Store_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Store_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, machineID
func (_m *Store) Get(ctx context.Context, machineID string) (machine.Description, error) {
	ret := _m.Called(ctx, machineID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 machine.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (machine.Description, error)); ok {
		return rf(ctx, machineID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) machine.Description); ok {
		r0 = rf(ctx, machineID)
	} else {
		r0 = ret.Get(0).(machine.Description)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, machineID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Store_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - machineID string
func (_e *Store_Expecter) Get(ctx interface{}, machineID interface{}) *Store_Get_Call {
	return &Store_Get_Call{Call: _e.mock.On("Get", ctx, machineID)}
}

func (_c *Store_Get_Call) Run(run func(ctx context.Context, machineID string)) *Store_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_Get_Call) Return(_a0 machine.Description, _a1 error) *Store_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Get_Call) RunAndReturn(run func(context.Context, string) (machine.Description, error)) *Store_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetFreeMachines provides a mock function with given fields: ctx, pool
func (_m *Store) GetFreeMachines(ctx context.Context, pool string) ([]machine.Description, error) {
	ret := _m.Called(ctx, pool)

	if len(ret) == 0 {
		panic("no return value specified for GetFreeMachines")
	}

	var r0 []machine.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]machine.Description, error)); ok {
		return rf(ctx, pool)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []machine.Description); ok {
		r0 = rf(ctx, pool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]machine.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetFreeMachines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFreeMachines'
type Store_GetFreeMachines_Call struct {
	*mock.Call
}

// GetFreeMachines is a helper method to define mock.On call
//   - ctx context.Context
//   - pool string
func (_e *Store_Expecter) GetFreeMachines(ctx interface{}, pool interface{}) *Store_GetFreeMachines_Call {
	return &Store_GetFreeMachines_Call{Call: _e.mock.On("GetFreeMachines", ctx, pool)}
}

func (_c *Store_GetFreeMachines_Call) Run(run func(ctx context.Context, pool string)) *Store_GetFreeMachines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetFreeMachines_Call) Return(_a0 []machine.Description, _a1 error) *Store_GetFreeMachines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetFreeMachines_Call) RunAndReturn(run func(context.Context, string) ([]machine.Description, error)) *Store_GetFreeMachines_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *Store) List(ctx context.Context) ([]machine.Description, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []machine.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]machine.Description, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []machine.Description); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]machine.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Store_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) List(ctx interface{}) *Store_List_Call {
	return &Store_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *Store_List_Call) Run(run func(ctx context.Context)) *Store_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Store_List_Call) Return(_a0 []machine.Description, _a1 error) *Store_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_List_Call) RunAndReturn(run func(context.Context) ([]machine.Description, error)) *Store_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListPowerCycle provides a mock function with given fields: ctx
func (_m *Store) ListPowerCycle(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPowerCycle")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListPowerCycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPowerCycle'
type Store_ListPowerCycle_Call struct {
	*mock.Call
}

// ListPowerCycle is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) ListPowerCycle(ctx interface{}) *Store_ListPowerCycle_Call {
	return &Store_ListPowerCycle_Call{Call: _e.mock.On("ListPowerCycle", ctx)}
}

func (_c *Store_ListPowerCycle_Call) Run(run func(ctx context.Context)) *Store_ListPowerCycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Store_ListPowerCycle_Call) Return(_a0 []string, _a1 error) *Store_ListPowerCycle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListPowerCycle_Call) RunAndReturn(run func(context.Context) ([]string, error)) *Store_ListPowerCycle_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, machineID, updateCallback
func (_m *Store) Update(ctx context.Context, machineID string, updateCallback store.UpdateCallback) error {
	ret := _m.Called(ctx, machineID, updateCallback)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, store.UpdateCallback) error); ok {
		r0 = rf(ctx, machineID, updateCallback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Store_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - machineID string
//   - updateCallback store.UpdateCallback
func (_e *Store_Expecter) Update(ctx interface{}, machineID interface{}, updateCallback interface{}) *Store_Update_Call {
	return &Store_Update_Call{Call: _e.mock.On("Update", ctx, machineID, updateCallback)}
}

func (_c *Store_Update_Call) Run(run func(ctx context.Context, machineID string, updateCallback store.UpdateCallback)) *Store_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(store.UpdateCallback))
	})
	return _c
}

func (_c *Store_Update_Call) Return(_a0 error) *Store_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Update_Call) RunAndReturn(run func(context.Context, string, store.UpdateCallback) error) *Store_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
