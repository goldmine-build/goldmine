// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	vfs "go.skia.org/infra/go/vfs"
)

// Aggregator is an autogenerated mock type for the Aggregator type
type Aggregator struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, fs, currentMilestone, aggregateFilePath, relnotesDir
func (_m *Aggregator) Aggregate(ctx context.Context, fs vfs.FS, currentMilestone int, aggregateFilePath string, relnotesDir string) ([]byte, error) {
	ret := _m.Called(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, vfs.FS, int, string, string) []byte); ok {
		r0 = rf(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, vfs.FS, int, string, string) error); ok {
		r1 = rf(ctx, fs, currentMilestone, aggregateFilePath, relnotesDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNoteFiles provides a mock function with given fields: ctx, fs, notesDir
func (_m *Aggregator) ListNoteFiles(ctx context.Context, fs vfs.FS, notesDir string) ([]string, error) {
	ret := _m.Called(ctx, fs, notesDir)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, vfs.FS, string) []string); ok {
		r0 = rf(ctx, fs, notesDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, vfs.FS, string) error); ok {
		r1 = rf(ctx, fs, notesDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAggregator creates a new instance of Aggregator. It also registers a cleanup function to assert the mocks expectations.
func NewAggregator(t testing.TB) *Aggregator {
	mock := &Aggregator{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
