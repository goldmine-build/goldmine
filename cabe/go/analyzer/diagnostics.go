package analyzer

import (
	"go.chromium.org/luci/common/api/swarming/swarming/v1"
)

// SwarmingTaskDiagnostics contains task-specific diagnostic messages generated by the Analyzer.
type SwarmingTaskDiagnostics struct {
	TaskID  string
	Message []string `json:",omitempty"`
}

// ReplicaDiagnostics contains replica, or task pair-specific diagnostic messages generated by the Analyzer.
type ReplicaDiagnostics struct {
	Number          int
	ControlTaskID   string
	TreatmentTaskID string
	Message         []string `json:",omitempty"`
}

// Diagnostics contains diagnostic messages about the replica task pairs and individual tasks generated
// by the Analyzer.
type Diagnostics struct {
	// Bad news: things that had to be excluded from the analysis, and why.
	ExcludedSwarmingTasks map[string]*SwarmingTaskDiagnostics `json:",omitempty"`
	ExcludedReplicas      map[int]*ReplicaDiagnostics         `json:",omitempty"`

	// Good news: things that were included in the analysis.
	IncludedSwarmingTasks map[string]*SwarmingTaskDiagnostics `json:",omitempty"`
	IncludedReplicas      map[int]*ReplicaDiagnostics         `json:",omitempty"`
}

func newDiagnostics() *Diagnostics {
	return &Diagnostics{
		ExcludedSwarmingTasks: map[string]*SwarmingTaskDiagnostics{},
		ExcludedReplicas:      map[int]*ReplicaDiagnostics{},
		IncludedSwarmingTasks: map[string]*SwarmingTaskDiagnostics{},
		IncludedReplicas:      map[int]*ReplicaDiagnostics{},
	}
}

func (d *Diagnostics) excludeSwarmingTask(taskInfo *swarming.SwarmingRpcsTaskRequestMetadata, msg string) {
	taskDiag := d.ExcludedSwarmingTasks[taskInfo.TaskId]
	if taskDiag == nil {
		taskDiag = &SwarmingTaskDiagnostics{
			TaskID:  taskInfo.TaskId,
			Message: []string{},
		}
		d.ExcludedSwarmingTasks[taskInfo.TaskId] = taskDiag
	}
	taskDiag.Message = append(taskDiag.Message, msg)
}

func (d *Diagnostics) includeSwarmingTask(taskInfo *swarming.SwarmingRpcsTaskRequestMetadata) {
	d.IncludedSwarmingTasks[taskInfo.TaskId] = &SwarmingTaskDiagnostics{
		TaskID: taskInfo.TaskId,
	}
}

func (d *Diagnostics) excludeReplica(replicaNumber int, pair pairedTasks, msg string) {
	replicaDiag := d.ExcludedReplicas[replicaNumber]
	if replicaDiag == nil {
		replicaDiag = &ReplicaDiagnostics{
			Number:          replicaNumber,
			ControlTaskID:   pair.control.taskID,
			TreatmentTaskID: pair.treatment.taskID,
			Message:         []string{},
		}
	}
	replicaDiag.Message = append(replicaDiag.Message, msg)
}

func (d *Diagnostics) includeReplica(replicaNumber int, pair pairedTasks) {
	d.IncludedReplicas[replicaNumber] = &ReplicaDiagnostics{
		Number:          replicaNumber,
		ControlTaskID:   pair.control.taskID,
		TreatmentTaskID: pair.treatment.taskID,
	}
}
