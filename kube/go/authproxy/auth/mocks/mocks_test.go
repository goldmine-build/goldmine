// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

type Auth_Expecter struct {
	mock *mock.Mock
}

func (_m *Auth) EXPECT() *Auth_Expecter {
	return &Auth_Expecter{mock: &_m.Mock}
}

// Init provides a mock function for the type Auth
func (_mock *Auth) Init(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Auth_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Auth_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Auth_Expecter) Init(ctx interface{}) *Auth_Init_Call {
	return &Auth_Init_Call{Call: _e.mock.On("Init", ctx)}
}

func (_c *Auth_Init_Call) Run(run func(ctx context.Context)) *Auth_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Auth_Init_Call) Return(err error) *Auth_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Auth_Init_Call) RunAndReturn(run func(ctx context.Context) error) *Auth_Init_Call {
	_c.Call.Return(run)
	return _c
}

// LoggedInAs provides a mock function for the type Auth
func (_mock *Auth) LoggedInAs(r *http.Request) (string, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for LoggedInAs")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (string, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Auth_LoggedInAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoggedInAs'
type Auth_LoggedInAs_Call struct {
	*mock.Call
}

// LoggedInAs is a helper method to define mock.On call
//   - r *http.Request
func (_e *Auth_Expecter) LoggedInAs(r interface{}) *Auth_LoggedInAs_Call {
	return &Auth_LoggedInAs_Call{Call: _e.mock.On("LoggedInAs", r)}
}

func (_c *Auth_LoggedInAs_Call) Run(run func(r *http.Request)) *Auth_LoggedInAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Auth_LoggedInAs_Call) Return(s string, err error) *Auth_LoggedInAs_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Auth_LoggedInAs_Call) RunAndReturn(run func(r *http.Request) (string, error)) *Auth_LoggedInAs_Call {
	_c.Call.Return(run)
	return _c
}

// LoginURL provides a mock function for the type Auth
func (_mock *Auth) LoginURL(w http.ResponseWriter, r *http.Request) string {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for LoginURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) string); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Auth_LoginURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginURL'
type Auth_LoginURL_Call struct {
	*mock.Call
}

// LoginURL is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *Auth_Expecter) LoginURL(w interface{}, r interface{}) *Auth_LoginURL_Call {
	return &Auth_LoginURL_Call{Call: _e.mock.On("LoginURL", w, r)}
}

func (_c *Auth_LoginURL_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *Auth_LoginURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Auth_LoginURL_Call) Return(s string) *Auth_LoginURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Auth_LoginURL_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) string) *Auth_LoginURL_Call {
	_c.Call.Return(run)
	return _c
}
