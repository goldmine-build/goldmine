load("//infra-sk:index.bzl", "copy_file_from_npm_pkg", "nodejs_test", "ts_library")

nodejs_test(
    name = "util_nodejs_test",
    src = "util_nodejs_test.ts",
    deps = [
        ":util_ts_lib",
        "//npm_deps:@types/chai",
        "//npm_deps:@types/express",
        "//npm_deps:chai",
        "//npm_deps:express",
        "//npm_deps:puppeteer",
    ],
)

ts_library(
    name = "util_ts_lib",
    srcs = ["util.ts"],
    data = select({
        # Provides Google Chrome, libraries and fonts.
        "@platforms//os:linux": [
            ":chrome",
            "//:.puppeteerrc.js",
            "@google_chrome//:all_files",
        ],
        # We don't have hermetic support for Mac and Windows. Users are expected
        # to have a working chrome installation already.
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = ["//npm_deps:puppeteer"],
)

# Under rules_js (https://github.com/aspect-build/rules_js), we cannot refer to files inside NPM
# packages directly. Instead, we must create local copies of those files. See the
# copy_file_from_npm_pkg macro documentation for details.
#
# This target can be built to ensure that the "puppeteer" NPM package is downloaded by Bazel.
copy_file_from_npm_pkg(
    name = "puppeteer_readme_md",
    src = "README.md",
    out = "README.Puppeteer.md",
    npm_package_name = "puppeteer",
)

# This is where we configured Puppeteer to download the cached version of Chrome.
filegroup(
    name = "chrome",
    # Add a dependency to Puppeteer so Bazel globs the chrome_cache *after* NPM installation
    # completes. The specific file we pull from the "puppeteer" NPM package does not matter.
    data = [":puppeteer_readme_md"] + glob(
        [
            "chrome_cache/chrome/**",
        ],
        allow_empty = False,
    ),
    visibility = ["//visibility:public"],
)
