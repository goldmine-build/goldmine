// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.goldmine.build/docsyserver/go/codereview"
)

// NewCodeReview creates a new instance of CodeReview. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCodeReview(t interface {
	mock.TestingT
	Cleanup(func())
}) *CodeReview {
	mock := &CodeReview{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CodeReview is an autogenerated mock type for the CodeReview type
type CodeReview struct {
	mock.Mock
}

type CodeReview_Expecter struct {
	mock *mock.Mock
}

func (_m *CodeReview) EXPECT() *CodeReview_Expecter {
	return &CodeReview_Expecter{mock: &_m.Mock}
}

// GetFile provides a mock function for the type CodeReview
func (_mock *CodeReview) GetFile(ctx context.Context, filename string, ref string) ([]byte, error) {
	ret := _mock.Called(ctx, filename, ref)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return returnFunc(ctx, filename, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = returnFunc(ctx, filename, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, filename, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CodeReview_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type CodeReview_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
//   - ref string
func (_e *CodeReview_Expecter) GetFile(ctx interface{}, filename interface{}, ref interface{}) *CodeReview_GetFile_Call {
	return &CodeReview_GetFile_Call{Call: _e.mock.On("GetFile", ctx, filename, ref)}
}

func (_c *CodeReview_GetFile_Call) Run(run func(ctx context.Context, filename string, ref string)) *CodeReview_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CodeReview_GetFile_Call) Return(bytes []byte, err error) *CodeReview_GetFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *CodeReview_GetFile_Call) RunAndReturn(run func(ctx context.Context, filename string, ref string) ([]byte, error)) *CodeReview_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatchsetInfo provides a mock function for the type CodeReview
func (_mock *CodeReview) GetPatchsetInfo(ctx context.Context, issue codereview.Issue) (string, bool, error) {
	ret := _mock.Called(ctx, issue)

	if len(ret) == 0 {
		panic("no return value specified for GetPatchsetInfo")
	}

	var r0 string
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, codereview.Issue) (string, bool, error)); ok {
		return returnFunc(ctx, issue)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, codereview.Issue) string); ok {
		r0 = returnFunc(ctx, issue)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, codereview.Issue) bool); ok {
		r1 = returnFunc(ctx, issue)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, codereview.Issue) error); ok {
		r2 = returnFunc(ctx, issue)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// CodeReview_GetPatchsetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatchsetInfo'
type CodeReview_GetPatchsetInfo_Call struct {
	*mock.Call
}

// GetPatchsetInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - issue codereview.Issue
func (_e *CodeReview_Expecter) GetPatchsetInfo(ctx interface{}, issue interface{}) *CodeReview_GetPatchsetInfo_Call {
	return &CodeReview_GetPatchsetInfo_Call{Call: _e.mock.On("GetPatchsetInfo", ctx, issue)}
}

func (_c *CodeReview_GetPatchsetInfo_Call) Run(run func(ctx context.Context, issue codereview.Issue)) *CodeReview_GetPatchsetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 codereview.Issue
		if args[1] != nil {
			arg1 = args[1].(codereview.Issue)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CodeReview_GetPatchsetInfo_Call) Return(s string, b bool, err error) *CodeReview_GetPatchsetInfo_Call {
	_c.Call.Return(s, b, err)
	return _c
}

func (_c *CodeReview_GetPatchsetInfo_Call) RunAndReturn(run func(ctx context.Context, issue codereview.Issue) (string, bool, error)) *CodeReview_GetPatchsetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListModifiedFiles provides a mock function for the type CodeReview
func (_mock *CodeReview) ListModifiedFiles(ctx context.Context, issue codereview.Issue, ref string) ([]codereview.ListModifiedFilesResult, error) {
	ret := _mock.Called(ctx, issue, ref)

	if len(ret) == 0 {
		panic("no return value specified for ListModifiedFiles")
	}

	var r0 []codereview.ListModifiedFilesResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, codereview.Issue, string) ([]codereview.ListModifiedFilesResult, error)); ok {
		return returnFunc(ctx, issue, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, codereview.Issue, string) []codereview.ListModifiedFilesResult); ok {
		r0 = returnFunc(ctx, issue, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]codereview.ListModifiedFilesResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, codereview.Issue, string) error); ok {
		r1 = returnFunc(ctx, issue, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CodeReview_ListModifiedFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModifiedFiles'
type CodeReview_ListModifiedFiles_Call struct {
	*mock.Call
}

// ListModifiedFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - issue codereview.Issue
//   - ref string
func (_e *CodeReview_Expecter) ListModifiedFiles(ctx interface{}, issue interface{}, ref interface{}) *CodeReview_ListModifiedFiles_Call {
	return &CodeReview_ListModifiedFiles_Call{Call: _e.mock.On("ListModifiedFiles", ctx, issue, ref)}
}

func (_c *CodeReview_ListModifiedFiles_Call) Run(run func(ctx context.Context, issue codereview.Issue, ref string)) *CodeReview_ListModifiedFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 codereview.Issue
		if args[1] != nil {
			arg1 = args[1].(codereview.Issue)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CodeReview_ListModifiedFiles_Call) Return(listModifiedFilesResults []codereview.ListModifiedFilesResult, err error) *CodeReview_ListModifiedFiles_Call {
	_c.Call.Return(listModifiedFilesResults, err)
	return _c
}

func (_c *CodeReview_ListModifiedFiles_Call) RunAndReturn(run func(ctx context.Context, issue codereview.Issue, ref string) ([]codereview.ListModifiedFilesResult, error)) *CodeReview_ListModifiedFiles_Call {
	_c.Call.Return(run)
	return _c
}
