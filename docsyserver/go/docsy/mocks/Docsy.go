// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Docsy is an autogenerated mock type for the Docsy type
type Docsy struct {
	mock.Mock
}

type Docsy_Expecter struct {
	mock *mock.Mock
}

func (_m *Docsy) EXPECT() *Docsy_Expecter {
	return &Docsy_Expecter{mock: &_m.Mock}
}

// Render provides a mock function with given fields: ctx, src, dst
func (_m *Docsy) Render(ctx context.Context, src string, dst string) error {
	ret := _m.Called(ctx, src, dst)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, src, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Docsy_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Docsy_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - ctx context.Context
//   - src string
//   - dst string
func (_e *Docsy_Expecter) Render(ctx interface{}, src interface{}, dst interface{}) *Docsy_Render_Call {
	return &Docsy_Render_Call{Call: _e.mock.On("Render", ctx, src, dst)}
}

func (_c *Docsy_Render_Call) Run(run func(ctx context.Context, src string, dst string)) *Docsy_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Docsy_Render_Call) Return(_a0 error) *Docsy_Render_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Docsy_Render_Call) RunAndReturn(run func(context.Context, string, string) error) *Docsy_Render_Call {
	_c.Call.Return(run)
	return _c
}

// NewDocsy creates a new instance of Docsy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocsy(t interface {
	mock.TestingT
	Cleanup(func())
}) *Docsy {
	mock := &Docsy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
