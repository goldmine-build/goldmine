---
# Use bcdedit to move the PXE boot IP4 entry to first. Windows automatically moves its boot entry to
# first after imaging, so this is necessary in order to reimage automatically.
- hosts: all
  vars:
    backup_filename: C:\Users\chrome-bot\Documents\BCD-Backup
  tasks:
  - name: Backup BCD store
    win_command: bcdedit /export {{ backup_filename }}
    args:
      creates: "{{ backup_filename }}"
  - name: List BCD firmware entries
    win_command: bcdedit /enum FIRMWARE
    register: bcd_firmware_out
  # Create a new variable with carriage return (\r) removed; otherwise, the Linux-based regex_search
  # below has trouble with multiline matching.
  - set_fact:
      bcd_firmware_out_no_cr: "{{ bcd_firmware_out.stdout | regex_replace('\\r\\n', '\\n') }}"
  # In the two machines that I've tested with, the block in the output for IP4 looks something like:
  # Firmware Application (101fffff)
  # -------------------------------
  # identifier              {abcdef01-abcd-abcd-abcd-abcdef0123456}
  # description             UEFI: IP4 Realtek PCIe GBE Family Controller
  #
  # This regex may need to be expanded for BIOSes that are more creative in their naming.
  - set_fact:
      bcd_ip4_block: "{{ bcd_firmware_out_no_cr |
        regex_search('(?m)^-+\\nidentifier\\s+\\{[-0-9a-f]+\\}\\ndescription\\s+[^\\{\\}]*IP4') }}"
  # Someone with better Jinja skills could probably do this with capturing groups, but AFAICT,
  # regex_search always returns the entire matching string, so capturing groups don't really work.
  - set_fact:
      bcd_ip4_id: "{{ bcd_ip4_block | regex_search('\\{[-0-9a-f]+\\}') }}"
  - debug:
      msg: "The ID of the IPv4 BCD entry is: {{bcd_ip4_id}}"
  - name: Set IP4 BCD entry first
    # 'bcdedit /? set' says regarding "/addfirst", "If the specified identifier is already in the
    # list, it will be moved to the top of the list."
    win_command: bcdedit /set "{fwbootmgr}" displayorder "{{ bcd_ip4_id }}" /addfirst
