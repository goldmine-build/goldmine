// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/scrap/go/scrap"
)

// NewScrapExchange creates a new instance of ScrapExchange. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapExchange(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScrapExchange {
	mock := &ScrapExchange{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ScrapExchange is an autogenerated mock type for the ScrapExchange type
type ScrapExchange struct {
	mock.Mock
}

type ScrapExchange_Expecter struct {
	mock *mock.Mock
}

func (_m *ScrapExchange) EXPECT() *ScrapExchange_Expecter {
	return &ScrapExchange_Expecter{mock: &_m.Mock}
}

// CreateScrap provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) CreateScrap(ctx context.Context, scrap1 scrap.ScrapBody) (scrap.ScrapID, error) {
	ret := _mock.Called(ctx, scrap1)

	if len(ret) == 0 {
		panic("no return value specified for CreateScrap")
	}

	var r0 scrap.ScrapID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.ScrapBody) (scrap.ScrapID, error)); ok {
		return returnFunc(ctx, scrap1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.ScrapBody) scrap.ScrapID); ok {
		r0 = returnFunc(ctx, scrap1)
	} else {
		r0 = ret.Get(0).(scrap.ScrapID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, scrap.ScrapBody) error); ok {
		r1 = returnFunc(ctx, scrap1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ScrapExchange_CreateScrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScrap'
type ScrapExchange_CreateScrap_Call struct {
	*mock.Call
}

// CreateScrap is a helper method to define mock.On call
//   - ctx context.Context
//   - scrap1 scrap.ScrapBody
func (_e *ScrapExchange_Expecter) CreateScrap(ctx interface{}, scrap1 interface{}) *ScrapExchange_CreateScrap_Call {
	return &ScrapExchange_CreateScrap_Call{Call: _e.mock.On("CreateScrap", ctx, scrap1)}
}

func (_c *ScrapExchange_CreateScrap_Call) Run(run func(ctx context.Context, scrap1 scrap.ScrapBody)) *ScrapExchange_CreateScrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.ScrapBody
		if args[1] != nil {
			arg1 = args[1].(scrap.ScrapBody)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ScrapExchange_CreateScrap_Call) Return(scrapID scrap.ScrapID, err error) *ScrapExchange_CreateScrap_Call {
	_c.Call.Return(scrapID, err)
	return _c
}

func (_c *ScrapExchange_CreateScrap_Call) RunAndReturn(run func(ctx context.Context, scrap1 scrap.ScrapBody) (scrap.ScrapID, error)) *ScrapExchange_CreateScrap_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteName provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) DeleteName(ctx context.Context, t scrap.Type, name string) error {
	ret := _mock.Called(ctx, t, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string) error); ok {
		r0 = returnFunc(ctx, t, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ScrapExchange_DeleteName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteName'
type ScrapExchange_DeleteName_Call struct {
	*mock.Call
}

// DeleteName is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
//   - name string
func (_e *ScrapExchange_Expecter) DeleteName(ctx interface{}, t interface{}, name interface{}) *ScrapExchange_DeleteName_Call {
	return &ScrapExchange_DeleteName_Call{Call: _e.mock.On("DeleteName", ctx, t, name)}
}

func (_c *ScrapExchange_DeleteName_Call) Run(run func(ctx context.Context, t scrap.Type, name string)) *ScrapExchange_DeleteName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ScrapExchange_DeleteName_Call) Return(err error) *ScrapExchange_DeleteName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ScrapExchange_DeleteName_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type, name string) error) *ScrapExchange_DeleteName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScrap provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) DeleteScrap(ctx context.Context, t scrap.Type, hashOrName string) error {
	ret := _mock.Called(ctx, t, hashOrName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScrap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string) error); ok {
		r0 = returnFunc(ctx, t, hashOrName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ScrapExchange_DeleteScrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrap'
type ScrapExchange_DeleteScrap_Call struct {
	*mock.Call
}

// DeleteScrap is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
//   - hashOrName string
func (_e *ScrapExchange_Expecter) DeleteScrap(ctx interface{}, t interface{}, hashOrName interface{}) *ScrapExchange_DeleteScrap_Call {
	return &ScrapExchange_DeleteScrap_Call{Call: _e.mock.On("DeleteScrap", ctx, t, hashOrName)}
}

func (_c *ScrapExchange_DeleteScrap_Call) Run(run func(ctx context.Context, t scrap.Type, hashOrName string)) *ScrapExchange_DeleteScrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ScrapExchange_DeleteScrap_Call) Return(err error) *ScrapExchange_DeleteScrap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ScrapExchange_DeleteScrap_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type, hashOrName string) error) *ScrapExchange_DeleteScrap_Call {
	_c.Call.Return(run)
	return _c
}

// Expand provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) Expand(ctx context.Context, t scrap.Type, hashOrName string, lang scrap.Lang, w io.Writer) error {
	ret := _mock.Called(ctx, t, hashOrName, lang, w)

	if len(ret) == 0 {
		panic("no return value specified for Expand")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string, scrap.Lang, io.Writer) error); ok {
		r0 = returnFunc(ctx, t, hashOrName, lang, w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ScrapExchange_Expand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expand'
type ScrapExchange_Expand_Call struct {
	*mock.Call
}

// Expand is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
//   - hashOrName string
//   - lang scrap.Lang
//   - w io.Writer
func (_e *ScrapExchange_Expecter) Expand(ctx interface{}, t interface{}, hashOrName interface{}, lang interface{}, w interface{}) *ScrapExchange_Expand_Call {
	return &ScrapExchange_Expand_Call{Call: _e.mock.On("Expand", ctx, t, hashOrName, lang, w)}
}

func (_c *ScrapExchange_Expand_Call) Run(run func(ctx context.Context, t scrap.Type, hashOrName string, lang scrap.Lang, w io.Writer)) *ScrapExchange_Expand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 scrap.Lang
		if args[3] != nil {
			arg3 = args[3].(scrap.Lang)
		}
		var arg4 io.Writer
		if args[4] != nil {
			arg4 = args[4].(io.Writer)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *ScrapExchange_Expand_Call) Return(err error) *ScrapExchange_Expand_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ScrapExchange_Expand_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type, hashOrName string, lang scrap.Lang, w io.Writer) error) *ScrapExchange_Expand_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) GetName(ctx context.Context, t scrap.Type, name string) (scrap.Name, error) {
	ret := _mock.Called(ctx, t, name)

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 scrap.Name
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string) (scrap.Name, error)); ok {
		return returnFunc(ctx, t, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string) scrap.Name); ok {
		r0 = returnFunc(ctx, t, name)
	} else {
		r0 = ret.Get(0).(scrap.Name)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, scrap.Type, string) error); ok {
		r1 = returnFunc(ctx, t, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ScrapExchange_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ScrapExchange_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
//   - name string
func (_e *ScrapExchange_Expecter) GetName(ctx interface{}, t interface{}, name interface{}) *ScrapExchange_GetName_Call {
	return &ScrapExchange_GetName_Call{Call: _e.mock.On("GetName", ctx, t, name)}
}

func (_c *ScrapExchange_GetName_Call) Run(run func(ctx context.Context, t scrap.Type, name string)) *ScrapExchange_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ScrapExchange_GetName_Call) Return(name1 scrap.Name, err error) *ScrapExchange_GetName_Call {
	_c.Call.Return(name1, err)
	return _c
}

func (_c *ScrapExchange_GetName_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type, name string) (scrap.Name, error)) *ScrapExchange_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// ListNames provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) ListNames(ctx context.Context, t scrap.Type) ([]string, error) {
	ret := _mock.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for ListNames")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type) ([]string, error)); ok {
		return returnFunc(ctx, t)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type) []string); ok {
		r0 = returnFunc(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, scrap.Type) error); ok {
		r1 = returnFunc(ctx, t)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ScrapExchange_ListNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNames'
type ScrapExchange_ListNames_Call struct {
	*mock.Call
}

// ListNames is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
func (_e *ScrapExchange_Expecter) ListNames(ctx interface{}, t interface{}) *ScrapExchange_ListNames_Call {
	return &ScrapExchange_ListNames_Call{Call: _e.mock.On("ListNames", ctx, t)}
}

func (_c *ScrapExchange_ListNames_Call) Run(run func(ctx context.Context, t scrap.Type)) *ScrapExchange_ListNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ScrapExchange_ListNames_Call) Return(strings []string, err error) *ScrapExchange_ListNames_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *ScrapExchange_ListNames_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type) ([]string, error)) *ScrapExchange_ListNames_Call {
	_c.Call.Return(run)
	return _c
}

// LoadScrap provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) LoadScrap(ctx context.Context, t scrap.Type, hashOrName string) (scrap.ScrapBody, error) {
	ret := _mock.Called(ctx, t, hashOrName)

	if len(ret) == 0 {
		panic("no return value specified for LoadScrap")
	}

	var r0 scrap.ScrapBody
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string) (scrap.ScrapBody, error)); ok {
		return returnFunc(ctx, t, hashOrName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string) scrap.ScrapBody); ok {
		r0 = returnFunc(ctx, t, hashOrName)
	} else {
		r0 = ret.Get(0).(scrap.ScrapBody)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, scrap.Type, string) error); ok {
		r1 = returnFunc(ctx, t, hashOrName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ScrapExchange_LoadScrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadScrap'
type ScrapExchange_LoadScrap_Call struct {
	*mock.Call
}

// LoadScrap is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
//   - hashOrName string
func (_e *ScrapExchange_Expecter) LoadScrap(ctx interface{}, t interface{}, hashOrName interface{}) *ScrapExchange_LoadScrap_Call {
	return &ScrapExchange_LoadScrap_Call{Call: _e.mock.On("LoadScrap", ctx, t, hashOrName)}
}

func (_c *ScrapExchange_LoadScrap_Call) Run(run func(ctx context.Context, t scrap.Type, hashOrName string)) *ScrapExchange_LoadScrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ScrapExchange_LoadScrap_Call) Return(scrapBody scrap.ScrapBody, err error) *ScrapExchange_LoadScrap_Call {
	_c.Call.Return(scrapBody, err)
	return _c
}

func (_c *ScrapExchange_LoadScrap_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type, hashOrName string) (scrap.ScrapBody, error)) *ScrapExchange_LoadScrap_Call {
	_c.Call.Return(run)
	return _c
}

// PutName provides a mock function for the type ScrapExchange
func (_mock *ScrapExchange) PutName(ctx context.Context, t scrap.Type, name string, nameBody scrap.Name) error {
	ret := _mock.Called(ctx, t, name, nameBody)

	if len(ret) == 0 {
		panic("no return value specified for PutName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, scrap.Type, string, scrap.Name) error); ok {
		r0 = returnFunc(ctx, t, name, nameBody)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ScrapExchange_PutName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutName'
type ScrapExchange_PutName_Call struct {
	*mock.Call
}

// PutName is a helper method to define mock.On call
//   - ctx context.Context
//   - t scrap.Type
//   - name string
//   - nameBody scrap.Name
func (_e *ScrapExchange_Expecter) PutName(ctx interface{}, t interface{}, name interface{}, nameBody interface{}) *ScrapExchange_PutName_Call {
	return &ScrapExchange_PutName_Call{Call: _e.mock.On("PutName", ctx, t, name, nameBody)}
}

func (_c *ScrapExchange_PutName_Call) Run(run func(ctx context.Context, t scrap.Type, name string, nameBody scrap.Name)) *ScrapExchange_PutName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 scrap.Type
		if args[1] != nil {
			arg1 = args[1].(scrap.Type)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 scrap.Name
		if args[3] != nil {
			arg3 = args[3].(scrap.Name)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *ScrapExchange_PutName_Call) Return(err error) *ScrapExchange_PutName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ScrapExchange_PutName_Call) RunAndReturn(run func(ctx context.Context, t scrap.Type, name string, nameBody scrap.Name) error) *ScrapExchange_PutName_Call {
	_c.Call.Return(run)
	return _c
}
