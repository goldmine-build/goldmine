// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

type Server_Expecter struct {
	mock *mock.Mock
}

func (_m *Server) EXPECT() *Server_Expecter {
	return &Server_Expecter{mock: &_m.Mock}
}

// ClientConnectionHandler provides a mock function with given fields: ctx
func (_m *Server) ClientConnectionHandler(ctx context.Context) http.HandlerFunc {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientConnectionHandler")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(context.Context) http.HandlerFunc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// Server_ClientConnectionHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientConnectionHandler'
type Server_ClientConnectionHandler_Call struct {
	*mock.Call
}

// ClientConnectionHandler is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Server_Expecter) ClientConnectionHandler(ctx interface{}) *Server_ClientConnectionHandler_Call {
	return &Server_ClientConnectionHandler_Call{Call: _e.mock.On("ClientConnectionHandler", ctx)}
}

func (_c *Server_ClientConnectionHandler_Call) Run(run func(ctx context.Context)) *Server_ClientConnectionHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Server_ClientConnectionHandler_Call) Return(_a0 http.HandlerFunc) *Server_ClientConnectionHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_ClientConnectionHandler_Call) RunAndReturn(run func(context.Context) http.HandlerFunc) *Server_ClientConnectionHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, stream, msg
func (_m *Server) Send(ctx context.Context, stream string, msg string) error {
	ret := _m.Called(ctx, stream, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, stream, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Server_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - msg string
func (_e *Server_Expecter) Send(ctx interface{}, stream interface{}, msg interface{}) *Server_Send_Call {
	return &Server_Send_Call{Call: _e.mock.On("Send", ctx, stream, msg)}
}

func (_c *Server_Send_Call) Run(run func(ctx context.Context, stream string, msg string)) *Server_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Server_Send_Call) Return(_a0 error) *Server_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Send_Call) RunAndReturn(run func(context.Context, string, string) error) *Server_Send_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *Server) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Server_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Server_Expecter) Start(ctx interface{}) *Server_Start_Call {
	return &Server_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *Server_Start_Call) Run(run func(ctx context.Context)) *Server_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Server_Start_Call) Return(_a0 error) *Server_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Server_Start_Call) RunAndReturn(run func(context.Context) error) *Server_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
