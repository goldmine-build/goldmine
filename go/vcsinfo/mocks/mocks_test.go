// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/go/vcsinfo"
)

// NewVCS creates a new instance of VCS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVCS(t interface {
	mock.TestingT
	Cleanup(func())
}) *VCS {
	mock := &VCS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VCS is an autogenerated mock type for the VCS type
type VCS struct {
	mock.Mock
}

type VCS_Expecter struct {
	mock *mock.Mock
}

func (_m *VCS) EXPECT() *VCS_Expecter {
	return &VCS_Expecter{mock: &_m.Mock}
}

// ByIndex provides a mock function for the type VCS
func (_mock *VCS) ByIndex(ctx context.Context, N int) (*vcsinfo.LongCommit, error) {
	ret := _mock.Called(ctx, N)

	if len(ret) == 0 {
		panic("no return value specified for ByIndex")
	}

	var r0 *vcsinfo.LongCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*vcsinfo.LongCommit, error)); ok {
		return returnFunc(ctx, N)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *vcsinfo.LongCommit); ok {
		r0 = returnFunc(ctx, N)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vcsinfo.LongCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, N)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VCS_ByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByIndex'
type VCS_ByIndex_Call struct {
	*mock.Call
}

// ByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - N int
func (_e *VCS_Expecter) ByIndex(ctx interface{}, N interface{}) *VCS_ByIndex_Call {
	return &VCS_ByIndex_Call{Call: _e.mock.On("ByIndex", ctx, N)}
}

func (_c *VCS_ByIndex_Call) Run(run func(ctx context.Context, N int)) *VCS_ByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VCS_ByIndex_Call) Return(longCommit *vcsinfo.LongCommit, err error) *VCS_ByIndex_Call {
	_c.Call.Return(longCommit, err)
	return _c
}

func (_c *VCS_ByIndex_Call) RunAndReturn(run func(ctx context.Context, N int) (*vcsinfo.LongCommit, error)) *VCS_ByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Details provides a mock function for the type VCS
func (_mock *VCS) Details(ctx context.Context, hash string, includeBranchInfo bool) (*vcsinfo.LongCommit, error) {
	ret := _mock.Called(ctx, hash, includeBranchInfo)

	if len(ret) == 0 {
		panic("no return value specified for Details")
	}

	var r0 *vcsinfo.LongCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (*vcsinfo.LongCommit, error)); ok {
		return returnFunc(ctx, hash, includeBranchInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) *vcsinfo.LongCommit); ok {
		r0 = returnFunc(ctx, hash, includeBranchInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vcsinfo.LongCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, hash, includeBranchInfo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VCS_Details_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Details'
type VCS_Details_Call struct {
	*mock.Call
}

// Details is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
//   - includeBranchInfo bool
func (_e *VCS_Expecter) Details(ctx interface{}, hash interface{}, includeBranchInfo interface{}) *VCS_Details_Call {
	return &VCS_Details_Call{Call: _e.mock.On("Details", ctx, hash, includeBranchInfo)}
}

func (_c *VCS_Details_Call) Run(run func(ctx context.Context, hash string, includeBranchInfo bool)) *VCS_Details_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VCS_Details_Call) Return(longCommit *vcsinfo.LongCommit, err error) *VCS_Details_Call {
	_c.Call.Return(longCommit, err)
	return _c
}

func (_c *VCS_Details_Call) RunAndReturn(run func(ctx context.Context, hash string, includeBranchInfo bool) (*vcsinfo.LongCommit, error)) *VCS_Details_Call {
	_c.Call.Return(run)
	return _c
}

// DetailsMulti provides a mock function for the type VCS
func (_mock *VCS) DetailsMulti(ctx context.Context, hashes []string, includeBranchInfo bool) ([]*vcsinfo.LongCommit, error) {
	ret := _mock.Called(ctx, hashes, includeBranchInfo)

	if len(ret) == 0 {
		panic("no return value specified for DetailsMulti")
	}

	var r0 []*vcsinfo.LongCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, bool) ([]*vcsinfo.LongCommit, error)); ok {
		return returnFunc(ctx, hashes, includeBranchInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, bool) []*vcsinfo.LongCommit); ok {
		r0 = returnFunc(ctx, hashes, includeBranchInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.LongCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, bool) error); ok {
		r1 = returnFunc(ctx, hashes, includeBranchInfo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VCS_DetailsMulti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetailsMulti'
type VCS_DetailsMulti_Call struct {
	*mock.Call
}

// DetailsMulti is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes []string
//   - includeBranchInfo bool
func (_e *VCS_Expecter) DetailsMulti(ctx interface{}, hashes interface{}, includeBranchInfo interface{}) *VCS_DetailsMulti_Call {
	return &VCS_DetailsMulti_Call{Call: _e.mock.On("DetailsMulti", ctx, hashes, includeBranchInfo)}
}

func (_c *VCS_DetailsMulti_Call) Run(run func(ctx context.Context, hashes []string, includeBranchInfo bool)) *VCS_DetailsMulti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VCS_DetailsMulti_Call) Return(longCommits []*vcsinfo.LongCommit, err error) *VCS_DetailsMulti_Call {
	_c.Call.Return(longCommits, err)
	return _c
}

func (_c *VCS_DetailsMulti_Call) RunAndReturn(run func(ctx context.Context, hashes []string, includeBranchInfo bool) ([]*vcsinfo.LongCommit, error)) *VCS_DetailsMulti_Call {
	_c.Call.Return(run)
	return _c
}

// From provides a mock function for the type VCS
func (_mock *VCS) From(start time.Time) []string {
	ret := _mock.Called(start)

	if len(ret) == 0 {
		panic("no return value specified for From")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(time.Time) []string); ok {
		r0 = returnFunc(start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// VCS_From_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'From'
type VCS_From_Call struct {
	*mock.Call
}

// From is a helper method to define mock.On call
//   - start time.Time
func (_e *VCS_Expecter) From(start interface{}) *VCS_From_Call {
	return &VCS_From_Call{Call: _e.mock.On("From", start)}
}

func (_c *VCS_From_Call) Run(run func(start time.Time)) *VCS_From_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *VCS_From_Call) Return(strings []string) *VCS_From_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *VCS_From_Call) RunAndReturn(run func(start time.Time) []string) *VCS_From_Call {
	_c.Call.Return(run)
	return _c
}

// IndexOf provides a mock function for the type VCS
func (_mock *VCS) IndexOf(ctx context.Context, hash string) (int, error) {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for IndexOf")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return returnFunc(ctx, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VCS_IndexOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexOf'
type VCS_IndexOf_Call struct {
	*mock.Call
}

// IndexOf is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *VCS_Expecter) IndexOf(ctx interface{}, hash interface{}) *VCS_IndexOf_Call {
	return &VCS_IndexOf_Call{Call: _e.mock.On("IndexOf", ctx, hash)}
}

func (_c *VCS_IndexOf_Call) Run(run func(ctx context.Context, hash string)) *VCS_IndexOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VCS_IndexOf_Call) Return(n int, err error) *VCS_IndexOf_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *VCS_IndexOf_Call) RunAndReturn(run func(ctx context.Context, hash string) (int, error)) *VCS_IndexOf_Call {
	_c.Call.Return(run)
	return _c
}

// LastNIndex provides a mock function for the type VCS
func (_mock *VCS) LastNIndex(N int) []*vcsinfo.IndexCommit {
	ret := _mock.Called(N)

	if len(ret) == 0 {
		panic("no return value specified for LastNIndex")
	}

	var r0 []*vcsinfo.IndexCommit
	if returnFunc, ok := ret.Get(0).(func(int) []*vcsinfo.IndexCommit); ok {
		r0 = returnFunc(N)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.IndexCommit)
		}
	}
	return r0
}

// VCS_LastNIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastNIndex'
type VCS_LastNIndex_Call struct {
	*mock.Call
}

// LastNIndex is a helper method to define mock.On call
//   - N int
func (_e *VCS_Expecter) LastNIndex(N interface{}) *VCS_LastNIndex_Call {
	return &VCS_LastNIndex_Call{Call: _e.mock.On("LastNIndex", N)}
}

func (_c *VCS_LastNIndex_Call) Run(run func(N int)) *VCS_LastNIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *VCS_LastNIndex_Call) Return(indexCommits []*vcsinfo.IndexCommit) *VCS_LastNIndex_Call {
	_c.Call.Return(indexCommits)
	return _c
}

func (_c *VCS_LastNIndex_Call) RunAndReturn(run func(N int) []*vcsinfo.IndexCommit) *VCS_LastNIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Range provides a mock function for the type VCS
func (_mock *VCS) Range(begin time.Time, end time.Time) []*vcsinfo.IndexCommit {
	ret := _mock.Called(begin, end)

	if len(ret) == 0 {
		panic("no return value specified for Range")
	}

	var r0 []*vcsinfo.IndexCommit
	if returnFunc, ok := ret.Get(0).(func(time.Time, time.Time) []*vcsinfo.IndexCommit); ok {
		r0 = returnFunc(begin, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.IndexCommit)
		}
	}
	return r0
}

// VCS_Range_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Range'
type VCS_Range_Call struct {
	*mock.Call
}

// Range is a helper method to define mock.On call
//   - begin time.Time
//   - end time.Time
func (_e *VCS_Expecter) Range(begin interface{}, end interface{}) *VCS_Range_Call {
	return &VCS_Range_Call{Call: _e.mock.On("Range", begin, end)}
}

func (_c *VCS_Range_Call) Run(run func(begin time.Time, end time.Time)) *VCS_Range_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VCS_Range_Call) Return(indexCommits []*vcsinfo.IndexCommit) *VCS_Range_Call {
	_c.Call.Return(indexCommits)
	return _c
}

func (_c *VCS_Range_Call) RunAndReturn(run func(begin time.Time, end time.Time) []*vcsinfo.IndexCommit) *VCS_Range_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type VCS
func (_mock *VCS) Update(ctx context.Context, pull bool, allBranches bool) error {
	ret := _mock.Called(ctx, pull, allBranches)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool, bool) error); ok {
		r0 = returnFunc(ctx, pull, allBranches)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VCS_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type VCS_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pull bool
//   - allBranches bool
func (_e *VCS_Expecter) Update(ctx interface{}, pull interface{}, allBranches interface{}) *VCS_Update_Call {
	return &VCS_Update_Call{Call: _e.mock.On("Update", ctx, pull, allBranches)}
}

func (_c *VCS_Update_Call) Run(run func(ctx context.Context, pull bool, allBranches bool)) *VCS_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VCS_Update_Call) Return(err error) *VCS_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VCS_Update_Call) RunAndReturn(run func(ctx context.Context, pull bool, allBranches bool) error) *VCS_Update_Call {
	_c.Call.Return(run)
	return _c
}
