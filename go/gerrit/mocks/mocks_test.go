// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.goldmine.build/go/gerrit"
)

// NewGerritInterface creates a new instance of GerritInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGerritInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GerritInterface {
	mock := &GerritInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GerritInterface is an autogenerated mock type for the GerritInterface type
type GerritInterface struct {
	mock.Mock
}

type GerritInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GerritInterface) EXPECT() *GerritInterface_Expecter {
	return &GerritInterface_Expecter{mock: &_m.Mock}
}

// Abandon provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Abandon(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for Abandon")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_Abandon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abandon'
type GerritInterface_Abandon_Call struct {
	*mock.Call
}

// Abandon is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) Abandon(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_Abandon_Call {
	return &GerritInterface_Abandon_Call{Call: _e.mock.On("Abandon", context1, changeInfo, s)}
}

func (_c *GerritInterface_Abandon_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_Abandon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_Abandon_Call) Return(err error) *GerritInterface_Abandon_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_Abandon_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_Abandon_Call {
	_c.Call.Return(run)
	return _c
}

// AddCC provides a mock function for the type GerritInterface
func (_mock *GerritInterface) AddCC(context1 context.Context, changeInfo *gerrit.ChangeInfo, strings []string) error {
	ret := _mock.Called(context1, changeInfo, strings)

	if len(ret) == 0 {
		panic("no return value specified for AddCC")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, []string) error); ok {
		r0 = returnFunc(context1, changeInfo, strings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_AddCC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCC'
type GerritInterface_AddCC_Call struct {
	*mock.Call
}

// AddCC is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - strings []string
func (_e *GerritInterface_Expecter) AddCC(context1 interface{}, changeInfo interface{}, strings interface{}) *GerritInterface_AddCC_Call {
	return &GerritInterface_AddCC_Call{Call: _e.mock.On("AddCC", context1, changeInfo, strings)}
}

func (_c *GerritInterface_AddCC_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, strings []string)) *GerritInterface_AddCC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_AddCC_Call) Return(err error) *GerritInterface_AddCC_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_AddCC_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, strings []string) error) *GerritInterface_AddCC_Call {
	_c.Call.Return(run)
	return _c
}

// AddComment provides a mock function for the type GerritInterface
func (_mock *GerritInterface) AddComment(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type GerritInterface_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) AddComment(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_AddComment_Call {
	return &GerritInterface_AddComment_Call{Call: _e.mock.On("AddComment", context1, changeInfo, s)}
}

func (_c *GerritInterface_AddComment_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_AddComment_Call) Return(err error) *GerritInterface_AddComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_AddComment_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// Approve provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Approve(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type GerritInterface_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) Approve(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_Approve_Call {
	return &GerritInterface_Approve_Call{Call: _e.mock.On("Approve", context1, changeInfo, s)}
}

func (_c *GerritInterface_Approve_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_Approve_Call) Return(err error) *GerritInterface_Approve_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_Approve_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_Approve_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Config() *gerrit.Config {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *gerrit.Config
	if returnFunc, ok := ret.Get(0).(func() *gerrit.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.Config)
		}
	}
	return r0
}

// GerritInterface_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type GerritInterface_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *GerritInterface_Expecter) Config() *GerritInterface_Config_Call {
	return &GerritInterface_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *GerritInterface_Config_Call) Run(run func()) *GerritInterface_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GerritInterface_Config_Call) Return(config *gerrit.Config) *GerritInterface_Config_Call {
	_c.Call.Return(config)
	return _c
}

func (_c *GerritInterface_Config_Call) RunAndReturn(run func() *gerrit.Config) *GerritInterface_Config_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChange provides a mock function for the type GerritInterface
func (_mock *GerritInterface) CreateChange(context1 context.Context, s string, s1 string, s2 string, s3 string, s4 string) (*gerrit.ChangeInfo, error) {
	ret := _mock.Called(context1, s, s1, s2, s3, s4)

	if len(ret) == 0 {
		panic("no return value specified for CreateChange")
	}

	var r0 *gerrit.ChangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (*gerrit.ChangeInfo, error)); ok {
		return returnFunc(context1, s, s1, s2, s3, s4)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) *gerrit.ChangeInfo); ok {
		r0 = returnFunc(context1, s, s1, s2, s3, s4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.ChangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = returnFunc(context1, s, s1, s2, s3, s4)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_CreateChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChange'
type GerritInterface_CreateChange_Call struct {
	*mock.Call
}

// CreateChange is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
//   - s2 string
//   - s3 string
//   - s4 string
func (_e *GerritInterface_Expecter) CreateChange(context1 interface{}, s interface{}, s1 interface{}, s2 interface{}, s3 interface{}, s4 interface{}) *GerritInterface_CreateChange_Call {
	return &GerritInterface_CreateChange_Call{Call: _e.mock.On("CreateChange", context1, s, s1, s2, s3, s4)}
}

func (_c *GerritInterface_CreateChange_Call) Run(run func(context1 context.Context, s string, s1 string, s2 string, s3 string, s4 string)) *GerritInterface_CreateChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *GerritInterface_CreateChange_Call) Return(changeInfo *gerrit.ChangeInfo, err error) *GerritInterface_CreateChange_Call {
	_c.Call.Return(changeInfo, err)
	return _c
}

func (_c *GerritInterface_CreateChange_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string, s2 string, s3 string, s4 string) (*gerrit.ChangeInfo, error)) *GerritInterface_CreateChange_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCherryPickChange provides a mock function for the type GerritInterface
func (_mock *GerritInterface) CreateCherryPickChange(context1 context.Context, s string, s1 string, s2 string, s3 string) (*gerrit.ChangeInfo, error) {
	ret := _mock.Called(context1, s, s1, s2, s3)

	if len(ret) == 0 {
		panic("no return value specified for CreateCherryPickChange")
	}

	var r0 *gerrit.ChangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*gerrit.ChangeInfo, error)); ok {
		return returnFunc(context1, s, s1, s2, s3)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) *gerrit.ChangeInfo); ok {
		r0 = returnFunc(context1, s, s1, s2, s3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.ChangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = returnFunc(context1, s, s1, s2, s3)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_CreateCherryPickChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCherryPickChange'
type GerritInterface_CreateCherryPickChange_Call struct {
	*mock.Call
}

// CreateCherryPickChange is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
//   - s2 string
//   - s3 string
func (_e *GerritInterface_Expecter) CreateCherryPickChange(context1 interface{}, s interface{}, s1 interface{}, s2 interface{}, s3 interface{}) *GerritInterface_CreateCherryPickChange_Call {
	return &GerritInterface_CreateCherryPickChange_Call{Call: _e.mock.On("CreateCherryPickChange", context1, s, s1, s2, s3)}
}

func (_c *GerritInterface_CreateCherryPickChange_Call) Run(run func(context1 context.Context, s string, s1 string, s2 string, s3 string)) *GerritInterface_CreateCherryPickChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *GerritInterface_CreateCherryPickChange_Call) Return(changeInfo *gerrit.ChangeInfo, err error) *GerritInterface_CreateCherryPickChange_Call {
	_c.Call.Return(changeInfo, err)
	return _c
}

func (_c *GerritInterface_CreateCherryPickChange_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string, s2 string, s3 string) (*gerrit.ChangeInfo, error)) *GerritInterface_CreateCherryPickChange_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChangeEdit provides a mock function for the type GerritInterface
func (_mock *GerritInterface) DeleteChangeEdit(context1 context.Context, changeInfo *gerrit.ChangeInfo) error {
	ret := _mock.Called(context1, changeInfo)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChangeEdit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo) error); ok {
		r0 = returnFunc(context1, changeInfo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_DeleteChangeEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChangeEdit'
type GerritInterface_DeleteChangeEdit_Call struct {
	*mock.Call
}

// DeleteChangeEdit is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
func (_e *GerritInterface_Expecter) DeleteChangeEdit(context1 interface{}, changeInfo interface{}) *GerritInterface_DeleteChangeEdit_Call {
	return &GerritInterface_DeleteChangeEdit_Call{Call: _e.mock.On("DeleteChangeEdit", context1, changeInfo)}
}

func (_c *GerritInterface_DeleteChangeEdit_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo)) *GerritInterface_DeleteChangeEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_DeleteChangeEdit_Call) Return(err error) *GerritInterface_DeleteChangeEdit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_DeleteChangeEdit_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo) error) *GerritInterface_DeleteChangeEdit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type GerritInterface
func (_mock *GerritInterface) DeleteFile(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type GerritInterface_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) DeleteFile(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_DeleteFile_Call {
	return &GerritInterface_DeleteFile_Call{Call: _e.mock.On("DeleteFile", context1, changeInfo, s)}
}

func (_c *GerritInterface_DeleteFile_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_DeleteFile_Call) Return(err error) *GerritInterface_DeleteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_DeleteFile_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVote provides a mock function for the type GerritInterface
func (_mock *GerritInterface) DeleteVote(context1 context.Context, n int64, s string, n1 int, notifyOption gerrit.NotifyOption, b bool) error {
	ret := _mock.Called(context1, n, s, n1, notifyOption, b)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, int, gerrit.NotifyOption, bool) error); ok {
		r0 = returnFunc(context1, n, s, n1, notifyOption, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_DeleteVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVote'
type GerritInterface_DeleteVote_Call struct {
	*mock.Call
}

// DeleteVote is a helper method to define mock.On call
//   - context1 context.Context
//   - n int64
//   - s string
//   - n1 int
//   - notifyOption gerrit.NotifyOption
//   - b bool
func (_e *GerritInterface_Expecter) DeleteVote(context1 interface{}, n interface{}, s interface{}, n1 interface{}, notifyOption interface{}, b interface{}) *GerritInterface_DeleteVote_Call {
	return &GerritInterface_DeleteVote_Call{Call: _e.mock.On("DeleteVote", context1, n, s, n1, notifyOption, b)}
}

func (_c *GerritInterface_DeleteVote_Call) Run(run func(context1 context.Context, n int64, s string, n1 int, notifyOption gerrit.NotifyOption, b bool)) *GerritInterface_DeleteVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 gerrit.NotifyOption
		if args[4] != nil {
			arg4 = args[4].(gerrit.NotifyOption)
		}
		var arg5 bool
		if args[5] != nil {
			arg5 = args[5].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *GerritInterface_DeleteVote_Call) Return(err error) *GerritInterface_DeleteVote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_DeleteVote_Call) RunAndReturn(run func(context1 context.Context, n int64, s string, n1 int, notifyOption gerrit.NotifyOption, b bool) error) *GerritInterface_DeleteVote_Call {
	_c.Call.Return(run)
	return _c
}

// Disapprove provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Disapprove(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for Disapprove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_Disapprove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disapprove'
type GerritInterface_Disapprove_Call struct {
	*mock.Call
}

// Disapprove is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) Disapprove(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_Disapprove_Call {
	return &GerritInterface_Disapprove_Call{Call: _e.mock.On("Disapprove", context1, changeInfo, s)}
}

func (_c *GerritInterface_Disapprove_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_Disapprove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_Disapprove_Call) Return(err error) *GerritInterface_Disapprove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_Disapprove_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_Disapprove_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadCommitMsgHook provides a mock function for the type GerritInterface
func (_mock *GerritInterface) DownloadCommitMsgHook(ctx context.Context, dest string) error {
	ret := _mock.Called(ctx, dest)

	if len(ret) == 0 {
		panic("no return value specified for DownloadCommitMsgHook")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, dest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_DownloadCommitMsgHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadCommitMsgHook'
type GerritInterface_DownloadCommitMsgHook_Call struct {
	*mock.Call
}

// DownloadCommitMsgHook is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
func (_e *GerritInterface_Expecter) DownloadCommitMsgHook(ctx interface{}, dest interface{}) *GerritInterface_DownloadCommitMsgHook_Call {
	return &GerritInterface_DownloadCommitMsgHook_Call{Call: _e.mock.On("DownloadCommitMsgHook", ctx, dest)}
}

func (_c *GerritInterface_DownloadCommitMsgHook_Call) Run(run func(ctx context.Context, dest string)) *GerritInterface_DownloadCommitMsgHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_DownloadCommitMsgHook_Call) Return(err error) *GerritInterface_DownloadCommitMsgHook_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_DownloadCommitMsgHook_Call) RunAndReturn(run func(ctx context.Context, dest string) error) *GerritInterface_DownloadCommitMsgHook_Call {
	_c.Call.Return(run)
	return _c
}

// EditFile provides a mock function for the type GerritInterface
func (_mock *GerritInterface) EditFile(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, s1 string) error {
	ret := _mock.Called(context1, changeInfo, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for EditFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s, s1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_EditFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditFile'
type GerritInterface_EditFile_Call struct {
	*mock.Call
}

// EditFile is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
//   - s1 string
func (_e *GerritInterface_Expecter) EditFile(context1 interface{}, changeInfo interface{}, s interface{}, s1 interface{}) *GerritInterface_EditFile_Call {
	return &GerritInterface_EditFile_Call{Call: _e.mock.On("EditFile", context1, changeInfo, s, s1)}
}

func (_c *GerritInterface_EditFile_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, s1 string)) *GerritInterface_EditFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GerritInterface_EditFile_Call) Return(err error) *GerritInterface_EditFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_EditFile_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, s1 string) error) *GerritInterface_EditFile_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractIssueFromCommit provides a mock function for the type GerritInterface
func (_mock *GerritInterface) ExtractIssueFromCommit(s string) (int64, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for ExtractIssueFromCommit")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int64); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_ExtractIssueFromCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractIssueFromCommit'
type GerritInterface_ExtractIssueFromCommit_Call struct {
	*mock.Call
}

// ExtractIssueFromCommit is a helper method to define mock.On call
//   - s string
func (_e *GerritInterface_Expecter) ExtractIssueFromCommit(s interface{}) *GerritInterface_ExtractIssueFromCommit_Call {
	return &GerritInterface_ExtractIssueFromCommit_Call{Call: _e.mock.On("ExtractIssueFromCommit", s)}
}

func (_c *GerritInterface_ExtractIssueFromCommit_Call) Run(run func(s string)) *GerritInterface_ExtractIssueFromCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GerritInterface_ExtractIssueFromCommit_Call) Return(n int64, err error) *GerritInterface_ExtractIssueFromCommit_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *GerritInterface_ExtractIssueFromCommit_Call) RunAndReturn(run func(s string) (int64, error)) *GerritInterface_ExtractIssueFromCommit_Call {
	_c.Call.Return(run)
	return _c
}

// Files provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Files(ctx context.Context, issue int64, patch string) (map[string]*gerrit.FileInfo, error) {
	ret := _mock.Called(ctx, issue, patch)

	if len(ret) == 0 {
		panic("no return value specified for Files")
	}

	var r0 map[string]*gerrit.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (map[string]*gerrit.FileInfo, error)); ok {
		return returnFunc(ctx, issue, patch)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) map[string]*gerrit.FileInfo); ok {
		r0 = returnFunc(ctx, issue, patch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*gerrit.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, issue, patch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_Files_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Files'
type GerritInterface_Files_Call struct {
	*mock.Call
}

// Files is a helper method to define mock.On call
//   - ctx context.Context
//   - issue int64
//   - patch string
func (_e *GerritInterface_Expecter) Files(ctx interface{}, issue interface{}, patch interface{}) *GerritInterface_Files_Call {
	return &GerritInterface_Files_Call{Call: _e.mock.On("Files", ctx, issue, patch)}
}

func (_c *GerritInterface_Files_Call) Run(run func(ctx context.Context, issue int64, patch string)) *GerritInterface_Files_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_Files_Call) Return(stringToFileInfo map[string]*gerrit.FileInfo, err error) *GerritInterface_Files_Call {
	_c.Call.Return(stringToFileInfo, err)
	return _c
}

func (_c *GerritInterface_Files_Call) RunAndReturn(run func(ctx context.Context, issue int64, patch string) (map[string]*gerrit.FileInfo, error)) *GerritInterface_Files_Call {
	_c.Call.Return(run)
	return _c
}

// GetChange provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetChange(ctx context.Context, id string) (*gerrit.ChangeInfo, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChange")
	}

	var r0 *gerrit.ChangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*gerrit.ChangeInfo, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *gerrit.ChangeInfo); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.ChangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChange'
type GerritInterface_GetChange_Call struct {
	*mock.Call
}

// GetChange is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *GerritInterface_Expecter) GetChange(ctx interface{}, id interface{}) *GerritInterface_GetChange_Call {
	return &GerritInterface_GetChange_Call{Call: _e.mock.On("GetChange", ctx, id)}
}

func (_c *GerritInterface_GetChange_Call) Run(run func(ctx context.Context, id string)) *GerritInterface_GetChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_GetChange_Call) Return(changeInfo *gerrit.ChangeInfo, err error) *GerritInterface_GetChange_Call {
	_c.Call.Return(changeInfo, err)
	return _c
}

func (_c *GerritInterface_GetChange_Call) RunAndReturn(run func(ctx context.Context, id string) (*gerrit.ChangeInfo, error)) *GerritInterface_GetChange_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommit provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetCommit(ctx context.Context, issue int64, revision string) (*gerrit.CommitInfo, error) {
	ret := _mock.Called(ctx, issue, revision)

	if len(ret) == 0 {
		panic("no return value specified for GetCommit")
	}

	var r0 *gerrit.CommitInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (*gerrit.CommitInfo, error)); ok {
		return returnFunc(ctx, issue, revision)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) *gerrit.CommitInfo); ok {
		r0 = returnFunc(ctx, issue, revision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.CommitInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, issue, revision)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommit'
type GerritInterface_GetCommit_Call struct {
	*mock.Call
}

// GetCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - issue int64
//   - revision string
func (_e *GerritInterface_Expecter) GetCommit(ctx interface{}, issue interface{}, revision interface{}) *GerritInterface_GetCommit_Call {
	return &GerritInterface_GetCommit_Call{Call: _e.mock.On("GetCommit", ctx, issue, revision)}
}

func (_c *GerritInterface_GetCommit_Call) Run(run func(ctx context.Context, issue int64, revision string)) *GerritInterface_GetCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_GetCommit_Call) Return(commitInfo *gerrit.CommitInfo, err error) *GerritInterface_GetCommit_Call {
	_c.Call.Return(commitInfo, err)
	return _c
}

func (_c *GerritInterface_GetCommit_Call) RunAndReturn(run func(ctx context.Context, issue int64, revision string) (*gerrit.CommitInfo, error)) *GerritInterface_GetCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetContent provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetContent(context1 context.Context, n int64, s string, s1 string) (string, error) {
	ret := _mock.Called(context1, n, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) (string, error)); ok {
		return returnFunc(context1, n, s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) string); ok {
		r0 = returnFunc(context1, n, s, s1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = returnFunc(context1, n, s, s1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type GerritInterface_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - context1 context.Context
//   - n int64
//   - s string
//   - s1 string
func (_e *GerritInterface_Expecter) GetContent(context1 interface{}, n interface{}, s interface{}, s1 interface{}) *GerritInterface_GetContent_Call {
	return &GerritInterface_GetContent_Call{Call: _e.mock.On("GetContent", context1, n, s, s1)}
}

func (_c *GerritInterface_GetContent_Call) Run(run func(context1 context.Context, n int64, s string, s1 string)) *GerritInterface_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GerritInterface_GetContent_Call) Return(s2 string, err error) *GerritInterface_GetContent_Call {
	_c.Call.Return(s2, err)
	return _c
}

func (_c *GerritInterface_GetContent_Call) RunAndReturn(run func(context1 context.Context, n int64, s string, s1 string) (string, error)) *GerritInterface_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileNames provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetFileNames(ctx context.Context, issue int64, patch string) ([]string, error) {
	ret := _mock.Called(ctx, issue, patch)

	if len(ret) == 0 {
		panic("no return value specified for GetFileNames")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) ([]string, error)); ok {
		return returnFunc(ctx, issue, patch)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) []string); ok {
		r0 = returnFunc(ctx, issue, patch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, issue, patch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetFileNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileNames'
type GerritInterface_GetFileNames_Call struct {
	*mock.Call
}

// GetFileNames is a helper method to define mock.On call
//   - ctx context.Context
//   - issue int64
//   - patch string
func (_e *GerritInterface_Expecter) GetFileNames(ctx interface{}, issue interface{}, patch interface{}) *GerritInterface_GetFileNames_Call {
	return &GerritInterface_GetFileNames_Call{Call: _e.mock.On("GetFileNames", ctx, issue, patch)}
}

func (_c *GerritInterface_GetFileNames_Call) Run(run func(ctx context.Context, issue int64, patch string)) *GerritInterface_GetFileNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_GetFileNames_Call) Return(strings []string, err error) *GerritInterface_GetFileNames_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *GerritInterface_GetFileNames_Call) RunAndReturn(run func(ctx context.Context, issue int64, patch string) ([]string, error)) *GerritInterface_GetFileNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilesToContent provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetFilesToContent(ctx context.Context, issue int64, revision string) (map[string]string, error) {
	ret := _mock.Called(ctx, issue, revision)

	if len(ret) == 0 {
		panic("no return value specified for GetFilesToContent")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (map[string]string, error)); ok {
		return returnFunc(ctx, issue, revision)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) map[string]string); ok {
		r0 = returnFunc(ctx, issue, revision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, issue, revision)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetFilesToContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilesToContent'
type GerritInterface_GetFilesToContent_Call struct {
	*mock.Call
}

// GetFilesToContent is a helper method to define mock.On call
//   - ctx context.Context
//   - issue int64
//   - revision string
func (_e *GerritInterface_Expecter) GetFilesToContent(ctx interface{}, issue interface{}, revision interface{}) *GerritInterface_GetFilesToContent_Call {
	return &GerritInterface_GetFilesToContent_Call{Call: _e.mock.On("GetFilesToContent", ctx, issue, revision)}
}

func (_c *GerritInterface_GetFilesToContent_Call) Run(run func(ctx context.Context, issue int64, revision string)) *GerritInterface_GetFilesToContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_GetFilesToContent_Call) Return(stringToString map[string]string, err error) *GerritInterface_GetFilesToContent_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *GerritInterface_GetFilesToContent_Call) RunAndReturn(run func(ctx context.Context, issue int64, revision string) (map[string]string, error)) *GerritInterface_GetFilesToContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueProperties provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetIssueProperties(context1 context.Context, n int64) (*gerrit.ChangeInfo, error) {
	ret := _mock.Called(context1, n)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueProperties")
	}

	var r0 *gerrit.ChangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*gerrit.ChangeInfo, error)); ok {
		return returnFunc(context1, n)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *gerrit.ChangeInfo); ok {
		r0 = returnFunc(context1, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gerrit.ChangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(context1, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetIssueProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueProperties'
type GerritInterface_GetIssueProperties_Call struct {
	*mock.Call
}

// GetIssueProperties is a helper method to define mock.On call
//   - context1 context.Context
//   - n int64
func (_e *GerritInterface_Expecter) GetIssueProperties(context1 interface{}, n interface{}) *GerritInterface_GetIssueProperties_Call {
	return &GerritInterface_GetIssueProperties_Call{Call: _e.mock.On("GetIssueProperties", context1, n)}
}

func (_c *GerritInterface_GetIssueProperties_Call) Run(run func(context1 context.Context, n int64)) *GerritInterface_GetIssueProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_GetIssueProperties_Call) Return(changeInfo *gerrit.ChangeInfo, err error) *GerritInterface_GetIssueProperties_Call {
	_c.Call.Return(changeInfo, err)
	return _c
}

func (_c *GerritInterface_GetIssueProperties_Call) RunAndReturn(run func(context1 context.Context, n int64) (*gerrit.ChangeInfo, error)) *GerritInterface_GetIssueProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetPatch provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetPatch(context1 context.Context, n int64, s string) (string, error) {
	ret := _mock.Called(context1, n, s)

	if len(ret) == 0 {
		panic("no return value specified for GetPatch")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (string, error)); ok {
		return returnFunc(context1, n, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) string); ok {
		r0 = returnFunc(context1, n, s)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(context1, n, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPatch'
type GerritInterface_GetPatch_Call struct {
	*mock.Call
}

// GetPatch is a helper method to define mock.On call
//   - context1 context.Context
//   - n int64
//   - s string
func (_e *GerritInterface_Expecter) GetPatch(context1 interface{}, n interface{}, s interface{}) *GerritInterface_GetPatch_Call {
	return &GerritInterface_GetPatch_Call{Call: _e.mock.On("GetPatch", context1, n, s)}
}

func (_c *GerritInterface_GetPatch_Call) Run(run func(context1 context.Context, n int64, s string)) *GerritInterface_GetPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_GetPatch_Call) Return(s1 string, err error) *GerritInterface_GetPatch_Call {
	_c.Call.Return(s1, err)
	return _c
}

func (_c *GerritInterface_GetPatch_Call) RunAndReturn(run func(context1 context.Context, n int64, s string) (string, error)) *GerritInterface_GetPatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoUrl provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetRepoUrl() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepoUrl")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// GerritInterface_GetRepoUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoUrl'
type GerritInterface_GetRepoUrl_Call struct {
	*mock.Call
}

// GetRepoUrl is a helper method to define mock.On call
func (_e *GerritInterface_Expecter) GetRepoUrl() *GerritInterface_GetRepoUrl_Call {
	return &GerritInterface_GetRepoUrl_Call{Call: _e.mock.On("GetRepoUrl")}
}

func (_c *GerritInterface_GetRepoUrl_Call) Run(run func()) *GerritInterface_GetRepoUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GerritInterface_GetRepoUrl_Call) Return(s string) *GerritInterface_GetRepoUrl_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GerritInterface_GetRepoUrl_Call) RunAndReturn(run func() string) *GerritInterface_GetRepoUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserEmail provides a mock function for the type GerritInterface
func (_mock *GerritInterface) GetUserEmail(context1 context.Context) (string, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEmail")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_GetUserEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserEmail'
type GerritInterface_GetUserEmail_Call struct {
	*mock.Call
}

// GetUserEmail is a helper method to define mock.On call
//   - context1 context.Context
func (_e *GerritInterface_Expecter) GetUserEmail(context1 interface{}) *GerritInterface_GetUserEmail_Call {
	return &GerritInterface_GetUserEmail_Call{Call: _e.mock.On("GetUserEmail", context1)}
}

func (_c *GerritInterface_GetUserEmail_Call) Run(run func(context1 context.Context)) *GerritInterface_GetUserEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GerritInterface_GetUserEmail_Call) Return(s string, err error) *GerritInterface_GetUserEmail_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *GerritInterface_GetUserEmail_Call) RunAndReturn(run func(context1 context.Context) (string, error)) *GerritInterface_GetUserEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// GerritInterface_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type GerritInterface_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *GerritInterface_Expecter) Initialized() *GerritInterface_Initialized_Call {
	return &GerritInterface_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *GerritInterface_Initialized_Call) Run(run func()) *GerritInterface_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GerritInterface_Initialized_Call) Return(b bool) *GerritInterface_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *GerritInterface_Initialized_Call) RunAndReturn(run func() bool) *GerritInterface_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// IsBinaryPatch provides a mock function for the type GerritInterface
func (_mock *GerritInterface) IsBinaryPatch(ctx context.Context, issue int64, patch string) (bool, error) {
	ret := _mock.Called(ctx, issue, patch)

	if len(ret) == 0 {
		panic("no return value specified for IsBinaryPatch")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (bool, error)); ok {
		return returnFunc(ctx, issue, patch)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) bool); ok {
		r0 = returnFunc(ctx, issue, patch)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, issue, patch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_IsBinaryPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBinaryPatch'
type GerritInterface_IsBinaryPatch_Call struct {
	*mock.Call
}

// IsBinaryPatch is a helper method to define mock.On call
//   - ctx context.Context
//   - issue int64
//   - patch string
func (_e *GerritInterface_Expecter) IsBinaryPatch(ctx interface{}, issue interface{}, patch interface{}) *GerritInterface_IsBinaryPatch_Call {
	return &GerritInterface_IsBinaryPatch_Call{Call: _e.mock.On("IsBinaryPatch", ctx, issue, patch)}
}

func (_c *GerritInterface_IsBinaryPatch_Call) Run(run func(ctx context.Context, issue int64, patch string)) *GerritInterface_IsBinaryPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_IsBinaryPatch_Call) Return(b bool, err error) *GerritInterface_IsBinaryPatch_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *GerritInterface_IsBinaryPatch_Call) RunAndReturn(run func(ctx context.Context, issue int64, patch string) (bool, error)) *GerritInterface_IsBinaryPatch_Call {
	_c.Call.Return(run)
	return _c
}

// MoveFile provides a mock function for the type GerritInterface
func (_mock *GerritInterface) MoveFile(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, s1 string) error {
	ret := _mock.Called(context1, changeInfo, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for MoveFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s, s1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_MoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveFile'
type GerritInterface_MoveFile_Call struct {
	*mock.Call
}

// MoveFile is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
//   - s1 string
func (_e *GerritInterface_Expecter) MoveFile(context1 interface{}, changeInfo interface{}, s interface{}, s1 interface{}) *GerritInterface_MoveFile_Call {
	return &GerritInterface_MoveFile_Call{Call: _e.mock.On("MoveFile", context1, changeInfo, s, s1)}
}

func (_c *GerritInterface_MoveFile_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, s1 string)) *GerritInterface_MoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GerritInterface_MoveFile_Call) Return(err error) *GerritInterface_MoveFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_MoveFile_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, s1 string) error) *GerritInterface_MoveFile_Call {
	_c.Call.Return(run)
	return _c
}

// NoScore provides a mock function for the type GerritInterface
func (_mock *GerritInterface) NoScore(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for NoScore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_NoScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoScore'
type GerritInterface_NoScore_Call struct {
	*mock.Call
}

// NoScore is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) NoScore(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_NoScore_Call {
	return &GerritInterface_NoScore_Call{Call: _e.mock.On("NoScore", context1, changeInfo, s)}
}

func (_c *GerritInterface_NoScore_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_NoScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_NoScore_Call) Return(err error) *GerritInterface_NoScore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_NoScore_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_NoScore_Call {
	_c.Call.Return(run)
	return _c
}

// PublishChangeEdit provides a mock function for the type GerritInterface
func (_mock *GerritInterface) PublishChangeEdit(context1 context.Context, changeInfo *gerrit.ChangeInfo) error {
	ret := _mock.Called(context1, changeInfo)

	if len(ret) == 0 {
		panic("no return value specified for PublishChangeEdit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo) error); ok {
		r0 = returnFunc(context1, changeInfo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_PublishChangeEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishChangeEdit'
type GerritInterface_PublishChangeEdit_Call struct {
	*mock.Call
}

// PublishChangeEdit is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
func (_e *GerritInterface_Expecter) PublishChangeEdit(context1 interface{}, changeInfo interface{}) *GerritInterface_PublishChangeEdit_Call {
	return &GerritInterface_PublishChangeEdit_Call{Call: _e.mock.On("PublishChangeEdit", context1, changeInfo)}
}

func (_c *GerritInterface_PublishChangeEdit_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo)) *GerritInterface_PublishChangeEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_PublishChangeEdit_Call) Return(err error) *GerritInterface_PublishChangeEdit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_PublishChangeEdit_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo) error) *GerritInterface_PublishChangeEdit_Call {
	_c.Call.Return(run)
	return _c
}

// Rebase provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Rebase(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, b bool) error {
	ret := _mock.Called(context1, changeInfo, s, b)

	if len(ret) == 0 {
		panic("no return value specified for Rebase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string, bool) error); ok {
		r0 = returnFunc(context1, changeInfo, s, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_Rebase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rebase'
type GerritInterface_Rebase_Call struct {
	*mock.Call
}

// Rebase is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
//   - b bool
func (_e *GerritInterface_Expecter) Rebase(context1 interface{}, changeInfo interface{}, s interface{}, b interface{}) *GerritInterface_Rebase_Call {
	return &GerritInterface_Rebase_Call{Call: _e.mock.On("Rebase", context1, changeInfo, s, b)}
}

func (_c *GerritInterface_Rebase_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, b bool)) *GerritInterface_Rebase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GerritInterface_Rebase_Call) Return(err error) *GerritInterface_Rebase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_Rebase_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, b bool) error) *GerritInterface_Rebase_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromCQ provides a mock function for the type GerritInterface
func (_mock *GerritInterface) RemoveFromCQ(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromCQ")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_RemoveFromCQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromCQ'
type GerritInterface_RemoveFromCQ_Call struct {
	*mock.Call
}

// RemoveFromCQ is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) RemoveFromCQ(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_RemoveFromCQ_Call {
	return &GerritInterface_RemoveFromCQ_Call{Call: _e.mock.On("RemoveFromCQ", context1, changeInfo, s)}
}

func (_c *GerritInterface_RemoveFromCQ_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_RemoveFromCQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_RemoveFromCQ_Call) Return(err error) *GerritInterface_RemoveFromCQ_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_RemoveFromCQ_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_RemoveFromCQ_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Search(context1 context.Context, n int, b bool, searchTerms ...*gerrit.SearchTerm) ([]*gerrit.ChangeInfo, error) {
	// *gerrit.SearchTerm
	_va := make([]interface{}, len(searchTerms))
	for _i := range searchTerms {
		_va[_i] = searchTerms[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, context1, n, b)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*gerrit.ChangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, bool, ...*gerrit.SearchTerm) ([]*gerrit.ChangeInfo, error)); ok {
		return returnFunc(context1, n, b, searchTerms...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, bool, ...*gerrit.SearchTerm) []*gerrit.ChangeInfo); ok {
		r0 = returnFunc(context1, n, b, searchTerms...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gerrit.ChangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, bool, ...*gerrit.SearchTerm) error); ok {
		r1 = returnFunc(context1, n, b, searchTerms...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GerritInterface_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type GerritInterface_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - context1 context.Context
//   - n int
//   - b bool
//   - searchTerms ...*gerrit.SearchTerm
func (_e *GerritInterface_Expecter) Search(context1 interface{}, n interface{}, b interface{}, searchTerms ...interface{}) *GerritInterface_Search_Call {
	return &GerritInterface_Search_Call{Call: _e.mock.On("Search",
		append([]interface{}{context1, n, b}, searchTerms...)...)}
}

func (_c *GerritInterface_Search_Call) Run(run func(context1 context.Context, n int, b bool, searchTerms ...*gerrit.SearchTerm)) *GerritInterface_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 []*gerrit.SearchTerm
		variadicArgs := make([]*gerrit.SearchTerm, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*gerrit.SearchTerm)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *GerritInterface_Search_Call) Return(changeInfos []*gerrit.ChangeInfo, err error) *GerritInterface_Search_Call {
	_c.Call.Return(changeInfos, err)
	return _c
}

func (_c *GerritInterface_Search_Call) RunAndReturn(run func(context1 context.Context, n int, b bool, searchTerms ...*gerrit.SearchTerm) ([]*gerrit.ChangeInfo, error)) *GerritInterface_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SelfApprove provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SelfApprove(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for SelfApprove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SelfApprove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelfApprove'
type GerritInterface_SelfApprove_Call struct {
	*mock.Call
}

// SelfApprove is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) SelfApprove(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_SelfApprove_Call {
	return &GerritInterface_SelfApprove_Call{Call: _e.mock.On("SelfApprove", context1, changeInfo, s)}
}

func (_c *GerritInterface_SelfApprove_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_SelfApprove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_SelfApprove_Call) Return(err error) *GerritInterface_SelfApprove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SelfApprove_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_SelfApprove_Call {
	_c.Call.Return(run)
	return _c
}

// SendToCQ provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SendToCQ(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for SendToCQ")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SendToCQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToCQ'
type GerritInterface_SendToCQ_Call struct {
	*mock.Call
}

// SendToCQ is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) SendToCQ(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_SendToCQ_Call {
	return &GerritInterface_SendToCQ_Call{Call: _e.mock.On("SendToCQ", context1, changeInfo, s)}
}

func (_c *GerritInterface_SendToCQ_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_SendToCQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_SendToCQ_Call) Return(err error) *GerritInterface_SendToCQ_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SendToCQ_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_SendToCQ_Call {
	_c.Call.Return(run)
	return _c
}

// SendToDryRun provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SendToDryRun(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for SendToDryRun")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SendToDryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToDryRun'
type GerritInterface_SendToDryRun_Call struct {
	*mock.Call
}

// SendToDryRun is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) SendToDryRun(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_SendToDryRun_Call {
	return &GerritInterface_SendToDryRun_Call{Call: _e.mock.On("SendToDryRun", context1, changeInfo, s)}
}

func (_c *GerritInterface_SendToDryRun_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_SendToDryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_SendToDryRun_Call) Return(err error) *GerritInterface_SendToDryRun_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SendToDryRun_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_SendToDryRun_Call {
	_c.Call.Return(run)
	return _c
}

// SetCommitMessage provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SetCommitMessage(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error {
	ret := _mock.Called(context1, changeInfo, s)

	if len(ret) == 0 {
		panic("no return value specified for SetCommitMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string) error); ok {
		r0 = returnFunc(context1, changeInfo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SetCommitMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCommitMessage'
type GerritInterface_SetCommitMessage_Call struct {
	*mock.Call
}

// SetCommitMessage is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
func (_e *GerritInterface_Expecter) SetCommitMessage(context1 interface{}, changeInfo interface{}, s interface{}) *GerritInterface_SetCommitMessage_Call {
	return &GerritInterface_SetCommitMessage_Call{Call: _e.mock.On("SetCommitMessage", context1, changeInfo, s)}
}

func (_c *GerritInterface_SetCommitMessage_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string)) *GerritInterface_SetCommitMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_SetCommitMessage_Call) Return(err error) *GerritInterface_SetCommitMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SetCommitMessage_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string) error) *GerritInterface_SetCommitMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadyForReview provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SetReadyForReview(context1 context.Context, changeInfo *gerrit.ChangeInfo) error {
	ret := _mock.Called(context1, changeInfo)

	if len(ret) == 0 {
		panic("no return value specified for SetReadyForReview")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo) error); ok {
		r0 = returnFunc(context1, changeInfo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SetReadyForReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadyForReview'
type GerritInterface_SetReadyForReview_Call struct {
	*mock.Call
}

// SetReadyForReview is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
func (_e *GerritInterface_Expecter) SetReadyForReview(context1 interface{}, changeInfo interface{}) *GerritInterface_SetReadyForReview_Call {
	return &GerritInterface_SetReadyForReview_Call{Call: _e.mock.On("SetReadyForReview", context1, changeInfo)}
}

func (_c *GerritInterface_SetReadyForReview_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo)) *GerritInterface_SetReadyForReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_SetReadyForReview_Call) Return(err error) *GerritInterface_SetReadyForReview_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SetReadyForReview_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo) error) *GerritInterface_SetReadyForReview_Call {
	_c.Call.Return(run)
	return _c
}

// SetReview provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SetReview(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, stringToInt map[string]int, strings []string, notifyOption gerrit.NotifyOption, notifyDetails gerrit.NotifyDetails, s1 string, n int, attentionSetInputs []*gerrit.AttentionSetInput) error {
	ret := _mock.Called(context1, changeInfo, s, stringToInt, strings, notifyOption, notifyDetails, s1, n, attentionSetInputs)

	if len(ret) == 0 {
		panic("no return value specified for SetReview")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, string, map[string]int, []string, gerrit.NotifyOption, gerrit.NotifyDetails, string, int, []*gerrit.AttentionSetInput) error); ok {
		r0 = returnFunc(context1, changeInfo, s, stringToInt, strings, notifyOption, notifyDetails, s1, n, attentionSetInputs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SetReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReview'
type GerritInterface_SetReview_Call struct {
	*mock.Call
}

// SetReview is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
//   - s string
//   - stringToInt map[string]int
//   - strings []string
//   - notifyOption gerrit.NotifyOption
//   - notifyDetails gerrit.NotifyDetails
//   - s1 string
//   - n int
//   - attentionSetInputs []*gerrit.AttentionSetInput
func (_e *GerritInterface_Expecter) SetReview(context1 interface{}, changeInfo interface{}, s interface{}, stringToInt interface{}, strings interface{}, notifyOption interface{}, notifyDetails interface{}, s1 interface{}, n interface{}, attentionSetInputs interface{}) *GerritInterface_SetReview_Call {
	return &GerritInterface_SetReview_Call{Call: _e.mock.On("SetReview", context1, changeInfo, s, stringToInt, strings, notifyOption, notifyDetails, s1, n, attentionSetInputs)}
}

func (_c *GerritInterface_SetReview_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, stringToInt map[string]int, strings []string, notifyOption gerrit.NotifyOption, notifyDetails gerrit.NotifyDetails, s1 string, n int, attentionSetInputs []*gerrit.AttentionSetInput)) *GerritInterface_SetReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 map[string]int
		if args[3] != nil {
			arg3 = args[3].(map[string]int)
		}
		var arg4 []string
		if args[4] != nil {
			arg4 = args[4].([]string)
		}
		var arg5 gerrit.NotifyOption
		if args[5] != nil {
			arg5 = args[5].(gerrit.NotifyOption)
		}
		var arg6 gerrit.NotifyDetails
		if args[6] != nil {
			arg6 = args[6].(gerrit.NotifyDetails)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 int
		if args[8] != nil {
			arg8 = args[8].(int)
		}
		var arg9 []*gerrit.AttentionSetInput
		if args[9] != nil {
			arg9 = args[9].([]*gerrit.AttentionSetInput)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
		)
	})
	return _c
}

func (_c *GerritInterface_SetReview_Call) Return(err error) *GerritInterface_SetReview_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SetReview_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo, s string, stringToInt map[string]int, strings []string, notifyOption gerrit.NotifyOption, notifyDetails gerrit.NotifyDetails, s1 string, n int, attentionSetInputs []*gerrit.AttentionSetInput) error) *GerritInterface_SetReview_Call {
	_c.Call.Return(run)
	return _c
}

// SetTopic provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SetTopic(context1 context.Context, s string, n int64) error {
	ret := _mock.Called(context1, s, n)

	if len(ret) == 0 {
		panic("no return value specified for SetTopic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = returnFunc(context1, s, n)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_SetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTopic'
type GerritInterface_SetTopic_Call struct {
	*mock.Call
}

// SetTopic is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - n int64
func (_e *GerritInterface_Expecter) SetTopic(context1 interface{}, s interface{}, n interface{}) *GerritInterface_SetTopic_Call {
	return &GerritInterface_SetTopic_Call{Call: _e.mock.On("SetTopic", context1, s, n)}
}

func (_c *GerritInterface_SetTopic_Call) Run(run func(context1 context.Context, s string, n int64)) *GerritInterface_SetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GerritInterface_SetTopic_Call) Return(err error) *GerritInterface_SetTopic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_SetTopic_Call) RunAndReturn(run func(context1 context.Context, s string, n int64) error) *GerritInterface_SetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// SetTraceIDPrefix provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SetTraceIDPrefix(traceIdPrefix string) {
	_mock.Called(traceIdPrefix)
	return
}

// GerritInterface_SetTraceIDPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTraceIDPrefix'
type GerritInterface_SetTraceIDPrefix_Call struct {
	*mock.Call
}

// SetTraceIDPrefix is a helper method to define mock.On call
//   - traceIdPrefix string
func (_e *GerritInterface_Expecter) SetTraceIDPrefix(traceIdPrefix interface{}) *GerritInterface_SetTraceIDPrefix_Call {
	return &GerritInterface_SetTraceIDPrefix_Call{Call: _e.mock.On("SetTraceIDPrefix", traceIdPrefix)}
}

func (_c *GerritInterface_SetTraceIDPrefix_Call) Run(run func(traceIdPrefix string)) *GerritInterface_SetTraceIDPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GerritInterface_SetTraceIDPrefix_Call) Return() *GerritInterface_SetTraceIDPrefix_Call {
	_c.Call.Return()
	return _c
}

func (_c *GerritInterface_SetTraceIDPrefix_Call) RunAndReturn(run func(traceIdPrefix string)) *GerritInterface_SetTraceIDPrefix_Call {
	_c.Run(run)
	return _c
}

// Submit provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Submit(context1 context.Context, changeInfo *gerrit.ChangeInfo) error {
	ret := _mock.Called(context1, changeInfo)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo) error); ok {
		r0 = returnFunc(context1, changeInfo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GerritInterface_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type GerritInterface_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
func (_e *GerritInterface_Expecter) Submit(context1 interface{}, changeInfo interface{}) *GerritInterface_Submit_Call {
	return &GerritInterface_Submit_Call{Call: _e.mock.On("Submit", context1, changeInfo)}
}

func (_c *GerritInterface_Submit_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo)) *GerritInterface_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_Submit_Call) Return(err error) *GerritInterface_Submit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GerritInterface_Submit_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo) error) *GerritInterface_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// SubmittedTogether provides a mock function for the type GerritInterface
func (_mock *GerritInterface) SubmittedTogether(context1 context.Context, changeInfo *gerrit.ChangeInfo) ([]*gerrit.ChangeInfo, int, error) {
	ret := _mock.Called(context1, changeInfo)

	if len(ret) == 0 {
		panic("no return value specified for SubmittedTogether")
	}

	var r0 []*gerrit.ChangeInfo
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo) ([]*gerrit.ChangeInfo, int, error)); ok {
		return returnFunc(context1, changeInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo) []*gerrit.ChangeInfo); ok {
		r0 = returnFunc(context1, changeInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gerrit.ChangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *gerrit.ChangeInfo) int); ok {
		r1 = returnFunc(context1, changeInfo)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *gerrit.ChangeInfo) error); ok {
		r2 = returnFunc(context1, changeInfo)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GerritInterface_SubmittedTogether_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmittedTogether'
type GerritInterface_SubmittedTogether_Call struct {
	*mock.Call
}

// SubmittedTogether is a helper method to define mock.On call
//   - context1 context.Context
//   - changeInfo *gerrit.ChangeInfo
func (_e *GerritInterface_Expecter) SubmittedTogether(context1 interface{}, changeInfo interface{}) *GerritInterface_SubmittedTogether_Call {
	return &GerritInterface_SubmittedTogether_Call{Call: _e.mock.On("SubmittedTogether", context1, changeInfo)}
}

func (_c *GerritInterface_SubmittedTogether_Call) Run(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo)) *GerritInterface_SubmittedTogether_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gerrit.ChangeInfo
		if args[1] != nil {
			arg1 = args[1].(*gerrit.ChangeInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GerritInterface_SubmittedTogether_Call) Return(changeInfos []*gerrit.ChangeInfo, n int, err error) *GerritInterface_SubmittedTogether_Call {
	_c.Call.Return(changeInfos, n, err)
	return _c
}

func (_c *GerritInterface_SubmittedTogether_Call) RunAndReturn(run func(context1 context.Context, changeInfo *gerrit.ChangeInfo) ([]*gerrit.ChangeInfo, int, error)) *GerritInterface_SubmittedTogether_Call {
	_c.Call.Return(run)
	return _c
}

// Url provides a mock function for the type GerritInterface
func (_mock *GerritInterface) Url(n int64) string {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Url")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(int64) string); ok {
		r0 = returnFunc(n)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// GerritInterface_Url_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Url'
type GerritInterface_Url_Call struct {
	*mock.Call
}

// Url is a helper method to define mock.On call
//   - n int64
func (_e *GerritInterface_Expecter) Url(n interface{}) *GerritInterface_Url_Call {
	return &GerritInterface_Url_Call{Call: _e.mock.On("Url", n)}
}

func (_c *GerritInterface_Url_Call) Run(run func(n int64)) *GerritInterface_Url_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GerritInterface_Url_Call) Return(s string) *GerritInterface_Url_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GerritInterface_Url_Call) RunAndReturn(run func(n int64) string) *GerritInterface_Url_Call {
	_c.Call.Return(run)
	return _c
}
