// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/go/monorail/v3"
)

// NewIMonorailService creates a new instance of IMonorailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMonorailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMonorailService {
	mock := &IMonorailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IMonorailService is an autogenerated mock type for the IMonorailService type
type IMonorailService struct {
	mock.Mock
}

type IMonorailService_Expecter struct {
	mock *mock.Mock
}

func (_m *IMonorailService) EXPECT() *IMonorailService_Expecter {
	return &IMonorailService_Expecter{mock: &_m.Mock}
}

// GetEmail provides a mock function for the type IMonorailService
func (_mock *IMonorailService) GetEmail(userName string) (*monorail.MonorailUser, error) {
	ret := _mock.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetEmail")
	}

	var r0 *monorail.MonorailUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*monorail.MonorailUser, error)); ok {
		return returnFunc(userName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *monorail.MonorailUser); ok {
		r0 = returnFunc(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monorail.MonorailUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMonorailService_GetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmail'
type IMonorailService_GetEmail_Call struct {
	*mock.Call
}

// GetEmail is a helper method to define mock.On call
//   - userName string
func (_e *IMonorailService_Expecter) GetEmail(userName interface{}) *IMonorailService_GetEmail_Call {
	return &IMonorailService_GetEmail_Call{Call: _e.mock.On("GetEmail", userName)}
}

func (_c *IMonorailService_GetEmail_Call) Run(run func(userName string)) *IMonorailService_GetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IMonorailService_GetEmail_Call) Return(monorailUser *monorail.MonorailUser, err error) *IMonorailService_GetEmail_Call {
	_c.Call.Return(monorailUser, err)
	return _c
}

func (_c *IMonorailService_GetEmail_Call) RunAndReturn(run func(userName string) (*monorail.MonorailUser, error)) *IMonorailService_GetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssue provides a mock function for the type IMonorailService
func (_mock *IMonorailService) GetIssue(issueName string) (*monorail.MonorailIssue, error) {
	ret := _mock.Called(issueName)

	if len(ret) == 0 {
		panic("no return value specified for GetIssue")
	}

	var r0 *monorail.MonorailIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*monorail.MonorailIssue, error)); ok {
		return returnFunc(issueName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *monorail.MonorailIssue); ok {
		r0 = returnFunc(issueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monorail.MonorailIssue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(issueName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMonorailService_GetIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssue'
type IMonorailService_GetIssue_Call struct {
	*mock.Call
}

// GetIssue is a helper method to define mock.On call
//   - issueName string
func (_e *IMonorailService_Expecter) GetIssue(issueName interface{}) *IMonorailService_GetIssue_Call {
	return &IMonorailService_GetIssue_Call{Call: _e.mock.On("GetIssue", issueName)}
}

func (_c *IMonorailService_GetIssue_Call) Run(run func(issueName string)) *IMonorailService_GetIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IMonorailService_GetIssue_Call) Return(monorailIssue *monorail.MonorailIssue, err error) *IMonorailService_GetIssue_Call {
	_c.Call.Return(monorailIssue, err)
	return _c
}

func (_c *IMonorailService_GetIssue_Call) RunAndReturn(run func(issueName string) (*monorail.MonorailIssue, error)) *IMonorailService_GetIssue_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueLink provides a mock function for the type IMonorailService
func (_mock *IMonorailService) GetIssueLink(instance string, id string) string {
	ret := _mock.Called(instance, id)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueLink")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(instance, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// IMonorailService_GetIssueLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueLink'
type IMonorailService_GetIssueLink_Call struct {
	*mock.Call
}

// GetIssueLink is a helper method to define mock.On call
//   - instance string
//   - id string
func (_e *IMonorailService_Expecter) GetIssueLink(instance interface{}, id interface{}) *IMonorailService_GetIssueLink_Call {
	return &IMonorailService_GetIssueLink_Call{Call: _e.mock.On("GetIssueLink", instance, id)}
}

func (_c *IMonorailService_GetIssueLink_Call) Run(run func(instance string, id string)) *IMonorailService_GetIssueLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IMonorailService_GetIssueLink_Call) Return(s string) *IMonorailService_GetIssueLink_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *IMonorailService_GetIssueLink_Call) RunAndReturn(run func(instance string, id string) string) *IMonorailService_GetIssueLink_Call {
	_c.Call.Return(run)
	return _c
}

// MakeIssue provides a mock function for the type IMonorailService
func (_mock *IMonorailService) MakeIssue(instance string, owner string, summary string, description string, status string, priority string, issueType string, labels []string, componentDefIDs []string, ccUsers []string) (*monorail.MonorailIssue, error) {
	ret := _mock.Called(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)

	if len(ret) == 0 {
		panic("no return value specified for MakeIssue")
	}

	var r0 *monorail.MonorailIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string, string, []string, []string, []string) (*monorail.MonorailIssue, error)); ok {
		return returnFunc(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string, string, []string, []string, []string) *monorail.MonorailIssue); ok {
		r0 = returnFunc(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monorail.MonorailIssue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string, string, string, []string, []string, []string) error); ok {
		r1 = returnFunc(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMonorailService_MakeIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeIssue'
type IMonorailService_MakeIssue_Call struct {
	*mock.Call
}

// MakeIssue is a helper method to define mock.On call
//   - instance string
//   - owner string
//   - summary string
//   - description string
//   - status string
//   - priority string
//   - issueType string
//   - labels []string
//   - componentDefIDs []string
//   - ccUsers []string
func (_e *IMonorailService_Expecter) MakeIssue(instance interface{}, owner interface{}, summary interface{}, description interface{}, status interface{}, priority interface{}, issueType interface{}, labels interface{}, componentDefIDs interface{}, ccUsers interface{}) *IMonorailService_MakeIssue_Call {
	return &IMonorailService_MakeIssue_Call{Call: _e.mock.On("MakeIssue", instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)}
}

func (_c *IMonorailService_MakeIssue_Call) Run(run func(instance string, owner string, summary string, description string, status string, priority string, issueType string, labels []string, componentDefIDs []string, ccUsers []string)) *IMonorailService_MakeIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		var arg7 []string
		if args[7] != nil {
			arg7 = args[7].([]string)
		}
		var arg8 []string
		if args[8] != nil {
			arg8 = args[8].([]string)
		}
		var arg9 []string
		if args[9] != nil {
			arg9 = args[9].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
		)
	})
	return _c
}

func (_c *IMonorailService_MakeIssue_Call) Return(monorailIssue *monorail.MonorailIssue, err error) *IMonorailService_MakeIssue_Call {
	_c.Call.Return(monorailIssue, err)
	return _c
}

func (_c *IMonorailService_MakeIssue_Call) RunAndReturn(run func(instance string, owner string, summary string, description string, status string, priority string, issueType string, labels []string, componentDefIDs []string, ccUsers []string) (*monorail.MonorailIssue, error)) *IMonorailService_MakeIssue_Call {
	_c.Call.Return(run)
	return _c
}

// SearchIssuesWithPagination provides a mock function for the type IMonorailService
func (_mock *IMonorailService) SearchIssuesWithPagination(instance string, query string) ([]monorail.MonorailIssue, error) {
	ret := _mock.Called(instance, query)

	if len(ret) == 0 {
		panic("no return value specified for SearchIssuesWithPagination")
	}

	var r0 []monorail.MonorailIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]monorail.MonorailIssue, error)); ok {
		return returnFunc(instance, query)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []monorail.MonorailIssue); ok {
		r0 = returnFunc(instance, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]monorail.MonorailIssue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(instance, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMonorailService_SearchIssuesWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchIssuesWithPagination'
type IMonorailService_SearchIssuesWithPagination_Call struct {
	*mock.Call
}

// SearchIssuesWithPagination is a helper method to define mock.On call
//   - instance string
//   - query string
func (_e *IMonorailService_Expecter) SearchIssuesWithPagination(instance interface{}, query interface{}) *IMonorailService_SearchIssuesWithPagination_Call {
	return &IMonorailService_SearchIssuesWithPagination_Call{Call: _e.mock.On("SearchIssuesWithPagination", instance, query)}
}

func (_c *IMonorailService_SearchIssuesWithPagination_Call) Run(run func(instance string, query string)) *IMonorailService_SearchIssuesWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IMonorailService_SearchIssuesWithPagination_Call) Return(monorailIssues []monorail.MonorailIssue, err error) *IMonorailService_SearchIssuesWithPagination_Call {
	_c.Call.Return(monorailIssues, err)
	return _c
}

func (_c *IMonorailService_SearchIssuesWithPagination_Call) RunAndReturn(run func(instance string, query string) ([]monorail.MonorailIssue, error)) *IMonorailService_SearchIssuesWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// SetOwnerAndAddComment provides a mock function for the type IMonorailService
func (_mock *IMonorailService) SetOwnerAndAddComment(instance string, owner string, comment string, id string) error {
	ret := _mock.Called(instance, owner, comment, id)

	if len(ret) == 0 {
		panic("no return value specified for SetOwnerAndAddComment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = returnFunc(instance, owner, comment, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IMonorailService_SetOwnerAndAddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOwnerAndAddComment'
type IMonorailService_SetOwnerAndAddComment_Call struct {
	*mock.Call
}

// SetOwnerAndAddComment is a helper method to define mock.On call
//   - instance string
//   - owner string
//   - comment string
//   - id string
func (_e *IMonorailService_Expecter) SetOwnerAndAddComment(instance interface{}, owner interface{}, comment interface{}, id interface{}) *IMonorailService_SetOwnerAndAddComment_Call {
	return &IMonorailService_SetOwnerAndAddComment_Call{Call: _e.mock.On("SetOwnerAndAddComment", instance, owner, comment, id)}
}

func (_c *IMonorailService_SetOwnerAndAddComment_Call) Run(run func(instance string, owner string, comment string, id string)) *IMonorailService_SetOwnerAndAddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *IMonorailService_SetOwnerAndAddComment_Call) Return(err error) *IMonorailService_SetOwnerAndAddComment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IMonorailService_SetOwnerAndAddComment_Call) RunAndReturn(run func(instance string, owner string, comment string, id string) error) *IMonorailService_SetOwnerAndAddComment_Call {
	_c.Call.Return(run)
	return _c
}
