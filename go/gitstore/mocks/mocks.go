// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"go.goldmine.build/go/gitstore"
	"go.goldmine.build/go/vcsinfo"
)

// NewGitStore creates a new instance of GitStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitStore {
	mock := &GitStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitStore is an autogenerated mock type for the GitStore type
type GitStore struct {
	mock.Mock
}

type GitStore_Expecter struct {
	mock *mock.Mock
}

func (_m *GitStore) EXPECT() *GitStore_Expecter {
	return &GitStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type GitStore
func (_mock *GitStore) Get(ctx context.Context, hashes []string) ([]*vcsinfo.LongCommit, error) {
	ret := _mock.Called(ctx, hashes)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*vcsinfo.LongCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]*vcsinfo.LongCommit, error)); ok {
		return returnFunc(ctx, hashes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []*vcsinfo.LongCommit); ok {
		r0 = returnFunc(ctx, hashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.LongCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, hashes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type GitStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes []string
func (_e *GitStore_Expecter) Get(ctx interface{}, hashes interface{}) *GitStore_Get_Call {
	return &GitStore_Get_Call{Call: _e.mock.On("Get", ctx, hashes)}
}

func (_c *GitStore_Get_Call) Run(run func(ctx context.Context, hashes []string)) *GitStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitStore_Get_Call) Return(longCommits []*vcsinfo.LongCommit, err error) *GitStore_Get_Call {
	_c.Call.Return(longCommits, err)
	return _c
}

func (_c *GitStore_Get_Call) RunAndReturn(run func(ctx context.Context, hashes []string) ([]*vcsinfo.LongCommit, error)) *GitStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranches provides a mock function for the type GitStore
func (_mock *GitStore) GetBranches(ctx context.Context) (map[string]*gitstore.BranchPointer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBranches")
	}

	var r0 map[string]*gitstore.BranchPointer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[string]*gitstore.BranchPointer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]*gitstore.BranchPointer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*gitstore.BranchPointer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitStore_GetBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranches'
type GitStore_GetBranches_Call struct {
	*mock.Call
}

// GetBranches is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GitStore_Expecter) GetBranches(ctx interface{}) *GitStore_GetBranches_Call {
	return &GitStore_GetBranches_Call{Call: _e.mock.On("GetBranches", ctx)}
}

func (_c *GitStore_GetBranches_Call) Run(run func(ctx context.Context)) *GitStore_GetBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GitStore_GetBranches_Call) Return(stringToBranchPointer map[string]*gitstore.BranchPointer, err error) *GitStore_GetBranches_Call {
	_c.Call.Return(stringToBranchPointer, err)
	return _c
}

func (_c *GitStore_GetBranches_Call) RunAndReturn(run func(ctx context.Context) (map[string]*gitstore.BranchPointer, error)) *GitStore_GetBranches_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type GitStore
func (_mock *GitStore) Put(ctx context.Context, commits []*vcsinfo.LongCommit) error {
	ret := _mock.Called(ctx, commits)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*vcsinfo.LongCommit) error); ok {
		r0 = returnFunc(ctx, commits)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GitStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type GitStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - commits []*vcsinfo.LongCommit
func (_e *GitStore_Expecter) Put(ctx interface{}, commits interface{}) *GitStore_Put_Call {
	return &GitStore_Put_Call{Call: _e.mock.On("Put", ctx, commits)}
}

func (_c *GitStore_Put_Call) Run(run func(ctx context.Context, commits []*vcsinfo.LongCommit)) *GitStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*vcsinfo.LongCommit
		if args[1] != nil {
			arg1 = args[1].([]*vcsinfo.LongCommit)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitStore_Put_Call) Return(err error) *GitStore_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GitStore_Put_Call) RunAndReturn(run func(ctx context.Context, commits []*vcsinfo.LongCommit) error) *GitStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutBranches provides a mock function for the type GitStore
func (_mock *GitStore) PutBranches(ctx context.Context, branches map[string]string) error {
	ret := _mock.Called(ctx, branches)

	if len(ret) == 0 {
		panic("no return value specified for PutBranches")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]string) error); ok {
		r0 = returnFunc(ctx, branches)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GitStore_PutBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBranches'
type GitStore_PutBranches_Call struct {
	*mock.Call
}

// PutBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - branches map[string]string
func (_e *GitStore_Expecter) PutBranches(ctx interface{}, branches interface{}) *GitStore_PutBranches_Call {
	return &GitStore_PutBranches_Call{Call: _e.mock.On("PutBranches", ctx, branches)}
}

func (_c *GitStore_PutBranches_Call) Run(run func(ctx context.Context, branches map[string]string)) *GitStore_PutBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitStore_PutBranches_Call) Return(err error) *GitStore_PutBranches_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GitStore_PutBranches_Call) RunAndReturn(run func(ctx context.Context, branches map[string]string) error) *GitStore_PutBranches_Call {
	_c.Call.Return(run)
	return _c
}

// RangeByTime provides a mock function for the type GitStore
func (_mock *GitStore) RangeByTime(ctx context.Context, start time.Time, end time.Time, branch string) ([]*vcsinfo.IndexCommit, error) {
	ret := _mock.Called(ctx, start, end, branch)

	if len(ret) == 0 {
		panic("no return value specified for RangeByTime")
	}

	var r0 []*vcsinfo.IndexCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, string) ([]*vcsinfo.IndexCommit, error)); ok {
		return returnFunc(ctx, start, end, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, string) []*vcsinfo.IndexCommit); ok {
		r0 = returnFunc(ctx, start, end, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.IndexCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, string) error); ok {
		r1 = returnFunc(ctx, start, end, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitStore_RangeByTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeByTime'
type GitStore_RangeByTime_Call struct {
	*mock.Call
}

// RangeByTime is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - branch string
func (_e *GitStore_Expecter) RangeByTime(ctx interface{}, start interface{}, end interface{}, branch interface{}) *GitStore_RangeByTime_Call {
	return &GitStore_RangeByTime_Call{Call: _e.mock.On("RangeByTime", ctx, start, end, branch)}
}

func (_c *GitStore_RangeByTime_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, branch string)) *GitStore_RangeByTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GitStore_RangeByTime_Call) Return(indexCommits []*vcsinfo.IndexCommit, err error) *GitStore_RangeByTime_Call {
	_c.Call.Return(indexCommits, err)
	return _c
}

func (_c *GitStore_RangeByTime_Call) RunAndReturn(run func(ctx context.Context, start time.Time, end time.Time, branch string) ([]*vcsinfo.IndexCommit, error)) *GitStore_RangeByTime_Call {
	_c.Call.Return(run)
	return _c
}

// RangeN provides a mock function for the type GitStore
func (_mock *GitStore) RangeN(ctx context.Context, startIndex int, endIndex int, branch string) ([]*vcsinfo.IndexCommit, error) {
	ret := _mock.Called(ctx, startIndex, endIndex, branch)

	if len(ret) == 0 {
		panic("no return value specified for RangeN")
	}

	var r0 []*vcsinfo.IndexCommit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, string) ([]*vcsinfo.IndexCommit, error)); ok {
		return returnFunc(ctx, startIndex, endIndex, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, string) []*vcsinfo.IndexCommit); ok {
		r0 = returnFunc(ctx, startIndex, endIndex, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vcsinfo.IndexCommit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = returnFunc(ctx, startIndex, endIndex, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitStore_RangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeN'
type GitStore_RangeN_Call struct {
	*mock.Call
}

// RangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - startIndex int
//   - endIndex int
//   - branch string
func (_e *GitStore_Expecter) RangeN(ctx interface{}, startIndex interface{}, endIndex interface{}, branch interface{}) *GitStore_RangeN_Call {
	return &GitStore_RangeN_Call{Call: _e.mock.On("RangeN", ctx, startIndex, endIndex, branch)}
}

func (_c *GitStore_RangeN_Call) Run(run func(ctx context.Context, startIndex int, endIndex int, branch string)) *GitStore_RangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GitStore_RangeN_Call) Return(indexCommits []*vcsinfo.IndexCommit, err error) *GitStore_RangeN_Call {
	_c.Call.Return(indexCommits, err)
	return _c
}

func (_c *GitStore_RangeN_Call) RunAndReturn(run func(ctx context.Context, startIndex int, endIndex int, branch string) ([]*vcsinfo.IndexCommit, error)) *GitStore_RangeN_Call {
	_c.Call.Return(run)
	return _c
}
