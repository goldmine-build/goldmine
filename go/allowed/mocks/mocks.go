// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAllow creates a new instance of Allow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAllow(t interface {
	mock.TestingT
	Cleanup(func())
}) *Allow {
	mock := &Allow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Allow is an autogenerated mock type for the Allow type
type Allow struct {
	mock.Mock
}

type Allow_Expecter struct {
	mock *mock.Mock
}

func (_m *Allow) EXPECT() *Allow_Expecter {
	return &Allow_Expecter{mock: &_m.Mock}
}

// Emails provides a mock function for the type Allow
func (_mock *Allow) Emails() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Emails")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// Allow_Emails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emails'
type Allow_Emails_Call struct {
	*mock.Call
}

// Emails is a helper method to define mock.On call
func (_e *Allow_Expecter) Emails() *Allow_Emails_Call {
	return &Allow_Emails_Call{Call: _e.mock.On("Emails")}
}

func (_c *Allow_Emails_Call) Run(run func()) *Allow_Emails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Allow_Emails_Call) Return(strings []string) *Allow_Emails_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *Allow_Emails_Call) RunAndReturn(run func() []string) *Allow_Emails_Call {
	_c.Call.Return(run)
	return _c
}

// Member provides a mock function for the type Allow
func (_mock *Allow) Member(email string) bool {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for Member")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Allow_Member_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Member'
type Allow_Member_Call struct {
	*mock.Call
}

// Member is a helper method to define mock.On call
//   - email string
func (_e *Allow_Expecter) Member(email interface{}) *Allow_Member_Call {
	return &Allow_Member_Call{Call: _e.mock.On("Member", email)}
}

func (_c *Allow_Member_Call) Run(run func(email string)) *Allow_Member_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Allow_Member_Call) Return(b bool) *Allow_Member_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Allow_Member_Call) RunAndReturn(run func(email string) bool) *Allow_Member_Call {
	_c.Call.Return(run)
	return _c
}
