// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, project, name
func (_m *Client) Create(ctx context.Context, project string, name string) error {
	ret := _m.Called(ctx, project, name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, project, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Client_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - name string
func (_e *Client_Expecter) Create(ctx interface{}, project interface{}, name interface{}) *Client_Create_Call {
	return &Client_Create_Call{Call: _e.mock.On("Create", ctx, project, name)}
}

func (_c *Client_Create_Call) Run(run func(ctx context.Context, project string, name string)) *Client_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_Create_Call) Return(_a0 error) *Client_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Create_Call) RunAndReturn(run func(context.Context, string, string) error) *Client_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, project, _a2, version
func (_m *Client) Get(ctx context.Context, project string, _a2 string, version string) (string, error) {
	ret := _m.Called(ctx, project, _a2, version)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, project, _a2, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, project, _a2, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, project, _a2, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Client_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - _a2 string
//   - version string
func (_e *Client_Expecter) Get(ctx interface{}, project interface{}, _a2 interface{}, version interface{}) *Client_Get_Call {
	return &Client_Get_Call{Call: _e.mock.On("Get", ctx, project, _a2, version)}
}

func (_c *Client_Get_Call) Run(run func(ctx context.Context, project string, _a2 string, version string)) *Client_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_Get_Call) Return(_a0 string, _a1 error) *Client_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Get_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *Client_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GrantAccess provides a mock function with given fields: ctx, project, name, serviceAccount
func (_m *Client) GrantAccess(ctx context.Context, project string, name string, serviceAccount string) error {
	ret := _m.Called(ctx, project, name, serviceAccount)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, project, name, serviceAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_GrantAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantAccess'
type Client_GrantAccess_Call struct {
	*mock.Call
}

// GrantAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - name string
//   - serviceAccount string
func (_e *Client_Expecter) GrantAccess(ctx interface{}, project interface{}, name interface{}, serviceAccount interface{}) *Client_GrantAccess_Call {
	return &Client_GrantAccess_Call{Call: _e.mock.On("GrantAccess", ctx, project, name, serviceAccount)}
}

func (_c *Client_GrantAccess_Call) Run(run func(ctx context.Context, project string, name string, serviceAccount string)) *Client_GrantAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_GrantAccess_Call) Return(_a0 error) *Client_GrantAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GrantAccess_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Client_GrantAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccess provides a mock function with given fields: ctx, project, name, serviceAccount
func (_m *Client) RevokeAccess(ctx context.Context, project string, name string, serviceAccount string) error {
	ret := _m.Called(ctx, project, name, serviceAccount)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, project, name, serviceAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_RevokeAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccess'
type Client_RevokeAccess_Call struct {
	*mock.Call
}

// RevokeAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - name string
//   - serviceAccount string
func (_e *Client_Expecter) RevokeAccess(ctx interface{}, project interface{}, name interface{}, serviceAccount interface{}) *Client_RevokeAccess_Call {
	return &Client_RevokeAccess_Call{Call: _e.mock.On("RevokeAccess", ctx, project, name, serviceAccount)}
}

func (_c *Client_RevokeAccess_Call) Run(run func(ctx context.Context, project string, name string, serviceAccount string)) *Client_RevokeAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_RevokeAccess_Call) Return(_a0 error) *Client_RevokeAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_RevokeAccess_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Client_RevokeAccess_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, project, name, value
func (_m *Client) Update(ctx context.Context, project string, name string, value string) (string, error) {
	ret := _m.Called(ctx, project, name, value)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, project, name, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, project, name, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, project, name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Client_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - name string
//   - value string
func (_e *Client_Expecter) Update(ctx interface{}, project interface{}, name interface{}, value interface{}) *Client_Update_Call {
	return &Client_Update_Call{Call: _e.mock.On("Update", ctx, project, name, value)}
}

func (_c *Client_Update_Call) Run(run func(ctx context.Context, project string, name string, value string)) *Client_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_Update_Call) Return(_a0 string, _a1 error) *Client_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Update_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *Client_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
