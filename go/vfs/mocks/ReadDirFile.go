// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// ReadDirFile is an autogenerated mock type for the ReadDirFile type
type ReadDirFile struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *ReadDirFile) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, buf
func (_m *ReadDirFile) Read(ctx context.Context, buf []byte) (int, error) {
	ret := _m.Called(ctx, buf)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, []byte) int); ok {
		r0 = rf(ctx, buf)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDir provides a mock function with given fields: ctx, n
func (_m *ReadDirFile) ReadDir(ctx context.Context, n int) ([]os.FileInfo, error) {
	ret := _m.Called(ctx, n)

	var r0 []os.FileInfo
	if rf, ok := ret.Get(0).(func(context.Context, int) []os.FileInfo); ok {
		r0 = rf(ctx, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stat provides a mock function with given fields: ctx
func (_m *ReadDirFile) Stat(ctx context.Context) (os.FileInfo, error) {
	ret := _m.Called(ctx)

	var r0 os.FileInfo
	if rf, ok := ret.Get(0).(func(context.Context) os.FileInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
