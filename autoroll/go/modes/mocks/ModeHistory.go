// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	modes "go.skia.org/infra/autoroll/go/modes"
)

// ModeHistory is an autogenerated mock type for the ModeHistory type
type ModeHistory struct {
	mock.Mock
}

type ModeHistory_Expecter struct {
	mock *mock.Mock
}

func (_m *ModeHistory) EXPECT() *ModeHistory_Expecter {
	return &ModeHistory_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, mode, user, message
func (_m *ModeHistory) Add(ctx context.Context, mode string, user string, message string) error {
	ret := _m.Called(ctx, mode, user, message)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, mode, user, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModeHistory_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type ModeHistory_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - mode string
//   - user string
//   - message string
func (_e *ModeHistory_Expecter) Add(ctx interface{}, mode interface{}, user interface{}, message interface{}) *ModeHistory_Add_Call {
	return &ModeHistory_Add_Call{Call: _e.mock.On("Add", ctx, mode, user, message)}
}

func (_c *ModeHistory_Add_Call) Run(run func(ctx context.Context, mode string, user string, message string)) *ModeHistory_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ModeHistory_Add_Call) Return(_a0 error) *ModeHistory_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModeHistory_Add_Call) RunAndReturn(run func(context.Context, string, string, string) error) *ModeHistory_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentMode provides a mock function with given fields:
func (_m *ModeHistory) CurrentMode() *modes.ModeChange {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentMode")
	}

	var r0 *modes.ModeChange
	if rf, ok := ret.Get(0).(func() *modes.ModeChange); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modes.ModeChange)
		}
	}

	return r0
}

// ModeHistory_CurrentMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentMode'
type ModeHistory_CurrentMode_Call struct {
	*mock.Call
}

// CurrentMode is a helper method to define mock.On call
func (_e *ModeHistory_Expecter) CurrentMode() *ModeHistory_CurrentMode_Call {
	return &ModeHistory_CurrentMode_Call{Call: _e.mock.On("CurrentMode")}
}

func (_c *ModeHistory_CurrentMode_Call) Run(run func()) *ModeHistory_CurrentMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModeHistory_CurrentMode_Call) Return(_a0 *modes.ModeChange) *ModeHistory_CurrentMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModeHistory_CurrentMode_Call) RunAndReturn(run func() *modes.ModeChange) *ModeHistory_CurrentMode_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function with given fields: ctx, offset
func (_m *ModeHistory) GetHistory(ctx context.Context, offset int) ([]*modes.ModeChange, int, error) {
	ret := _m.Called(ctx, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 []*modes.ModeChange
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*modes.ModeChange, int, error)); ok {
		return rf(ctx, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*modes.ModeChange); ok {
		r0 = rf(ctx, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modes.ModeChange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ModeHistory_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type ModeHistory_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
func (_e *ModeHistory_Expecter) GetHistory(ctx interface{}, offset interface{}) *ModeHistory_GetHistory_Call {
	return &ModeHistory_GetHistory_Call{Call: _e.mock.On("GetHistory", ctx, offset)}
}

func (_c *ModeHistory_GetHistory_Call) Run(run func(ctx context.Context, offset int)) *ModeHistory_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ModeHistory_GetHistory_Call) Return(_a0 []*modes.ModeChange, _a1 int, _a2 error) *ModeHistory_GetHistory_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ModeHistory_GetHistory_Call) RunAndReturn(run func(context.Context, int) ([]*modes.ModeChange, int, error)) *ModeHistory_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx
func (_m *ModeHistory) Update(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModeHistory_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ModeHistory_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ModeHistory_Expecter) Update(ctx interface{}) *ModeHistory_Update_Call {
	return &ModeHistory_Update_Call{Call: _e.mock.On("Update", ctx)}
}

func (_c *ModeHistory_Update_Call) Run(run func(ctx context.Context)) *ModeHistory_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ModeHistory_Update_Call) Return(_a0 error) *ModeHistory_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModeHistory_Update_Call) RunAndReturn(run func(context.Context) error) *ModeHistory_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewModeHistory creates a new instance of ModeHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModeHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModeHistory {
	mock := &ModeHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
