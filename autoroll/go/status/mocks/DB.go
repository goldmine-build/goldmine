// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	status "go.skia.org/infra/autoroll/go/status"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DB_Expecter) Close() *DB_Close_Call {
	return &DB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DB_Close_Call) Run(run func()) *DB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_Close_Call) Return(_a0 error) *DB_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Close_Call) RunAndReturn(run func() error) *DB_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, rollerName
func (_m *DB) Get(ctx context.Context, rollerName string) (*status.AutoRollStatus, error) {
	ret := _m.Called(ctx, rollerName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *status.AutoRollStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*status.AutoRollStatus, error)); ok {
		return rf(ctx, rollerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *status.AutoRollStatus); ok {
		r0 = rf(ctx, rollerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.AutoRollStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rollerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DB_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - rollerName string
func (_e *DB_Expecter) Get(ctx interface{}, rollerName interface{}) *DB_Get_Call {
	return &DB_Get_Call{Call: _e.mock.On("Get", ctx, rollerName)}
}

func (_c *DB_Get_Call) Run(run func(ctx context.Context, rollerName string)) *DB_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_Get_Call) Return(_a0 *status.AutoRollStatus, _a1 error) *DB_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_Get_Call) RunAndReturn(run func(context.Context, string) (*status.AutoRollStatus, error)) *DB_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, rollerName, st
func (_m *DB) Set(ctx context.Context, rollerName string, st *status.AutoRollStatus) error {
	ret := _m.Called(ctx, rollerName, st)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *status.AutoRollStatus) error); ok {
		r0 = rf(ctx, rollerName, st)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type DB_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - rollerName string
//   - st *status.AutoRollStatus
func (_e *DB_Expecter) Set(ctx interface{}, rollerName interface{}, st interface{}) *DB_Set_Call {
	return &DB_Set_Call{Call: _e.mock.On("Set", ctx, rollerName, st)}
}

func (_c *DB_Set_Call) Run(run func(ctx context.Context, rollerName string, st *status.AutoRollStatus)) *DB_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*status.AutoRollStatus))
	})
	return _c
}

func (_c *DB_Set_Call) Return(_a0 error) *DB_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Set_Call) RunAndReturn(run func(context.Context, string, *status.AutoRollStatus) error) *DB_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
