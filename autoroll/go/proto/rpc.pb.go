// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.3.0
// source: rpc.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Mode describes the valid operating modes of an autoroller.
// These must be kept in sync with autoroll/go/modes/modes.go.
type Mode int32

const (
	// RUNNING is the typical operating mode of the autoroller. It will upload and
	// land CLs as new revisions appear in the Child.
	Mode_RUNNING Mode = 0
	// STOPPED prevents the autoroller from uploading any CLs.
	Mode_STOPPED Mode = 1
	// DRY_RUN is similar to RUNNING but does not land the roll CLs after the
	// commit queue finishes. Instead, the active roll is left open until new
	// revisions appear in the child, at which point the roll is closed and a new
	// one is uploaded.
	Mode_DRY_RUN Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "RUNNING",
		1: "STOPPED",
		2: "DRY_RUN",
	}
	Mode_value = map[string]int32{
		"RUNNING": 0,
		"STOPPED": 1,
		"DRY_RUN": 2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

// Strategy describes the valid strategies for choosing the next revision to
// roll. These must be kept in sync with autoroll/go/strategy/strategies.go.
type Strategy int32

const (
	// BATCH indicates that all not-yet-rolled revisions should be rolled in a
	// single CL.
	Strategy_BATCH Strategy = 0
	// N_BATCH is similar to BATCH but puts a limit on the number of revisions in
	// a single CL.
	Strategy_N_BATCH Strategy = 1
	// SINGLE indicates that a single revision is rolled in each CL.
	Strategy_SINGLE Strategy = 2
)

// Enum value maps for Strategy.
var (
	Strategy_name = map[int32]string{
		0: "BATCH",
		1: "N_BATCH",
		2: "SINGLE",
	}
	Strategy_value = map[string]int32{
		"BATCH":   0,
		"N_BATCH": 1,
		"SINGLE":  2,
	}
)

func (x Strategy) Enum() *Strategy {
	p := new(Strategy)
	*p = x
	return p
}

func (x Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[1].Descriptor()
}

func (Strategy) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[1]
}

func (x Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Strategy.Descriptor instead.
func (Strategy) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

// PreUploadStep lists the known pre-upload steps which may be run before roll
// CLs are uploaded. These must be kept in sync with
// go/repo_manager/parent/pre_upload_steps.go.
type PreUploadStep int32

const (
	PreUploadStep_ANGLE_CODE_GENERATION               PreUploadStep = 0
	PreUploadStep_ANGLE_GN_TO_BP                      PreUploadStep = 1
	PreUploadStep_ANGLE_ROLL_CHROMIUM                 PreUploadStep = 2
	PreUploadStep_GO_GENERATE_CIPD                    PreUploadStep = 3
	PreUploadStep_FLUTTER_LICENSE_SCRIPTS             PreUploadStep = 4
	PreUploadStep_FLUTTER_LICENSE_SCRIPTS_FOR_DART    PreUploadStep = 5
	PreUploadStep_FLUTTER_LICENSE_SCRIPTS_FOR_FUCHSIA PreUploadStep = 6
	PreUploadStep_SKIA_GN_TO_BP                       PreUploadStep = 7
	PreUploadStep_TRAIN_INFRA                         PreUploadStep = 8
	PreUploadStep_UPDATE_FLUTTER_DEPS_FOR_DART        PreUploadStep = 9
)

// Enum value maps for PreUploadStep.
var (
	PreUploadStep_name = map[int32]string{
		0: "ANGLE_CODE_GENERATION",
		1: "ANGLE_GN_TO_BP",
		2: "ANGLE_ROLL_CHROMIUM",
		3: "GO_GENERATE_CIPD",
		4: "FLUTTER_LICENSE_SCRIPTS",
		5: "FLUTTER_LICENSE_SCRIPTS_FOR_DART",
		6: "FLUTTER_LICENSE_SCRIPTS_FOR_FUCHSIA",
		7: "SKIA_GN_TO_BP",
		8: "TRAIN_INFRA",
		9: "UPDATE_FLUTTER_DEPS_FOR_DART",
	}
	PreUploadStep_value = map[string]int32{
		"ANGLE_CODE_GENERATION":               0,
		"ANGLE_GN_TO_BP":                      1,
		"ANGLE_ROLL_CHROMIUM":                 2,
		"GO_GENERATE_CIPD":                    3,
		"FLUTTER_LICENSE_SCRIPTS":             4,
		"FLUTTER_LICENSE_SCRIPTS_FOR_DART":    5,
		"FLUTTER_LICENSE_SCRIPTS_FOR_FUCHSIA": 6,
		"SKIA_GN_TO_BP":                       7,
		"TRAIN_INFRA":                         8,
		"UPDATE_FLUTTER_DEPS_FOR_DART":        9,
	}
)

func (x PreUploadStep) Enum() *PreUploadStep {
	p := new(PreUploadStep)
	*p = x
	return p
}

func (x PreUploadStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreUploadStep) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[2].Descriptor()
}

func (PreUploadStep) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[2]
}

func (x PreUploadStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreUploadStep.Descriptor instead.
func (PreUploadStep) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

// Result describes the possible results for a TryJob.
// These must be kept in sync with go/autoroll/autoroll.go.
type TryJob_Result int32

const (
	// UNKNOWN indicates that the result of the TryJob is unknown, ie. it has
	// not yet finished.
	TryJob_UNKNOWN TryJob_Result = 0
	// SUCCESS indicates that that TryJob completed successfully.
	TryJob_SUCCESS TryJob_Result = 1
	// FAILURE indicates that that TryJob failed.
	TryJob_FAILURE TryJob_Result = 2
	// CANCELED indicates that that TryJob was canceled.
	TryJob_CANCELED TryJob_Result = 3
)

// Enum value maps for TryJob_Result.
var (
	TryJob_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "FAILURE",
		3: "CANCELED",
	}
	TryJob_Result_value = map[string]int32{
		"UNKNOWN":  0,
		"SUCCESS":  1,
		"FAILURE":  2,
		"CANCELED": 3,
	}
)

func (x TryJob_Result) Enum() *TryJob_Result {
	p := new(TryJob_Result)
	*p = x
	return p
}

func (x TryJob_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TryJob_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[3].Descriptor()
}

func (TryJob_Result) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[3]
}

func (x TryJob_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TryJob_Result.Descriptor instead.
func (TryJob_Result) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1, 0}
}

// Status describes the lifecycle states of a TryJob.
// These must be kept in sync with go/autoroll/autoroll.go.
type TryJob_Status int32

const (
	// SCHEDULED indicates that the TryJob has been scheduled but has not yet
	// started.
	TryJob_SCHEDULED TryJob_Status = 0
	// STARTED indicates that the TryJob is currently running.
	TryJob_STARTED TryJob_Status = 1
	// COMPLETED indicates that the TryJob is finishes.
	TryJob_COMPLETED TryJob_Status = 2
)

// Enum value maps for TryJob_Status.
var (
	TryJob_Status_name = map[int32]string{
		0: "SCHEDULED",
		1: "STARTED",
		2: "COMPLETED",
	}
	TryJob_Status_value = map[string]int32{
		"SCHEDULED": 0,
		"STARTED":   1,
		"COMPLETED": 2,
	}
)

func (x TryJob_Status) Enum() *TryJob_Status {
	p := new(TryJob_Status)
	*p = x
	return p
}

func (x TryJob_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TryJob_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[4].Descriptor()
}

func (TryJob_Status) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[4]
}

func (x TryJob_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TryJob_Status.Descriptor instead.
func (TryJob_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1, 1}
}

// Result describes the possible results for an AutoRollCL.
type AutoRollCL_Result int32

const (
	// IN_PROGRESS indicates that the commit queue is still running for this
	// AutoRollCL.
	AutoRollCL_IN_PROGRESS AutoRollCL_Result = 0
	// SUCCESS indicates that this AutoRollCL landed successfully.
	AutoRollCL_SUCCESS AutoRollCL_Result = 1
	// FAILURE indicates that the commit queue failed for  this AutoRollCL.
	AutoRollCL_FAILURE AutoRollCL_Result = 2
	// DRY_RUN_IN_PROGRESS indicates that the commit queue dry run is still
	// running for this AutoRollCL.
	AutoRollCL_DRY_RUN_IN_PROGRESS AutoRollCL_Result = 3
	// DRY_RUN_SUCCESS indicates that the commit queue dry run succeeded for
	// this AutoRollCL.
	AutoRollCL_DRY_RUN_SUCCESS AutoRollCL_Result = 4
	// DRY_RUN_FAILURE indicates that the commit queue dry run failed for this
	// AutoRollCL.
	AutoRollCL_DRY_RUN_FAILURE AutoRollCL_Result = 5
)

// Enum value maps for AutoRollCL_Result.
var (
	AutoRollCL_Result_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "SUCCESS",
		2: "FAILURE",
		3: "DRY_RUN_IN_PROGRESS",
		4: "DRY_RUN_SUCCESS",
		5: "DRY_RUN_FAILURE",
	}
	AutoRollCL_Result_value = map[string]int32{
		"IN_PROGRESS":         0,
		"SUCCESS":             1,
		"FAILURE":             2,
		"DRY_RUN_IN_PROGRESS": 3,
		"DRY_RUN_SUCCESS":     4,
		"DRY_RUN_FAILURE":     5,
	}
)

func (x AutoRollCL_Result) Enum() *AutoRollCL_Result {
	p := new(AutoRollCL_Result)
	*p = x
	return p
}

func (x AutoRollCL_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoRollCL_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[5].Descriptor()
}

func (AutoRollCL_Result) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[5]
}

func (x AutoRollCL_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoRollCL_Result.Descriptor instead.
func (AutoRollCL_Result) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2, 0}
}

// Result describes the possible results for a manual roll.
// These must be kept in sync with autoroll/go/manual/db.go.
type ManualRoll_Result int32

const (
	// UNKNOWN indicates that the result of the ManualRoll is unknown, ie. it
	// has not yet finished.
	ManualRoll_UNKNOWN ManualRoll_Result = 0
	// FAILURE indicates that the ManualRoll has failed.
	ManualRoll_FAILURE ManualRoll_Result = 1
	// SUCCESS indicates that the ManualRoll landed successfully.
	ManualRoll_SUCCESS ManualRoll_Result = 2
)

// Enum value maps for ManualRoll_Result.
var (
	ManualRoll_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "FAILURE",
		2: "SUCCESS",
	}
	ManualRoll_Result_value = map[string]int32{
		"UNKNOWN": 0,
		"FAILURE": 1,
		"SUCCESS": 2,
	}
)

func (x ManualRoll_Result) Enum() *ManualRoll_Result {
	p := new(ManualRoll_Result)
	*p = x
	return p
}

func (x ManualRoll_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualRoll_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[6].Descriptor()
}

func (ManualRoll_Result) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[6]
}

func (x ManualRoll_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualRoll_Result.Descriptor instead.
func (ManualRoll_Result) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7, 0}
}

// Status describes the lifecycle states of a manual roll.
// These must be kept in sync with autoroll/go/manual/db.go.
type ManualRoll_Status int32

const (
	// PENDING indicates that the ManualRoll has been requested but no CL has
	// been uploaded.
	ManualRoll_PENDING ManualRoll_Status = 0
	// STARTED indicates that a CL has been uploaded for this ManualRoll.
	ManualRoll_STARTED ManualRoll_Status = 1
	// COMPLETED indicates that the ManualRoll has finished and either landed
	// successfully or failed.
	ManualRoll_COMPLETED ManualRoll_Status = 2
)

// Enum value maps for ManualRoll_Status.
var (
	ManualRoll_Status_name = map[int32]string{
		0: "PENDING",
		1: "STARTED",
		2: "COMPLETED",
	}
	ManualRoll_Status_value = map[string]int32{
		"PENDING":   0,
		"STARTED":   1,
		"COMPLETED": 2,
	}
)

func (x ManualRoll_Status) Enum() *ManualRoll_Status {
	p := new(ManualRoll_Status)
	*p = x
	return p
}

func (x ManualRoll_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualRoll_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[7].Descriptor()
}

func (ManualRoll_Status) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[7]
}

func (x ManualRoll_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualRoll_Status.Descriptor instead.
func (ManualRoll_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7, 1}
}

// BuiltIn lists the built-in commit message templates.
type CommitMsgConfig_BuiltIn int32

const (
	// DEFAULT is the default commit message template.
	CommitMsgConfig_DEFAULT CommitMsgConfig_BuiltIn = 0
	// ANDROID is the commit message template used for Android rollers.
	CommitMsgConfig_ANDROID CommitMsgConfig_BuiltIn = 1
)

// Enum value maps for CommitMsgConfig_BuiltIn.
var (
	CommitMsgConfig_BuiltIn_name = map[int32]string{
		0: "DEFAULT",
		1: "ANDROID",
	}
	CommitMsgConfig_BuiltIn_value = map[string]int32{
		"DEFAULT": 0,
		"ANDROID": 1,
	}
)

func (x CommitMsgConfig_BuiltIn) Enum() *CommitMsgConfig_BuiltIn {
	p := new(CommitMsgConfig_BuiltIn)
	*p = x
	return p
}

func (x CommitMsgConfig_BuiltIn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitMsgConfig_BuiltIn) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[8].Descriptor()
}

func (CommitMsgConfig_BuiltIn) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[8]
}

func (x CommitMsgConfig_BuiltIn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitMsgConfig_BuiltIn.Descriptor instead.
func (CommitMsgConfig_BuiltIn) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{28, 0}
}

// Config lists the built-in Gerrit configs, named for the projects which
// use them.
type GerritConfig_Config int32

const (
	GerritConfig_ANDROID        GerritConfig_Config = 0
	GerritConfig_ANGLE          GerritConfig_Config = 1
	GerritConfig_CHROMIUM       GerritConfig_Config = 2
	GerritConfig_CHROMIUM_NO_CQ GerritConfig_Config = 3
	GerritConfig_LIBASSISTANT   GerritConfig_Config = 4
)

// Enum value maps for GerritConfig_Config.
var (
	GerritConfig_Config_name = map[int32]string{
		0: "ANDROID",
		1: "ANGLE",
		2: "CHROMIUM",
		3: "CHROMIUM_NO_CQ",
		4: "LIBASSISTANT",
	}
	GerritConfig_Config_value = map[string]int32{
		"ANDROID":        0,
		"ANGLE":          1,
		"CHROMIUM":       2,
		"CHROMIUM_NO_CQ": 3,
		"LIBASSISTANT":   4,
	}
)

func (x GerritConfig_Config) Enum() *GerritConfig_Config {
	p := new(GerritConfig_Config)
	*p = x
	return p
}

func (x GerritConfig_Config) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GerritConfig_Config) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[9].Descriptor()
}

func (GerritConfig_Config) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[9]
}

func (x GerritConfig_Config) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GerritConfig_Config.Descriptor instead.
func (GerritConfig_Config) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{29, 0}
}

// LogLevel categorizes messages similarly to log severity.
type NotifierConfig_LogLevel int32

const (
	NotifierConfig_SILENT  NotifierConfig_LogLevel = 0
	NotifierConfig_ERROR   NotifierConfig_LogLevel = 1
	NotifierConfig_WARNING NotifierConfig_LogLevel = 2
	NotifierConfig_INFO    NotifierConfig_LogLevel = 3
	NotifierConfig_DEBUG   NotifierConfig_LogLevel = 4
)

// Enum value maps for NotifierConfig_LogLevel.
var (
	NotifierConfig_LogLevel_name = map[int32]string{
		0: "SILENT",
		1: "ERROR",
		2: "WARNING",
		3: "INFO",
		4: "DEBUG",
	}
	NotifierConfig_LogLevel_value = map[string]int32{
		"SILENT":  0,
		"ERROR":   1,
		"WARNING": 2,
		"INFO":    3,
		"DEBUG":   4,
	}
)

func (x NotifierConfig_LogLevel) Enum() *NotifierConfig_LogLevel {
	p := new(NotifierConfig_LogLevel)
	*p = x
	return p
}

func (x NotifierConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifierConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[10].Descriptor()
}

func (NotifierConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[10]
}

func (x NotifierConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifierConfig_LogLevel.Descriptor instead.
func (NotifierConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{57, 0}
}

// MsgType categorizes notifications based on their type.
type NotifierConfig_MsgType int32

const (
	NotifierConfig_ISSUE_UPDATE         NotifierConfig_MsgType = 0
	NotifierConfig_LAST_N_FAILED        NotifierConfig_MsgType = 1
	NotifierConfig_MODE_CHANGE          NotifierConfig_MsgType = 2
	NotifierConfig_NEW_FAILURE          NotifierConfig_MsgType = 3
	NotifierConfig_NEW_SUCCESS          NotifierConfig_MsgType = 4
	NotifierConfig_ROLL_CREATION_FAILED NotifierConfig_MsgType = 5
	NotifierConfig_SAFETY_THROTTLE      NotifierConfig_MsgType = 6
	NotifierConfig_STRATEGY_CHANGE      NotifierConfig_MsgType = 7
	NotifierConfig_SUCCESS_THROTTLE     NotifierConfig_MsgType = 8
)

// Enum value maps for NotifierConfig_MsgType.
var (
	NotifierConfig_MsgType_name = map[int32]string{
		0: "ISSUE_UPDATE",
		1: "LAST_N_FAILED",
		2: "MODE_CHANGE",
		3: "NEW_FAILURE",
		4: "NEW_SUCCESS",
		5: "ROLL_CREATION_FAILED",
		6: "SAFETY_THROTTLE",
		7: "STRATEGY_CHANGE",
		8: "SUCCESS_THROTTLE",
	}
	NotifierConfig_MsgType_value = map[string]int32{
		"ISSUE_UPDATE":         0,
		"LAST_N_FAILED":        1,
		"MODE_CHANGE":          2,
		"NEW_FAILURE":          3,
		"NEW_SUCCESS":          4,
		"ROLL_CREATION_FAILED": 5,
		"SAFETY_THROTTLE":      6,
		"STRATEGY_CHANGE":      7,
		"SUCCESS_THROTTLE":     8,
	}
)

func (x NotifierConfig_MsgType) Enum() *NotifierConfig_MsgType {
	p := new(NotifierConfig_MsgType)
	*p = x
	return p
}

func (x NotifierConfig_MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifierConfig_MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[11].Descriptor()
}

func (NotifierConfig_MsgType) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[11]
}

func (x NotifierConfig_MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifierConfig_MsgType.Descriptor instead.
func (NotifierConfig_MsgType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{57, 1}
}

// AutoRollMiniStatus contains a subset of the information of AutoRollStatus.
type AutoRollMiniStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique ID for this roller.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// child_name is the display name of the child.
	ChildName string `protobuf:"bytes,2,opt,name=child_name,json=childName,proto3" json:"child_name,omitempty"`
	// parent_name is the display name of the parent.
	ParentName string `protobuf:"bytes,3,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	// mode is the currently-set operating mode of the roller.
	Mode Mode `protobuf:"varint,4,opt,name=mode,proto3,enum=autoroll.rpc.Mode" json:"mode,omitempty"`
	// current_roll_rev is the ID of the child revision which is being rolled in
	// the active roll CL.
	CurrentRollRev string `protobuf:"bytes,5,opt,name=current_roll_rev,json=currentRollRev,proto3" json:"current_roll_rev,omitempty"`
	// last_roll_rev is the ID of the child revision which is currently pinned by
	// the parent.
	LastRollRev string `protobuf:"bytes,6,opt,name=last_roll_rev,json=lastRollRev,proto3" json:"last_roll_rev,omitempty"`
	// num_failed is the number of consecutive roll failures.
	NumFailed int32 `protobuf:"varint,7,opt,name=num_failed,json=numFailed,proto3" json:"num_failed,omitempty"`
	// num_behind is the number of not-yet-rolled revisions.
	NumBehind int32 `protobuf:"varint,8,opt,name=num_behind,json=numBehind,proto3" json:"num_behind,omitempty"`
}

func (x *AutoRollMiniStatus) Reset() {
	*x = AutoRollMiniStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRollMiniStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRollMiniStatus) ProtoMessage() {}

func (x *AutoRollMiniStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRollMiniStatus.ProtoReflect.Descriptor instead.
func (*AutoRollMiniStatus) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *AutoRollMiniStatus) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *AutoRollMiniStatus) GetChildName() string {
	if x != nil {
		return x.ChildName
	}
	return ""
}

func (x *AutoRollMiniStatus) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *AutoRollMiniStatus) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_RUNNING
}

func (x *AutoRollMiniStatus) GetCurrentRollRev() string {
	if x != nil {
		return x.CurrentRollRev
	}
	return ""
}

func (x *AutoRollMiniStatus) GetLastRollRev() string {
	if x != nil {
		return x.LastRollRev
	}
	return ""
}

func (x *AutoRollMiniStatus) GetNumFailed() int32 {
	if x != nil {
		return x.NumFailed
	}
	return 0
}

func (x *AutoRollMiniStatus) GetNumBehind() int32 {
	if x != nil {
		return x.NumBehind
	}
	return 0
}

type TryJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the TryJob.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// status of the TryJob.
	Status TryJob_Status `protobuf:"varint,2,opt,name=status,proto3,enum=autoroll.rpc.TryJob_Status" json:"status,omitempty"`
	// result of the TryJob.
	Result TryJob_Result `protobuf:"varint,3,opt,name=result,proto3,enum=autoroll.rpc.TryJob_Result" json:"result,omitempty"`
	// url where more details can be found about the TryJob.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// category of the TryJob, eg. "cq".
	Category string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *TryJob) Reset() {
	*x = TryJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryJob) ProtoMessage() {}

func (x *TryJob) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryJob.ProtoReflect.Descriptor instead.
func (*TryJob) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *TryJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TryJob) GetStatus() TryJob_Status {
	if x != nil {
		return x.Status
	}
	return TryJob_SCHEDULED
}

func (x *TryJob) GetResult() TryJob_Result {
	if x != nil {
		return x.Result
	}
	return TryJob_UNKNOWN
}

func (x *TryJob) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TryJob) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// AutoRoll CL describes a CL uploaded by the autoroller.
type AutoRollCL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier for the CL.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// result of the AutoRollCL.
	Result AutoRollCL_Result `protobuf:"varint,2,opt,name=result,proto3,enum=autoroll.rpc.AutoRollCL_Result" json:"result,omitempty"`
	// subject line of the commit message of the AutoRollCL.
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// rolling_to is the ID of the revision being rolled.
	RollingTo string `protobuf:"bytes,4,opt,name=rolling_to,json=rollingTo,proto3" json:"rolling_to,omitempty"`
	// rolling_from is the ID of the currently-pinned revision.
	RollingFrom string `protobuf:"bytes,5,opt,name=rolling_from,json=rollingFrom,proto3" json:"rolling_from,omitempty"`
	// created is the timestamp at which the AutoRollCL was created.
	Created *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// created is the timestamp at which the AutoRollCL was last modified.
	Modified *timestamp.Timestamp `protobuf:"bytes,7,opt,name=modified,proto3" json:"modified,omitempty"`
	// try_jobs contains results of any try jobs for the AutoRollCL.
	TryJobs []*TryJob `protobuf:"bytes,8,rep,name=try_jobs,json=tryJobs,proto3" json:"try_jobs,omitempty"`
}

func (x *AutoRollCL) Reset() {
	*x = AutoRollCL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRollCL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRollCL) ProtoMessage() {}

func (x *AutoRollCL) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRollCL.ProtoReflect.Descriptor instead.
func (*AutoRollCL) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *AutoRollCL) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AutoRollCL) GetResult() AutoRollCL_Result {
	if x != nil {
		return x.Result
	}
	return AutoRollCL_IN_PROGRESS
}

func (x *AutoRollCL) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AutoRollCL) GetRollingTo() string {
	if x != nil {
		return x.RollingTo
	}
	return ""
}

func (x *AutoRollCL) GetRollingFrom() string {
	if x != nil {
		return x.RollingFrom
	}
	return ""
}

func (x *AutoRollCL) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AutoRollCL) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *AutoRollCL) GetTryJobs() []*TryJob {
	if x != nil {
		return x.TryJobs
	}
	return nil
}

// Revision describes a single revision in a given Child. This may be a Git
// commit, CIPD package instance, a file uploaded to GCS, etc.
type Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier for the Revision.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// display is a human-friendly display name for the Revision.
	Display string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	// description is a longer description of the Revision.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// time is the timestamp at which the Revision was created.
	Time *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// url where more details can be found about the Revision.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Revision) Reset() {
	*x = Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revision) ProtoMessage() {}

func (x *Revision) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revision.ProtoReflect.Descriptor instead.
func (*Revision) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *Revision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Revision) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *Revision) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Revision) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Revision) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// AutoRollConfig describes the configuration for a roller.
type AutoRollConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent_waterfall is the URL of the CI display for the parent repo.
	ParentWaterfall string `protobuf:"bytes,1,opt,name=parent_waterfall,json=parentWaterfall,proto3" json:"parent_waterfall,omitempty"`
	// roller_id is the unique identifier for the roller.
	RollerId string `protobuf:"bytes,2,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// supports_manual_rolls indicates whether this autoroller supports manually-
	// triggered rolls.
	SupportsManualRolls bool `protobuf:"varint,3,opt,name=supports_manual_rolls,json=supportsManualRolls,proto3" json:"supports_manual_rolls,omitempty"`
	// time_window describes the limitations, if any, on when the autoroller is
	// allowed to upload roll CLs.
	TimeWindow string `protobuf:"bytes,4,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
}

func (x *AutoRollConfig) Reset() {
	*x = AutoRollConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRollConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRollConfig) ProtoMessage() {}

func (x *AutoRollConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRollConfig.ProtoReflect.Descriptor instead.
func (*AutoRollConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *AutoRollConfig) GetParentWaterfall() string {
	if x != nil {
		return x.ParentWaterfall
	}
	return ""
}

func (x *AutoRollConfig) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *AutoRollConfig) GetSupportsManualRolls() bool {
	if x != nil {
		return x.SupportsManualRolls
	}
	return false
}

func (x *AutoRollConfig) GetTimeWindow() string {
	if x != nil {
		return x.TimeWindow
	}
	return ""
}

// ModeChange describes one instance of an autoroller's mode being changed.
type ModeChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier for the autoroller.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// mode is the operating mode of the autoroller which was set in this
	// ModeChange.
	Mode Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=autoroll.rpc.Mode" json:"mode,omitempty"`
	// user is the email address of the user who created this ModeChange.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// time is the timestamp at which the ModeChange was created.
	Time *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// message is a user-created message which describes the reason for changing
	// the mode.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ModeChange) Reset() {
	*x = ModeChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeChange) ProtoMessage() {}

func (x *ModeChange) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeChange.ProtoReflect.Descriptor instead.
func (*ModeChange) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *ModeChange) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *ModeChange) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_RUNNING
}

func (x *ModeChange) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ModeChange) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ModeChange) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StrategyChange describes one instance of an autoroller's mode being changed.
type StrategyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier for the autoroller.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// strategy is the strategy for choosing the next revision to roll which was
	// set in this StrategyChange.
	Strategy Strategy `protobuf:"varint,2,opt,name=strategy,proto3,enum=autoroll.rpc.Strategy" json:"strategy,omitempty"`
	// user is the email address of the user who created this StrategyChange.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// time is the timestamp at which the StrategyChange was created.
	Time *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// message is a user-created message which describes the reason for changing
	// the strategy.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StrategyChange) Reset() {
	*x = StrategyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyChange) ProtoMessage() {}

func (x *StrategyChange) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyChange.ProtoReflect.Descriptor instead.
func (*StrategyChange) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *StrategyChange) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *StrategyChange) GetStrategy() Strategy {
	if x != nil {
		return x.Strategy
	}
	return Strategy_BATCH
}

func (x *StrategyChange) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *StrategyChange) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StrategyChange) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ManualRoll describes a manually-triggered roll and its results.
type ManualRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier for this ManualRoll.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// roller_id is the unique identifier for the autoroller on which this
	// ManualRoll was requested.
	RollerId string `protobuf:"bytes,2,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// revision is the ID of the revision to which this ManualRoll will roll.
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// requester is the email address of the person who requested the ManualRoll.
	Requester string `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	// result of the ManualRoll.
	Result ManualRoll_Result `protobuf:"varint,5,opt,name=result,proto3,enum=autoroll.rpc.ManualRoll_Result" json:"result,omitempty"`
	// status of the ManualRoll.
	Status ManualRoll_Status `protobuf:"varint,6,opt,name=status,proto3,enum=autoroll.rpc.ManualRoll_Status" json:"status,omitempty"`
	// timestamp at which the ManualRoll was created.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// url of the ManualRoll, if a roll has been uploaded.
	Url string `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	// dry_run indicates whether the ManualRoll should be performed as a dry run,
	// so that the commit queue runs but the CL is not landed.
	DryRun bool `protobuf:"varint,9,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// no_email specifies that the requester and reviewers should not receive
	// email related to this ManualRoll.
	NoEmail bool `protobuf:"varint,10,opt,name=no_email,json=noEmail,proto3" json:"no_email,omitempty"`
	// no_resolve_revision specifies that the autoroller should not attempt to
	// find the requested revision ID in the Child but should simply use it as
	// provided.
	NoResolveRevision bool `protobuf:"varint,11,opt,name=no_resolve_revision,json=noResolveRevision,proto3" json:"no_resolve_revision,omitempty"`
}

func (x *ManualRoll) Reset() {
	*x = ManualRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualRoll) ProtoMessage() {}

func (x *ManualRoll) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualRoll.ProtoReflect.Descriptor instead.
func (*ManualRoll) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *ManualRoll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManualRoll) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *ManualRoll) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ManualRoll) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *ManualRoll) GetResult() ManualRoll_Result {
	if x != nil {
		return x.Result
	}
	return ManualRoll_UNKNOWN
}

func (x *ManualRoll) GetStatus() ManualRoll_Status {
	if x != nil {
		return x.Status
	}
	return ManualRoll_PENDING
}

func (x *ManualRoll) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ManualRoll) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ManualRoll) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ManualRoll) GetNoEmail() bool {
	if x != nil {
		return x.NoEmail
	}
	return false
}

func (x *ManualRoll) GetNoResolveRevision() bool {
	if x != nil {
		return x.NoResolveRevision
	}
	return false
}

// AutoRollStatus describes the overall status of an autoroller.
type AutoRollStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mini_status contains a subset of status information for the autoroller.
	MiniStatus *AutoRollMiniStatus `protobuf:"bytes,1,opt,name=mini_status,json=miniStatus,proto3" json:"mini_status,omitempty"`
	// status is the current status of the autoroller, as provided by the state
	// machine.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// config provides configuration information for the autoroller.
	Config *AutoRollConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// full_history_url is the URL where the autoroller's history may be viewed.
	FullHistoryUrl string `protobuf:"bytes,4,opt,name=full_history_url,json=fullHistoryUrl,proto3" json:"full_history_url,omitempty"`
	// issue_url_base provides a base URL which can be used to construct URLs for
	// individual AutoRollCLs.
	IssueUrlBase string `protobuf:"bytes,5,opt,name=issue_url_base,json=issueUrlBase,proto3" json:"issue_url_base,omitempty"`
	// mode is the current operating mode of the autoroller.
	Mode *ModeChange `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	// strategy for choosing the next revision to roll.
	Strategy *StrategyChange `protobuf:"bytes,7,opt,name=strategy,proto3" json:"strategy,omitempty"`
	// not_rolled_revisions are the revisions of the Child which have not yet been
	// rolled.
	NotRolledRevisions []*Revision `protobuf:"bytes,8,rep,name=not_rolled_revisions,json=notRolledRevisions,proto3" json:"not_rolled_revisions,omitempty"`
	// current_roll is the active roll CL, if any.
	CurrentRoll *AutoRollCL `protobuf:"bytes,9,opt,name=current_roll,json=currentRoll,proto3" json:"current_roll,omitempty"`
	// last_roll is the previous roll CL.
	LastRoll *AutoRollCL `protobuf:"bytes,10,opt,name=last_roll,json=lastRoll,proto3" json:"last_roll,omitempty"`
	// recent_rolls contains a list of recent roll CLs.
	RecentRolls []*AutoRollCL `protobuf:"bytes,11,rep,name=recent_rolls,json=recentRolls,proto3" json:"recent_rolls,omitempty"`
	// manual_rolls contains a list of recent ManualRolls.
	ManualRolls []*ManualRoll `protobuf:"bytes,12,rep,name=manual_rolls,json=manualRolls,proto3" json:"manual_rolls,omitempty"`
	// error contains a detailed message if the autoroller is in an error state.
	Error string `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	// throttled_until is the timestamp at which the autoroller will no longer be
	// throttled, if the autoroller is currently throttled.
	ThrottledUntil *timestamp.Timestamp `protobuf:"bytes,14,opt,name=throttled_until,json=throttledUntil,proto3" json:"throttled_until,omitempty"`
}

func (x *AutoRollStatus) Reset() {
	*x = AutoRollStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRollStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRollStatus) ProtoMessage() {}

func (x *AutoRollStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRollStatus.ProtoReflect.Descriptor instead.
func (*AutoRollStatus) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *AutoRollStatus) GetMiniStatus() *AutoRollMiniStatus {
	if x != nil {
		return x.MiniStatus
	}
	return nil
}

func (x *AutoRollStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AutoRollStatus) GetConfig() *AutoRollConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AutoRollStatus) GetFullHistoryUrl() string {
	if x != nil {
		return x.FullHistoryUrl
	}
	return ""
}

func (x *AutoRollStatus) GetIssueUrlBase() string {
	if x != nil {
		return x.IssueUrlBase
	}
	return ""
}

func (x *AutoRollStatus) GetMode() *ModeChange {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *AutoRollStatus) GetStrategy() *StrategyChange {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *AutoRollStatus) GetNotRolledRevisions() []*Revision {
	if x != nil {
		return x.NotRolledRevisions
	}
	return nil
}

func (x *AutoRollStatus) GetCurrentRoll() *AutoRollCL {
	if x != nil {
		return x.CurrentRoll
	}
	return nil
}

func (x *AutoRollStatus) GetLastRoll() *AutoRollCL {
	if x != nil {
		return x.LastRoll
	}
	return nil
}

func (x *AutoRollStatus) GetRecentRolls() []*AutoRollCL {
	if x != nil {
		return x.RecentRolls
	}
	return nil
}

func (x *AutoRollStatus) GetManualRolls() []*ManualRoll {
	if x != nil {
		return x.ManualRolls
	}
	return nil
}

func (x *AutoRollStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AutoRollStatus) GetThrottledUntil() *timestamp.Timestamp {
	if x != nil {
		return x.ThrottledUntil
	}
	return nil
}

// GetRollersRequest is a request to GetRollers.
type GetRollersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRollersRequest) Reset() {
	*x = GetRollersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRollersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRollersRequest) ProtoMessage() {}

func (x *GetRollersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRollersRequest.ProtoReflect.Descriptor instead.
func (*GetRollersRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{9}
}

// GetRollersResponse is a response returned by GetRollers.
type GetRollersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rollers contains status information for all known autorollers.
	Rollers []*AutoRollMiniStatus `protobuf:"bytes,1,rep,name=rollers,proto3" json:"rollers,omitempty"`
}

func (x *GetRollersResponse) Reset() {
	*x = GetRollersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRollersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRollersResponse) ProtoMessage() {}

func (x *GetRollersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRollersResponse.ProtoReflect.Descriptor instead.
func (*GetRollersResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetRollersResponse) GetRollers() []*AutoRollMiniStatus {
	if x != nil {
		return x.Rollers
	}
	return nil
}

// GetMiniStatusRequest is a request to GetMiniStatus.
type GetMiniStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller whose MiniStatus is to
	// be retrieved.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
}

func (x *GetMiniStatusRequest) Reset() {
	*x = GetMiniStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniStatusRequest) ProtoMessage() {}

func (x *GetMiniStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMiniStatusRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetMiniStatusRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

// GetMiniStatusResponse is a response returned by GetMiniStatus.
type GetMiniStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is a subset of status information for the autoroller in question.
	Status *AutoRollMiniStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetMiniStatusResponse) Reset() {
	*x = GetMiniStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniStatusResponse) ProtoMessage() {}

func (x *GetMiniStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMiniStatusResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetMiniStatusResponse) GetStatus() *AutoRollMiniStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// GetStatusRequest is a request to GetStatus.
type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller whose Status is to be
	// retrieved.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetStatusRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

// GetStatusResponse is a response returned by GetStatus.
type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status information about the autoroller in question.
	Status *AutoRollStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetStatusResponse) GetStatus() *AutoRollStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SetModeRequest is a request to SetMode.
type SetModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller whose mode is to be
	// changed.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// mode is the desired mode to set for the given autoroller.
	Mode Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=autoroll.rpc.Mode" json:"mode,omitempty"`
	// message describes the reason for changing the mode.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetModeRequest) Reset() {
	*x = SetModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeRequest) ProtoMessage() {}

func (x *SetModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeRequest.ProtoReflect.Descriptor instead.
func (*SetModeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *SetModeRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *SetModeRequest) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_RUNNING
}

func (x *SetModeRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SetModeResponse is a response returned by SetMode.
type SetModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is the updated status of the autoroller after changing its mode.
	Status *AutoRollStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetModeResponse) Reset() {
	*x = SetModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeResponse) ProtoMessage() {}

func (x *SetModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeResponse.ProtoReflect.Descriptor instead.
func (*SetModeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *SetModeResponse) GetStatus() *AutoRollStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SetStrategyRequest is a request to SetStrategy.
type SetStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller whose strategy is to
	// be changed.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// strategy is the desired strategy to set for the given autoroller.
	Strategy Strategy `protobuf:"varint,2,opt,name=strategy,proto3,enum=autoroll.rpc.Strategy" json:"strategy,omitempty"`
	// message describes the reason for changing the strategy.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetStrategyRequest) Reset() {
	*x = SetStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStrategyRequest) ProtoMessage() {}

func (x *SetStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStrategyRequest.ProtoReflect.Descriptor instead.
func (*SetStrategyRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *SetStrategyRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *SetStrategyRequest) GetStrategy() Strategy {
	if x != nil {
		return x.Strategy
	}
	return Strategy_BATCH
}

func (x *SetStrategyRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SetStrategyResponse is a response returned by SetStrategy.
type SetStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is the updated status of the autoroller after changing its strategy.
	Status *AutoRollStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetStrategyResponse) Reset() {
	*x = SetStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStrategyResponse) ProtoMessage() {}

func (x *SetStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStrategyResponse.ProtoReflect.Descriptor instead.
func (*SetStrategyResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *SetStrategyResponse) GetStatus() *AutoRollStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// CreateManualRollRequest is a request to CreateManualRoll.
type CreateManualRollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller which should create
	// the manual roll.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
	// revision is the ID of the revision to be rolled.
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *CreateManualRollRequest) Reset() {
	*x = CreateManualRollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManualRollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManualRollRequest) ProtoMessage() {}

func (x *CreateManualRollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManualRollRequest.ProtoReflect.Descriptor instead.
func (*CreateManualRollRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *CreateManualRollRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

func (x *CreateManualRollRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// CreateManualRollResponse is a response returned by CreateManualRoll.
type CreateManualRollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roll is the manual roll which was created.
	Roll *ManualRoll `protobuf:"bytes,1,opt,name=roll,proto3" json:"roll,omitempty"`
}

func (x *CreateManualRollResponse) Reset() {
	*x = CreateManualRollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManualRollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManualRollResponse) ProtoMessage() {}

func (x *CreateManualRollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManualRollResponse.ProtoReflect.Descriptor instead.
func (*CreateManualRollResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *CreateManualRollResponse) GetRoll() *ManualRoll {
	if x != nil {
		return x.Roll
	}
	return nil
}

// UnthrottleRequest is a request to Unthrottle.
type UnthrottleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller which should be
	// unthrottled.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
}

func (x *UnthrottleRequest) Reset() {
	*x = UnthrottleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnthrottleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnthrottleRequest) ProtoMessage() {}

func (x *UnthrottleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnthrottleRequest.ProtoReflect.Descriptor instead.
func (*UnthrottleRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *UnthrottleRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

// UnthrottleResponse is a response returned by Unthrottle.
type UnthrottleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnthrottleResponse) Reset() {
	*x = UnthrottleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnthrottleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnthrottleResponse) ProtoMessage() {}

func (x *UnthrottleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnthrottleResponse.ProtoReflect.Descriptor instead.
func (*UnthrottleResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{22}
}

// GetConfigRequest is a request to GetConfig.
type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_id is the unique identifier of the autoroller whose config is to be
	// retrieved.
	RollerId string `protobuf:"bytes,1,opt,name=roller_id,json=rollerId,proto3" json:"roller_id,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetConfigRequest) GetRollerId() string {
	if x != nil {
		return x.RollerId
	}
	return ""
}

// GetConfigResponse is a response returned by GetConfig.
type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config is the config for the requested autoroller.
	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *GetConfigResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// PutConfigRequest is a request to PutConfig.
type PutConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config is the new or updated config for a given roller.
	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PutConfigRequest) Reset() {
	*x = PutConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConfigRequest) ProtoMessage() {}

func (x *PutConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConfigRequest.ProtoReflect.Descriptor instead.
func (*PutConfigRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *PutConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// PutConfigResponse is a response returned by PutConfig.
type PutConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cl is the URL of the generated CL to add or update the requested config.
	Cl string `protobuf:"bytes,1,opt,name=cl,proto3" json:"cl,omitempty"`
}

func (x *PutConfigResponse) Reset() {
	*x = PutConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConfigResponse) ProtoMessage() {}

func (x *PutConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConfigResponse.ProtoReflect.Descriptor instead.
func (*PutConfigResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *PutConfigResponse) GetCl() string {
	if x != nil {
		return x.Cl
	}
	return ""
}

// Config provides configuration for one AutoRoller.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roller_name is the name for this roller. It is used as the unique ID for
	// the roller.
	// TODO(borenet): Use an actual DB-generated ID for the roller.
	RollerName string `protobuf:"bytes,1,opt,name=roller_name,json=rollerName,proto3" json:"roller_name,omitempty"`
	// child_display_name is the human-readable display name of the child.
	ChildDisplayName string `protobuf:"bytes,2,opt,name=child_display_name,json=childDisplayName,proto3" json:"child_display_name,omitempty"`
	// parent_display_name is the human-readable display name of the parent.
	ParentDisplayName string `protobuf:"bytes,3,opt,name=parent_display_name,json=parentDisplayName,proto3" json:"parent_display_name,omitempty"`
	// parent_waterfall is the URL of the waterfall display of the parent repo.
	ParentWaterfall string `protobuf:"bytes,4,opt,name=parent_waterfall,json=parentWaterfall,proto3" json:"parent_waterfall,omitempty"`
	// owner_primary is the primary owner of this roller.
	OwnerPrimary string `protobuf:"bytes,5,opt,name=owner_primary,json=ownerPrimary,proto3" json:"owner_primary,omitempty"`
	// owner_secondary is the secondary owner of this roller.
	OwnerSecondary string `protobuf:"bytes,6,opt,name=owner_secondary,json=ownerSecondary,proto3" json:"owner_secondary,omitempty"`
	// contacts is a list of email addresses of contacts for this roller, used
	// for sending PSAs, asking questions, etc.
	Contacts []string `protobuf:"bytes,7,rep,name=contacts,proto3" json:"contacts,omitempty"`
	// service_account is the full email address of the service account for this
	// roller.
	ServiceAccount string `protobuf:"bytes,8,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// is_internal indicates whether this roller is internal, ie. only visible
	// to Googlers.
	// TODO(borenet): Is this necessary?
	IsInternal bool `protobuf:"varint,9,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	// reviewer are the email addresses to add as reviewers on rolls, or URL(s)
	// from which to obtain those email addresses.
	Reviewer []string `protobuf:"bytes,10,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	// reviewer_backup are backup email addresses to add as reviewers on rolls,
	// in case obtaining the email addresses from the URL fails. Only required
	// if a URL is specified for the reviewer.
	ReviewerBackup []string `protobuf:"bytes,11,rep,name=reviewer_backup,json=reviewerBackup,proto3" json:"reviewer_backup,omitempty"`
	// roll_cooldown is a period of time after a successful roll attempt during
	// which no new roll attempts will be created. Optional.
	RollCooldown string `protobuf:"bytes,12,opt,name=roll_cooldown,json=rollCooldown,proto3" json:"roll_cooldown,omitempty"`
	// time_window in which the roller is allowed to upload roll CLs. See the
	// go/time_window package for supported format.
	TimeWindow string `protobuf:"bytes,13,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
	// supports_manual_rolls indicates whether this roller supports manual
	// rolls.
	SupportsManualRolls bool `protobuf:"varint,14,opt,name=supports_manual_rolls,json=supportsManualRolls,proto3" json:"supports_manual_rolls,omitempty"`
	// commit_msg provides configuration for the commit message.
	CommitMsg *CommitMsgConfig `protobuf:"bytes,15,opt,name=commit_msg,json=commitMsg,proto3" json:"commit_msg,omitempty"`
	// code_review provides configuration for code review.
	//
	// Types that are assignable to CodeReview:
	//	*Config_Gerrit
	//	*Config_Github
	//	*Config_Google3
	CodeReview isConfig_CodeReview `protobuf_oneof:"code_review"`
	// kubernetes provides configuration for Kubernetes.
	Kubernetes *KubernetesConfig `protobuf:"bytes,19,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// repo_manager provides configuration for the repo manager.
	//
	// Types that are assignable to RepoManager:
	//	*Config_ParentChildRepoManager
	//	*Config_AndroidRepoManager
	//	*Config_CommandRepoManager
	//	*Config_FreetypeRepoManager
	//	*Config_FuchsiaSdkAndroidRepoManager
	//	*Config_Google3RepoManager
	RepoManager isConfig_RepoManager `protobuf_oneof:"repo_manager"`
	// notifiers configures any extra notifications used by this roller.
	Notifiers []*NotifierConfig `protobuf:"bytes,26,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	// safety_throttle provides configuration for safety-throttling the roller
	// in case of persistent errors.
	SafetyThrottle *ThrottleConfig `protobuf:"bytes,27,opt,name=safety_throttle,json=safetyThrottle,proto3" json:"safety_throttle,omitempty"`
	// transitive_deps is an optional mapping of dependency ID (eg. repo URL)
	// to the paths within the parent and child repo, respectively, where
	// those dependencies are versioned, eg. "DEPS".
	// TODO(borenet): Where is this used? Why isn't it nested within the repo
	// manager config?
	TransitiveDeps []*TransitiveDepConfig `protobuf:"bytes,28,rep,name=transitive_deps,json=transitiveDeps,proto3" json:"transitive_deps,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *Config) GetRollerName() string {
	if x != nil {
		return x.RollerName
	}
	return ""
}

func (x *Config) GetChildDisplayName() string {
	if x != nil {
		return x.ChildDisplayName
	}
	return ""
}

func (x *Config) GetParentDisplayName() string {
	if x != nil {
		return x.ParentDisplayName
	}
	return ""
}

func (x *Config) GetParentWaterfall() string {
	if x != nil {
		return x.ParentWaterfall
	}
	return ""
}

func (x *Config) GetOwnerPrimary() string {
	if x != nil {
		return x.OwnerPrimary
	}
	return ""
}

func (x *Config) GetOwnerSecondary() string {
	if x != nil {
		return x.OwnerSecondary
	}
	return ""
}

func (x *Config) GetContacts() []string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Config) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *Config) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

func (x *Config) GetReviewer() []string {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *Config) GetReviewerBackup() []string {
	if x != nil {
		return x.ReviewerBackup
	}
	return nil
}

func (x *Config) GetRollCooldown() string {
	if x != nil {
		return x.RollCooldown
	}
	return ""
}

func (x *Config) GetTimeWindow() string {
	if x != nil {
		return x.TimeWindow
	}
	return ""
}

func (x *Config) GetSupportsManualRolls() bool {
	if x != nil {
		return x.SupportsManualRolls
	}
	return false
}

func (x *Config) GetCommitMsg() *CommitMsgConfig {
	if x != nil {
		return x.CommitMsg
	}
	return nil
}

func (m *Config) GetCodeReview() isConfig_CodeReview {
	if m != nil {
		return m.CodeReview
	}
	return nil
}

func (x *Config) GetGerrit() *GerritConfig {
	if x, ok := x.GetCodeReview().(*Config_Gerrit); ok {
		return x.Gerrit
	}
	return nil
}

func (x *Config) GetGithub() *GitHubConfig {
	if x, ok := x.GetCodeReview().(*Config_Github); ok {
		return x.Github
	}
	return nil
}

func (x *Config) GetGoogle3() *Google3Config {
	if x, ok := x.GetCodeReview().(*Config_Google3); ok {
		return x.Google3
	}
	return nil
}

func (x *Config) GetKubernetes() *KubernetesConfig {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (m *Config) GetRepoManager() isConfig_RepoManager {
	if m != nil {
		return m.RepoManager
	}
	return nil
}

func (x *Config) GetParentChildRepoManager() *ParentChildRepoManagerConfig {
	if x, ok := x.GetRepoManager().(*Config_ParentChildRepoManager); ok {
		return x.ParentChildRepoManager
	}
	return nil
}

func (x *Config) GetAndroidRepoManager() *AndroidRepoManagerConfig {
	if x, ok := x.GetRepoManager().(*Config_AndroidRepoManager); ok {
		return x.AndroidRepoManager
	}
	return nil
}

func (x *Config) GetCommandRepoManager() *CommandRepoManagerConfig {
	if x, ok := x.GetRepoManager().(*Config_CommandRepoManager); ok {
		return x.CommandRepoManager
	}
	return nil
}

func (x *Config) GetFreetypeRepoManager() *FreeTypeRepoManagerConfig {
	if x, ok := x.GetRepoManager().(*Config_FreetypeRepoManager); ok {
		return x.FreetypeRepoManager
	}
	return nil
}

func (x *Config) GetFuchsiaSdkAndroidRepoManager() *FuchsiaSDKAndroidRepoManagerConfig {
	if x, ok := x.GetRepoManager().(*Config_FuchsiaSdkAndroidRepoManager); ok {
		return x.FuchsiaSdkAndroidRepoManager
	}
	return nil
}

func (x *Config) GetGoogle3RepoManager() *Google3RepoManagerConfig {
	if x, ok := x.GetRepoManager().(*Config_Google3RepoManager); ok {
		return x.Google3RepoManager
	}
	return nil
}

func (x *Config) GetNotifiers() []*NotifierConfig {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *Config) GetSafetyThrottle() *ThrottleConfig {
	if x != nil {
		return x.SafetyThrottle
	}
	return nil
}

func (x *Config) GetTransitiveDeps() []*TransitiveDepConfig {
	if x != nil {
		return x.TransitiveDeps
	}
	return nil
}

type isConfig_CodeReview interface {
	isConfig_CodeReview()
}

type Config_Gerrit struct {
	// gerrit provides configuration for code review using Gerrit.
	Gerrit *GerritConfig `protobuf:"bytes,16,opt,name=gerrit,proto3,oneof"`
}

type Config_Github struct {
	// github provides configuration for code review using GitHub.
	Github *GitHubConfig `protobuf:"bytes,17,opt,name=github,proto3,oneof"`
}

type Config_Google3 struct {
	// google3 provides configuration for code review using Google3.
	Google3 *Google3Config `protobuf:"bytes,18,opt,name=google3,proto3,oneof"`
}

func (*Config_Gerrit) isConfig_CodeReview() {}

func (*Config_Github) isConfig_CodeReview() {}

func (*Config_Google3) isConfig_CodeReview() {}

type isConfig_RepoManager interface {
	isConfig_RepoManager()
}

type Config_ParentChildRepoManager struct {
	ParentChildRepoManager *ParentChildRepoManagerConfig `protobuf:"bytes,20,opt,name=parent_child_repo_manager,json=parentChildRepoManager,proto3,oneof"`
}

type Config_AndroidRepoManager struct {
	AndroidRepoManager *AndroidRepoManagerConfig `protobuf:"bytes,21,opt,name=android_repo_manager,json=androidRepoManager,proto3,oneof"`
}

type Config_CommandRepoManager struct {
	CommandRepoManager *CommandRepoManagerConfig `protobuf:"bytes,22,opt,name=command_repo_manager,json=commandRepoManager,proto3,oneof"`
}

type Config_FreetypeRepoManager struct {
	FreetypeRepoManager *FreeTypeRepoManagerConfig `protobuf:"bytes,23,opt,name=freetype_repo_manager,json=freetypeRepoManager,proto3,oneof"`
}

type Config_FuchsiaSdkAndroidRepoManager struct {
	FuchsiaSdkAndroidRepoManager *FuchsiaSDKAndroidRepoManagerConfig `protobuf:"bytes,24,opt,name=fuchsia_sdk_android_repo_manager,json=fuchsiaSdkAndroidRepoManager,proto3,oneof"`
}

type Config_Google3RepoManager struct {
	Google3RepoManager *Google3RepoManagerConfig `protobuf:"bytes,25,opt,name=google3_repo_manager,json=google3RepoManager,proto3,oneof"`
}

func (*Config_ParentChildRepoManager) isConfig_RepoManager() {}

func (*Config_AndroidRepoManager) isConfig_RepoManager() {}

func (*Config_CommandRepoManager) isConfig_RepoManager() {}

func (*Config_FreetypeRepoManager) isConfig_RepoManager() {}

func (*Config_FuchsiaSdkAndroidRepoManager) isConfig_RepoManager() {}

func (*Config_Google3RepoManager) isConfig_RepoManager() {}

// CommitMsgConfig provides configuration for commit messages.
type CommitMsgConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bug_project indicates which project (eg. in Monorail) the bugs attached
	// to various revisions are associated with.  If provided, any "Bug: " lines
	// from revisions in the roll which match the given project name will be
	// included in the roll itself.
	BugProject string `protobuf:"bytes,1,opt,name=bug_project,json=bugProject,proto3" json:"bug_project,omitempty"`
	// child_log_url_tmpl is a template for building log URLs using the IDs of
	// the from- and to-revisions of the child for a given roll.
	ChildLogUrlTmpl string `protobuf:"bytes,2,opt,name=child_log_url_tmpl,json=childLogUrlTmpl,proto3" json:"child_log_url_tmpl,omitempty"`
	// cq_extra_trybots are additional tryjobs to trigger as part of the commit
	// queue for every roll.
	CqExtraTrybots []string `protobuf:"bytes,3,rep,name=cq_extra_trybots,json=cqExtraTrybots,proto3" json:"cq_extra_trybots,omitempty"`
	// cq_do_not_cancel_trybots indicates that the commit queue should not
	// cancel tryjobs from old patch sets when a new patch set is uploaded.
	CqDoNotCancelTrybots bool `protobuf:"varint,4,opt,name=cq_do_not_cancel_trybots,json=cqDoNotCancelTrybots,proto3" json:"cq_do_not_cancel_trybots,omitempty"`
	// include_log indicates whether the list of revisions contained in the roll
	// should be included as part of the commit message.
	IncludeLog bool `protobuf:"varint,5,opt,name=include_log,json=includeLog,proto3" json:"include_log,omitempty"`
	// include_revision_count indicates whether the number of revisions
	// contained in the roll should be included in the subject line of the
	// commit message.
	IncludeRevisionCount bool `protobuf:"varint,6,opt,name=include_revision_count,json=includeRevisionCount,proto3" json:"include_revision_count,omitempty"`
	// include_tbr_line indicates whether the "TBR:" line should be included in
	// the commit message. This is required for some commit queues.
	IncludeTbrLine bool `protobuf:"varint,7,opt,name=include_tbr_line,json=includeTbrLine,proto3" json:"include_tbr_line,omitempty"`
	// include_tests indicates whether the "Test: " lines from the revisions in
	// the roll should be propagated through to the roll itself.
	IncludeTests bool `protobuf:"varint,8,opt,name=include_tests,json=includeTests,proto3" json:"include_tests,omitempty"`
	// template specifies exactly how the commit message should be structured.
	// If not specified, the default template is used.
	//
	// Types that are assignable to Template:
	//	*CommitMsgConfig_BuiltIn_
	//	*CommitMsgConfig_Custom
	Template isCommitMsgConfig_Template `protobuf_oneof:"template"`
}

func (x *CommitMsgConfig) Reset() {
	*x = CommitMsgConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMsgConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMsgConfig) ProtoMessage() {}

func (x *CommitMsgConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMsgConfig.ProtoReflect.Descriptor instead.
func (*CommitMsgConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *CommitMsgConfig) GetBugProject() string {
	if x != nil {
		return x.BugProject
	}
	return ""
}

func (x *CommitMsgConfig) GetChildLogUrlTmpl() string {
	if x != nil {
		return x.ChildLogUrlTmpl
	}
	return ""
}

func (x *CommitMsgConfig) GetCqExtraTrybots() []string {
	if x != nil {
		return x.CqExtraTrybots
	}
	return nil
}

func (x *CommitMsgConfig) GetCqDoNotCancelTrybots() bool {
	if x != nil {
		return x.CqDoNotCancelTrybots
	}
	return false
}

func (x *CommitMsgConfig) GetIncludeLog() bool {
	if x != nil {
		return x.IncludeLog
	}
	return false
}

func (x *CommitMsgConfig) GetIncludeRevisionCount() bool {
	if x != nil {
		return x.IncludeRevisionCount
	}
	return false
}

func (x *CommitMsgConfig) GetIncludeTbrLine() bool {
	if x != nil {
		return x.IncludeTbrLine
	}
	return false
}

func (x *CommitMsgConfig) GetIncludeTests() bool {
	if x != nil {
		return x.IncludeTests
	}
	return false
}

func (m *CommitMsgConfig) GetTemplate() isCommitMsgConfig_Template {
	if m != nil {
		return m.Template
	}
	return nil
}

func (x *CommitMsgConfig) GetBuiltIn() CommitMsgConfig_BuiltIn {
	if x, ok := x.GetTemplate().(*CommitMsgConfig_BuiltIn_); ok {
		return x.BuiltIn
	}
	return CommitMsgConfig_DEFAULT
}

func (x *CommitMsgConfig) GetCustom() string {
	if x, ok := x.GetTemplate().(*CommitMsgConfig_Custom); ok {
		return x.Custom
	}
	return ""
}

type isCommitMsgConfig_Template interface {
	isCommitMsgConfig_Template()
}

type CommitMsgConfig_BuiltIn_ struct {
	// built_in is the name of a built-in commit message template.
	BuiltIn CommitMsgConfig_BuiltIn `protobuf:"varint,9,opt,name=built_in,json=builtIn,proto3,enum=autoroll.rpc.CommitMsgConfig_BuiltIn,oneof"`
}

type CommitMsgConfig_Custom struct {
	// custom is a full custom commit message template string.
	Custom string `protobuf:"bytes,10,opt,name=custom,proto3,oneof"`
}

func (*CommitMsgConfig_BuiltIn_) isCommitMsgConfig_Template() {}

func (*CommitMsgConfig_Custom) isCommitMsgConfig_Template() {}

// GerritConfig provides configuration for code review using Gerrit.
type GerritConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url of the Gerrit host.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// project name for uploaded CLs.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// config indicates the mode of operation used by the Gerrit host, which
	// informs the roller of, for example, which labels to set. See the
	// autoroll/go/codereview package for possible values.
	Config GerritConfig_Config `protobuf:"varint,3,opt,name=config,proto3,enum=autoroll.rpc.GerritConfig_Config" json:"config,omitempty"`
}

func (x *GerritConfig) Reset() {
	*x = GerritConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritConfig) ProtoMessage() {}

func (x *GerritConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritConfig.ProtoReflect.Descriptor instead.
func (*GerritConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *GerritConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GerritConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritConfig) GetConfig() GerritConfig_Config {
	if x != nil {
		return x.Config
	}
	return GerritConfig_ANDROID
}

// GitHubConfig provides configuration for code review using GitHub.
type GitHubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_owner is the owner of the GitHub repo.
	RepoOwner string `protobuf:"bytes,1,opt,name=repo_owner,json=repoOwner,proto3" json:"repo_owner,omitempty"`
	// repo_name is the name of the GitHub repo.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// checks_wait_for indicates which GitHub checks must succeed before a pull
	// request may be merged. If they are failing, we wait for them to succeed
	// (eg. tree-status checks). Note: These checks are ignored during dry runs
	// because the PR is not going to be submitted so the tree-status checks
	// will not be important in that case.
	ChecksWaitFor []string `protobuf:"bytes,3,rep,name=checks_wait_for,json=checksWaitFor,proto3" json:"checks_wait_for,omitempty"`
}

func (x *GitHubConfig) Reset() {
	*x = GitHubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubConfig) ProtoMessage() {}

func (x *GitHubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubConfig.ProtoReflect.Descriptor instead.
func (*GitHubConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *GitHubConfig) GetRepoOwner() string {
	if x != nil {
		return x.RepoOwner
	}
	return ""
}

func (x *GitHubConfig) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GitHubConfig) GetChecksWaitFor() []string {
	if x != nil {
		return x.ChecksWaitFor
	}
	return nil
}

// Google3Config is an empty configuration object for Google3.
type Google3Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Google3Config) Reset() {
	*x = Google3Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Google3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Google3Config) ProtoMessage() {}

func (x *Google3Config) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Google3Config.ProtoReflect.Descriptor instead.
func (*Google3Config) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{31}
}

// KubernetesConfig provides Kubernetes configuration for the autoroll backend
// service for this roller.
type KubernetesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu is the requested number of CPUs, eg. "250m".
	Cpu string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// memory is the requested memory, eg. "2Gi".
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// readiness_failure_threshold indicates how many times the ready check may
	// fail.
	ReadinessFailureThreshold int32 `protobuf:"varint,3,opt,name=readiness_failure_threshold,json=readinessFailureThreshold,proto3" json:"readiness_failure_threshold,omitempty"`
	// readiness_initial_delay_seconds indicates how long to wait before
	// performing the ready check for the first time.
	ReadinessInitialDelaySeconds int32 `protobuf:"varint,4,opt,name=readiness_initial_delay_seconds,json=readinessInitialDelaySeconds,proto3" json:"readiness_initial_delay_seconds,omitempty"`
	// readiness_period_seconds indicates how often to perform the ready check.
	ReadinessPeriodSeconds int32 `protobuf:"varint,5,opt,name=readiness_period_seconds,json=readinessPeriodSeconds,proto3" json:"readiness_period_seconds,omitempty"`
	// disk indicates the size of the requested persistent disk.  If not
	// specified, no persistent disk is used.
	Disk string `protobuf:"bytes,6,opt,name=disk,proto3" json:"disk,omitempty"`
	// secrets provided to the pod.
	Secrets []*KubernetesSecret `protobuf:"bytes,7,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *KubernetesConfig) Reset() {
	*x = KubernetesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesConfig) ProtoMessage() {}

func (x *KubernetesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesConfig.ProtoReflect.Descriptor instead.
func (*KubernetesConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *KubernetesConfig) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *KubernetesConfig) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *KubernetesConfig) GetReadinessFailureThreshold() int32 {
	if x != nil {
		return x.ReadinessFailureThreshold
	}
	return 0
}

func (x *KubernetesConfig) GetReadinessInitialDelaySeconds() int32 {
	if x != nil {
		return x.ReadinessInitialDelaySeconds
	}
	return 0
}

func (x *KubernetesConfig) GetReadinessPeriodSeconds() int32 {
	if x != nil {
		return x.ReadinessPeriodSeconds
	}
	return 0
}

func (x *KubernetesConfig) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *KubernetesConfig) GetSecrets() []*KubernetesSecret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// KubernetesSecret provides configuration for a Kubernetes secret.
type KubernetesSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the secret.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// mount_path of the secret.
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *KubernetesSecret) Reset() {
	*x = KubernetesSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesSecret) ProtoMessage() {}

func (x *KubernetesSecret) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesSecret.ProtoReflect.Descriptor instead.
func (*KubernetesSecret) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *KubernetesSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesSecret) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

// AndroidRepoManagerConfig provides configuration for a roller which rolls into
// Android.
type AndroidRepoManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// child_repo_url is the URL of the child repo.
	ChildRepoUrl string `protobuf:"bytes,1,opt,name=child_repo_url,json=childRepoUrl,proto3" json:"child_repo_url,omitempty"`
	// child_branch is the Git branch of the child repo to track.
	ChildBranch string `protobuf:"bytes,2,opt,name=child_branch,json=childBranch,proto3" json:"child_branch,omitempty"`
	// child_path is the path to the child repo within the parent.
	ChildPath string `protobuf:"bytes,3,opt,name=child_path,json=childPath,proto3" json:"child_path,omitempty"`
	// parent_repo_url is the URL of the parent repo.
	ParentRepoUrl string `protobuf:"bytes,4,opt,name=parent_repo_url,json=parentRepoUrl,proto3" json:"parent_repo_url,omitempty"`
	// parent_branch is the Git branch of the parent repo to track.
	ParentBranch string `protobuf:"bytes,5,opt,name=parent_branch,json=parentBranch,proto3" json:"parent_branch,omitempty"`
	// child_rev_link_tmpl is a template used to create links to revisions of
	// the child repo. If not supplied, no links will be created.
	ChildRevLinkTmpl string `protobuf:"bytes,6,opt,name=child_rev_link_tmpl,json=childRevLinkTmpl,proto3" json:"child_rev_link_tmpl,omitempty"`
	// child_subdir indicates the subdirectory of the working directory (not the
	// parent repo) in which the child_path should be rooted. In most cases this
	// should be empty, but if child_path is relative to the parent repo dir
	// (eg. when DEPS specifies use_relative_paths), then this is required.
	ChildSubdir string `protobuf:"bytes,7,opt,name=child_subdir,json=childSubdir,proto3" json:"child_subdir,omitempty"`
	// pre_upload_steps are named steps to run before uploading roll CLs.
	PreUploadSteps []PreUploadStep `protobuf:"varint,8,rep,packed,name=pre_upload_steps,json=preUploadSteps,proto3,enum=autoroll.rpc.PreUploadStep" json:"pre_upload_steps,omitempty"`
	// metadata about the child project which should be updated in a file
	// checked into the parent repo.
	Metadata *AndroidRepoManagerConfig_ProjectMetadataFileConfig `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AndroidRepoManagerConfig) Reset() {
	*x = AndroidRepoManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidRepoManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidRepoManagerConfig) ProtoMessage() {}

func (x *AndroidRepoManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidRepoManagerConfig.ProtoReflect.Descriptor instead.
func (*AndroidRepoManagerConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *AndroidRepoManagerConfig) GetChildRepoUrl() string {
	if x != nil {
		return x.ChildRepoUrl
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetChildBranch() string {
	if x != nil {
		return x.ChildBranch
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetChildPath() string {
	if x != nil {
		return x.ChildPath
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetParentRepoUrl() string {
	if x != nil {
		return x.ParentRepoUrl
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetParentBranch() string {
	if x != nil {
		return x.ParentBranch
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetChildRevLinkTmpl() string {
	if x != nil {
		return x.ChildRevLinkTmpl
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetChildSubdir() string {
	if x != nil {
		return x.ChildSubdir
	}
	return ""
}

func (x *AndroidRepoManagerConfig) GetPreUploadSteps() []PreUploadStep {
	if x != nil {
		return x.PreUploadSteps
	}
	return nil
}

func (x *AndroidRepoManagerConfig) GetMetadata() *AndroidRepoManagerConfig_ProjectMetadataFileConfig {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CommandRepoManagerConfig provides configuration for a roller which runs
// specified commands to perform different functions.
type CommandRepoManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// git_checkout configures the Git checkout of the parent repo.
	GitCheckout *GitCheckoutConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
	// short_rev_regex is a regular expression used to shorten revision IDs for
	// display.
	ShortRevRegex string `protobuf:"bytes,2,opt,name=short_rev_regex,json=shortRevRegex,proto3" json:"short_rev_regex,omitempty"`
	// get_tip_rev is a command used to obtain the latest revision of the Child.
	GetTipRev *CommandRepoManagerConfig_CommandConfig `protobuf:"bytes,3,opt,name=get_tip_rev,json=getTipRev,proto3" json:"get_tip_rev,omitempty"`
	// get_pinned_rev is a command used to obtain the currently-pinned revision
	// of the Child.
	GetPinnedRev *CommandRepoManagerConfig_CommandConfig `protobuf:"bytes,4,opt,name=get_pinned_rev,json=getPinnedRev,proto3" json:"get_pinned_rev,omitempty"`
	// set_pinned_rev is a command used to update the currently-pinned revision
	// of the Child.
	SetPinnedRev *CommandRepoManagerConfig_CommandConfig `protobuf:"bytes,5,opt,name=set_pinned_rev,json=setPinnedRev,proto3" json:"set_pinned_rev,omitempty"`
}

func (x *CommandRepoManagerConfig) Reset() {
	*x = CommandRepoManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRepoManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRepoManagerConfig) ProtoMessage() {}

func (x *CommandRepoManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRepoManagerConfig.ProtoReflect.Descriptor instead.
func (*CommandRepoManagerConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *CommandRepoManagerConfig) GetGitCheckout() *GitCheckoutConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

func (x *CommandRepoManagerConfig) GetShortRevRegex() string {
	if x != nil {
		return x.ShortRevRegex
	}
	return ""
}

func (x *CommandRepoManagerConfig) GetGetTipRev() *CommandRepoManagerConfig_CommandConfig {
	if x != nil {
		return x.GetTipRev
	}
	return nil
}

func (x *CommandRepoManagerConfig) GetGetPinnedRev() *CommandRepoManagerConfig_CommandConfig {
	if x != nil {
		return x.GetPinnedRev
	}
	return nil
}

func (x *CommandRepoManagerConfig) GetSetPinnedRev() *CommandRepoManagerConfig_CommandConfig {
	if x != nil {
		return x.SetPinnedRev
	}
	return nil
}

// FreeTypeRepoManagerConfig provides configuration for the FreeType roller.
type FreeTypeRepoManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *FreeTypeParentConfig `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Child  *GitilesChildConfig   `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *FreeTypeRepoManagerConfig) Reset() {
	*x = FreeTypeRepoManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeTypeRepoManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeTypeRepoManagerConfig) ProtoMessage() {}

func (x *FreeTypeRepoManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeTypeRepoManagerConfig.ProtoReflect.Descriptor instead.
func (*FreeTypeRepoManagerConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *FreeTypeRepoManagerConfig) GetParent() *FreeTypeParentConfig {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FreeTypeRepoManagerConfig) GetChild() *GitilesChildConfig {
	if x != nil {
		return x.Child
	}
	return nil
}

// FuchsiaSDKAndroidRepoManagerConfig provides configuration for the Fuchsia SDK
// into Android roller.
type FuchsiaSDKAndroidRepoManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *GitCheckoutParentConfig `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Child  *FuchsiaSDKChildConfig   `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	// gen_sdk_bp_repo is the repo URL for the generation script.
	GenSdkBpRepo string `protobuf:"bytes,3,opt,name=gen_sdk_bp_repo,json=genSdkBpRepo,proto3" json:"gen_sdk_bp_repo,omitempty"`
	// gen_sdk_bp_branch is the branch of the generation script.
	GenSdkBpBranch string `protobuf:"bytes,4,opt,name=gen_sdk_bp_branch,json=genSdkBpBranch,proto3" json:"gen_sdk_bp_branch,omitempty"`
}

func (x *FuchsiaSDKAndroidRepoManagerConfig) Reset() {
	*x = FuchsiaSDKAndroidRepoManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuchsiaSDKAndroidRepoManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuchsiaSDKAndroidRepoManagerConfig) ProtoMessage() {}

func (x *FuchsiaSDKAndroidRepoManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuchsiaSDKAndroidRepoManagerConfig.ProtoReflect.Descriptor instead.
func (*FuchsiaSDKAndroidRepoManagerConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *FuchsiaSDKAndroidRepoManagerConfig) GetParent() *GitCheckoutParentConfig {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FuchsiaSDKAndroidRepoManagerConfig) GetChild() *FuchsiaSDKChildConfig {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *FuchsiaSDKAndroidRepoManagerConfig) GetGenSdkBpRepo() string {
	if x != nil {
		return x.GenSdkBpRepo
	}
	return ""
}

func (x *FuchsiaSDKAndroidRepoManagerConfig) GetGenSdkBpBranch() string {
	if x != nil {
		return x.GenSdkBpBranch
	}
	return ""
}

// Google3RepoManagerConfig provides configuration for a roller into Google3.
type Google3RepoManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// child_branch is the branch of the child repo to track.
	ChildBranch string `protobuf:"bytes,1,opt,name=child_branch,json=childBranch,proto3" json:"child_branch,omitempty"`
	// child_repo is the URL of the child repo.
	ChildRepo string `protobuf:"bytes,2,opt,name=child_repo,json=childRepo,proto3" json:"child_repo,omitempty"`
}

func (x *Google3RepoManagerConfig) Reset() {
	*x = Google3RepoManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Google3RepoManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Google3RepoManagerConfig) ProtoMessage() {}

func (x *Google3RepoManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Google3RepoManagerConfig.ProtoReflect.Descriptor instead.
func (*Google3RepoManagerConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *Google3RepoManagerConfig) GetChildBranch() string {
	if x != nil {
		return x.ChildBranch
	}
	return ""
}

func (x *Google3RepoManagerConfig) GetChildRepo() string {
	if x != nil {
		return x.ChildRepo
	}
	return ""
}

// ParentChildRepoManagerConfig provides configuration for a roller which
// combines a pre-defined Parent and Child type.
type ParentChildRepoManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent is the entity which depends on the child and receives the rolls.
	//
	// Types that are assignable to Parent:
	//	*ParentChildRepoManagerConfig_CopyParent
	//	*ParentChildRepoManagerConfig_DepsLocalGithubParent
	//	*ParentChildRepoManagerConfig_DepsLocalGerritParent
	//	*ParentChildRepoManagerConfig_GitCheckoutGithubFileParent
	//	*ParentChildRepoManagerConfig_GitilesParent
	Parent isParentChildRepoManagerConfig_Parent `protobuf_oneof:"parent"`
	// child is the entity which is depended on by the parent and is rolled.
	//
	// Types that are assignable to Child:
	//	*ParentChildRepoManagerConfig_CipdChild
	//	*ParentChildRepoManagerConfig_FuchsiaSdkChild
	//	*ParentChildRepoManagerConfig_GitCheckoutChild
	//	*ParentChildRepoManagerConfig_GitCheckoutGithubChild
	//	*ParentChildRepoManagerConfig_GitilesChild
	//	*ParentChildRepoManagerConfig_SemverGcsChild
	Child isParentChildRepoManagerConfig_Child `protobuf_oneof:"child"`
	// revision_filter filters out revisions of the child which should not be
	// considered as roll candidates.
	//
	// Types that are assignable to RevisionFilter:
	//	*ParentChildRepoManagerConfig_BuildbucketRevisionFilter
	RevisionFilter isParentChildRepoManagerConfig_RevisionFilter `protobuf_oneof:"revision_filter"`
}

func (x *ParentChildRepoManagerConfig) Reset() {
	*x = ParentChildRepoManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentChildRepoManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentChildRepoManagerConfig) ProtoMessage() {}

func (x *ParentChildRepoManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentChildRepoManagerConfig.ProtoReflect.Descriptor instead.
func (*ParentChildRepoManagerConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{39}
}

func (m *ParentChildRepoManagerConfig) GetParent() isParentChildRepoManagerConfig_Parent {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetCopyParent() *CopyParentConfig {
	if x, ok := x.GetParent().(*ParentChildRepoManagerConfig_CopyParent); ok {
		return x.CopyParent
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetDepsLocalGithubParent() *DEPSLocalGitHubParentConfig {
	if x, ok := x.GetParent().(*ParentChildRepoManagerConfig_DepsLocalGithubParent); ok {
		return x.DepsLocalGithubParent
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetDepsLocalGerritParent() *DEPSLocalGerritParentConfig {
	if x, ok := x.GetParent().(*ParentChildRepoManagerConfig_DepsLocalGerritParent); ok {
		return x.DepsLocalGerritParent
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetGitCheckoutGithubFileParent() *GitCheckoutGitHubFileParentConfig {
	if x, ok := x.GetParent().(*ParentChildRepoManagerConfig_GitCheckoutGithubFileParent); ok {
		return x.GitCheckoutGithubFileParent
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetGitilesParent() *GitilesParentConfig {
	if x, ok := x.GetParent().(*ParentChildRepoManagerConfig_GitilesParent); ok {
		return x.GitilesParent
	}
	return nil
}

func (m *ParentChildRepoManagerConfig) GetChild() isParentChildRepoManagerConfig_Child {
	if m != nil {
		return m.Child
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetCipdChild() *CIPDChildConfig {
	if x, ok := x.GetChild().(*ParentChildRepoManagerConfig_CipdChild); ok {
		return x.CipdChild
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetFuchsiaSdkChild() *FuchsiaSDKChildConfig {
	if x, ok := x.GetChild().(*ParentChildRepoManagerConfig_FuchsiaSdkChild); ok {
		return x.FuchsiaSdkChild
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetGitCheckoutChild() *GitCheckoutChildConfig {
	if x, ok := x.GetChild().(*ParentChildRepoManagerConfig_GitCheckoutChild); ok {
		return x.GitCheckoutChild
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetGitCheckoutGithubChild() *GitCheckoutGitHubChildConfig {
	if x, ok := x.GetChild().(*ParentChildRepoManagerConfig_GitCheckoutGithubChild); ok {
		return x.GitCheckoutGithubChild
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetGitilesChild() *GitilesChildConfig {
	if x, ok := x.GetChild().(*ParentChildRepoManagerConfig_GitilesChild); ok {
		return x.GitilesChild
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetSemverGcsChild() *SemVerGCSChildConfig {
	if x, ok := x.GetChild().(*ParentChildRepoManagerConfig_SemverGcsChild); ok {
		return x.SemverGcsChild
	}
	return nil
}

func (m *ParentChildRepoManagerConfig) GetRevisionFilter() isParentChildRepoManagerConfig_RevisionFilter {
	if m != nil {
		return m.RevisionFilter
	}
	return nil
}

func (x *ParentChildRepoManagerConfig) GetBuildbucketRevisionFilter() *BuildbucketRevisionFilterConfig {
	if x, ok := x.GetRevisionFilter().(*ParentChildRepoManagerConfig_BuildbucketRevisionFilter); ok {
		return x.BuildbucketRevisionFilter
	}
	return nil
}

type isParentChildRepoManagerConfig_Parent interface {
	isParentChildRepoManagerConfig_Parent()
}

type ParentChildRepoManagerConfig_CopyParent struct {
	CopyParent *CopyParentConfig `protobuf:"bytes,1,opt,name=copy_parent,json=copyParent,proto3,oneof"`
}

type ParentChildRepoManagerConfig_DepsLocalGithubParent struct {
	DepsLocalGithubParent *DEPSLocalGitHubParentConfig `protobuf:"bytes,2,opt,name=deps_local_github_parent,json=depsLocalGithubParent,proto3,oneof"`
}

type ParentChildRepoManagerConfig_DepsLocalGerritParent struct {
	DepsLocalGerritParent *DEPSLocalGerritParentConfig `protobuf:"bytes,3,opt,name=deps_local_gerrit_parent,json=depsLocalGerritParent,proto3,oneof"`
}

type ParentChildRepoManagerConfig_GitCheckoutGithubFileParent struct {
	GitCheckoutGithubFileParent *GitCheckoutGitHubFileParentConfig `protobuf:"bytes,4,opt,name=git_checkout_github_file_parent,json=gitCheckoutGithubFileParent,proto3,oneof"`
}

type ParentChildRepoManagerConfig_GitilesParent struct {
	GitilesParent *GitilesParentConfig `protobuf:"bytes,5,opt,name=gitiles_parent,json=gitilesParent,proto3,oneof"`
}

func (*ParentChildRepoManagerConfig_CopyParent) isParentChildRepoManagerConfig_Parent() {}

func (*ParentChildRepoManagerConfig_DepsLocalGithubParent) isParentChildRepoManagerConfig_Parent() {}

func (*ParentChildRepoManagerConfig_DepsLocalGerritParent) isParentChildRepoManagerConfig_Parent() {}

func (*ParentChildRepoManagerConfig_GitCheckoutGithubFileParent) isParentChildRepoManagerConfig_Parent() {
}

func (*ParentChildRepoManagerConfig_GitilesParent) isParentChildRepoManagerConfig_Parent() {}

type isParentChildRepoManagerConfig_Child interface {
	isParentChildRepoManagerConfig_Child()
}

type ParentChildRepoManagerConfig_CipdChild struct {
	CipdChild *CIPDChildConfig `protobuf:"bytes,6,opt,name=cipd_child,json=cipdChild,proto3,oneof"`
}

type ParentChildRepoManagerConfig_FuchsiaSdkChild struct {
	FuchsiaSdkChild *FuchsiaSDKChildConfig `protobuf:"bytes,7,opt,name=fuchsia_sdk_child,json=fuchsiaSdkChild,proto3,oneof"`
}

type ParentChildRepoManagerConfig_GitCheckoutChild struct {
	GitCheckoutChild *GitCheckoutChildConfig `protobuf:"bytes,8,opt,name=git_checkout_child,json=gitCheckoutChild,proto3,oneof"`
}

type ParentChildRepoManagerConfig_GitCheckoutGithubChild struct {
	GitCheckoutGithubChild *GitCheckoutGitHubChildConfig `protobuf:"bytes,9,opt,name=git_checkout_github_child,json=gitCheckoutGithubChild,proto3,oneof"`
}

type ParentChildRepoManagerConfig_GitilesChild struct {
	GitilesChild *GitilesChildConfig `protobuf:"bytes,10,opt,name=gitiles_child,json=gitilesChild,proto3,oneof"`
}

type ParentChildRepoManagerConfig_SemverGcsChild struct {
	SemverGcsChild *SemVerGCSChildConfig `protobuf:"bytes,11,opt,name=semver_gcs_child,json=semverGcsChild,proto3,oneof"`
}

func (*ParentChildRepoManagerConfig_CipdChild) isParentChildRepoManagerConfig_Child() {}

func (*ParentChildRepoManagerConfig_FuchsiaSdkChild) isParentChildRepoManagerConfig_Child() {}

func (*ParentChildRepoManagerConfig_GitCheckoutChild) isParentChildRepoManagerConfig_Child() {}

func (*ParentChildRepoManagerConfig_GitCheckoutGithubChild) isParentChildRepoManagerConfig_Child() {}

func (*ParentChildRepoManagerConfig_GitilesChild) isParentChildRepoManagerConfig_Child() {}

func (*ParentChildRepoManagerConfig_SemverGcsChild) isParentChildRepoManagerConfig_Child() {}

type isParentChildRepoManagerConfig_RevisionFilter interface {
	isParentChildRepoManagerConfig_RevisionFilter()
}

type ParentChildRepoManagerConfig_BuildbucketRevisionFilter struct {
	BuildbucketRevisionFilter *BuildbucketRevisionFilterConfig `protobuf:"bytes,12,opt,name=buildbucket_revision_filter,json=buildbucketRevisionFilter,proto3,oneof"`
}

func (*ParentChildRepoManagerConfig_BuildbucketRevisionFilter) isParentChildRepoManagerConfig_RevisionFilter() {
}

// CopyParentConfig provides configuration for a Parent which copies the Child
// into itself. It uses Gitiles and Gerrit instead of a local checkout.
type CopyParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitiles *GitilesParentConfig          `protobuf:"bytes,1,opt,name=gitiles,proto3" json:"gitiles,omitempty"`
	Copies  []*CopyParentConfig_CopyEntry `protobuf:"bytes,2,rep,name=copies,proto3" json:"copies,omitempty"`
}

func (x *CopyParentConfig) Reset() {
	*x = CopyParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyParentConfig) ProtoMessage() {}

func (x *CopyParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyParentConfig.ProtoReflect.Descriptor instead.
func (*CopyParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *CopyParentConfig) GetGitiles() *GitilesParentConfig {
	if x != nil {
		return x.Gitiles
	}
	return nil
}

func (x *CopyParentConfig) GetCopies() []*CopyParentConfig_CopyEntry {
	if x != nil {
		return x.Copies
	}
	return nil
}

// DEPSLocalGitHubParentConfig provides configuration for a Parent which uses a
// local Git checkout with DEPS and uploads pull requests to GitHub.
type DEPSLocalGitHubParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepsLocal   *DEPSLocalParentConfig `protobuf:"bytes,1,opt,name=deps_local,json=depsLocal,proto3" json:"deps_local,omitempty"`
	Github      *GitHubConfig          `protobuf:"bytes,2,opt,name=github,proto3" json:"github,omitempty"`
	ForkRepoUrl string                 `protobuf:"bytes,3,opt,name=fork_repo_url,json=forkRepoUrl,proto3" json:"fork_repo_url,omitempty"`
}

func (x *DEPSLocalGitHubParentConfig) Reset() {
	*x = DEPSLocalGitHubParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DEPSLocalGitHubParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEPSLocalGitHubParentConfig) ProtoMessage() {}

func (x *DEPSLocalGitHubParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEPSLocalGitHubParentConfig.ProtoReflect.Descriptor instead.
func (*DEPSLocalGitHubParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *DEPSLocalGitHubParentConfig) GetDepsLocal() *DEPSLocalParentConfig {
	if x != nil {
		return x.DepsLocal
	}
	return nil
}

func (x *DEPSLocalGitHubParentConfig) GetGithub() *GitHubConfig {
	if x != nil {
		return x.Github
	}
	return nil
}

func (x *DEPSLocalGitHubParentConfig) GetForkRepoUrl() string {
	if x != nil {
		return x.ForkRepoUrl
	}
	return ""
}

// DEPSLocalGerritParentConfig provides configuration for a Parent which uses a
// local Git checkout with DEPS and uploads CLs to Gerrit.
type DEPSLocalGerritParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepsLocal *DEPSLocalParentConfig `protobuf:"bytes,1,opt,name=deps_local,json=depsLocal,proto3" json:"deps_local,omitempty"`
	Gerrit    *GerritConfig          `protobuf:"bytes,2,opt,name=gerrit,proto3" json:"gerrit,omitempty"`
}

func (x *DEPSLocalGerritParentConfig) Reset() {
	*x = DEPSLocalGerritParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DEPSLocalGerritParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEPSLocalGerritParentConfig) ProtoMessage() {}

func (x *DEPSLocalGerritParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEPSLocalGerritParentConfig.ProtoReflect.Descriptor instead.
func (*DEPSLocalGerritParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *DEPSLocalGerritParentConfig) GetDepsLocal() *DEPSLocalParentConfig {
	if x != nil {
		return x.DepsLocal
	}
	return nil
}

func (x *DEPSLocalGerritParentConfig) GetGerrit() *GerritConfig {
	if x != nil {
		return x.Gerrit
	}
	return nil
}

// GitCheckoutGitHubParentConfig provides configuration for a Parent which
// uses a local Git checkout and uploads pull requests to GitHub.
// TODO(borenet): Why doesn't this contain the GitHubConfig? Is this even
// needed?
type GitCheckoutGitHubParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCheckout *GitCheckoutParentConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
	ForkRepoUrl string                   `protobuf:"bytes,2,opt,name=fork_repo_url,json=forkRepoUrl,proto3" json:"fork_repo_url,omitempty"`
}

func (x *GitCheckoutGitHubParentConfig) Reset() {
	*x = GitCheckoutGitHubParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutGitHubParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutGitHubParentConfig) ProtoMessage() {}

func (x *GitCheckoutGitHubParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutGitHubParentConfig.ProtoReflect.Descriptor instead.
func (*GitCheckoutGitHubParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *GitCheckoutGitHubParentConfig) GetGitCheckout() *GitCheckoutParentConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

func (x *GitCheckoutGitHubParentConfig) GetForkRepoUrl() string {
	if x != nil {
		return x.ForkRepoUrl
	}
	return ""
}

// GitCheckoutGitHubFileParentConfig provides configuration for a Parent which
// uses a local Git checkout and uploads pull requests to GitHub.
type GitCheckoutGitHubFileParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCheckout    *GitCheckoutGitHubParentConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
	PreUploadSteps []PreUploadStep                `protobuf:"varint,2,rep,packed,name=pre_upload_steps,json=preUploadSteps,proto3,enum=autoroll.rpc.PreUploadStep" json:"pre_upload_steps,omitempty"`
}

func (x *GitCheckoutGitHubFileParentConfig) Reset() {
	*x = GitCheckoutGitHubFileParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutGitHubFileParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutGitHubFileParentConfig) ProtoMessage() {}

func (x *GitCheckoutGitHubFileParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutGitHubFileParentConfig.ProtoReflect.Descriptor instead.
func (*GitCheckoutGitHubFileParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *GitCheckoutGitHubFileParentConfig) GetGitCheckout() *GitCheckoutGitHubParentConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

func (x *GitCheckoutGitHubFileParentConfig) GetPreUploadSteps() []PreUploadStep {
	if x != nil {
		return x.PreUploadSteps
	}
	return nil
}

// GitilesParentConfig provides configuration for a Parent which uses Gitiles.
type GitilesParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitiles *GitilesConfig    `protobuf:"bytes,1,opt,name=gitiles,proto3" json:"gitiles,omitempty"`
	Dep     *DependencyConfig `protobuf:"bytes,2,opt,name=dep,proto3" json:"dep,omitempty"`
	Gerrit  *GerritConfig     `protobuf:"bytes,3,opt,name=gerrit,proto3" json:"gerrit,omitempty"`
}

func (x *GitilesParentConfig) Reset() {
	*x = GitilesParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitilesParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesParentConfig) ProtoMessage() {}

func (x *GitilesParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesParentConfig.ProtoReflect.Descriptor instead.
func (*GitilesParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *GitilesParentConfig) GetGitiles() *GitilesConfig {
	if x != nil {
		return x.Gitiles
	}
	return nil
}

func (x *GitilesParentConfig) GetDep() *DependencyConfig {
	if x != nil {
		return x.Dep
	}
	return nil
}

func (x *GitilesParentConfig) GetGerrit() *GerritConfig {
	if x != nil {
		return x.Gerrit
	}
	return nil
}

// GitilesConfig provides configuration for a Git repo in Gitiles.
type GitilesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// branch to track.
	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// repo_url from which to load Git data.
	RepoUrl string `protobuf:"bytes,2,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	// dependencies is an optional specification of dependencies to track.
	// Revisions generated by the checkout will contain the pinned versions of
	// these dependencies.
	Dependencies []*VersionFileConfig `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *GitilesConfig) Reset() {
	*x = GitilesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitilesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesConfig) ProtoMessage() {}

func (x *GitilesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesConfig.ProtoReflect.Descriptor instead.
func (*GitilesConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *GitilesConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitilesConfig) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GitilesConfig) GetDependencies() []*VersionFileConfig {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// DEPSLocalConfig provides configuration for a Parent which uses a local
// checkout and DEPS to manage dependencies.
type DEPSLocalParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCheckout *GitCheckoutParentConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
	// child_path is the path to the child repo within the parent.
	ChildPath string `protobuf:"bytes,2,opt,name=child_path,json=childPath,proto3" json:"child_path,omitempty"`
	// child_subdir is the subdirectory of the workdir in which the child_path
	// should be rooted.  In most cases, this should be empty, but if child_path
	// is relative to the parent repo dir (eg. when DEPS specifies
	// use_relative_paths), then this is required.
	ChildSubdir string `protobuf:"bytes,3,opt,name=child_subdir,json=childSubdir,proto3" json:"child_subdir,omitempty"`
	// checkout_path is the path to the repo within the checkout root
	CheckoutPath string `protobuf:"bytes,4,opt,name=checkout_path,json=checkoutPath,proto3" json:"checkout_path,omitempty"`
	// gclient_spec overrides the default gclient spec.
	GclientSpec string `protobuf:"bytes,5,opt,name=gclient_spec,json=gclientSpec,proto3" json:"gclient_spec,omitempty"`
	// pre_upload_steps are steps to run before uploading the CL.
	PreUploadSteps []PreUploadStep `protobuf:"varint,6,rep,packed,name=pre_upload_steps,json=preUploadSteps,proto3,enum=autoroll.rpc.PreUploadStep" json:"pre_upload_steps,omitempty"`
	// run_hooks indicates whether to run "gclient runhooks" after syncing.
	RunHooks bool `protobuf:"varint,7,opt,name=run_hooks,json=runHooks,proto3" json:"run_hooks,omitempty"`
}

func (x *DEPSLocalParentConfig) Reset() {
	*x = DEPSLocalParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DEPSLocalParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEPSLocalParentConfig) ProtoMessage() {}

func (x *DEPSLocalParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEPSLocalParentConfig.ProtoReflect.Descriptor instead.
func (*DEPSLocalParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *DEPSLocalParentConfig) GetGitCheckout() *GitCheckoutParentConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

func (x *DEPSLocalParentConfig) GetChildPath() string {
	if x != nil {
		return x.ChildPath
	}
	return ""
}

func (x *DEPSLocalParentConfig) GetChildSubdir() string {
	if x != nil {
		return x.ChildSubdir
	}
	return ""
}

func (x *DEPSLocalParentConfig) GetCheckoutPath() string {
	if x != nil {
		return x.CheckoutPath
	}
	return ""
}

func (x *DEPSLocalParentConfig) GetGclientSpec() string {
	if x != nil {
		return x.GclientSpec
	}
	return ""
}

func (x *DEPSLocalParentConfig) GetPreUploadSteps() []PreUploadStep {
	if x != nil {
		return x.PreUploadSteps
	}
	return nil
}

func (x *DEPSLocalParentConfig) GetRunHooks() bool {
	if x != nil {
		return x.RunHooks
	}
	return false
}

// GitCheckoutParentConfig provides configuration for a Parent which uses a
// local checkout to create changes.
type GitCheckoutParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCheckout *GitCheckoutConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
	Dep         *DependencyConfig  `protobuf:"bytes,2,opt,name=dep,proto3" json:"dep,omitempty"`
}

func (x *GitCheckoutParentConfig) Reset() {
	*x = GitCheckoutParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutParentConfig) ProtoMessage() {}

func (x *GitCheckoutParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutParentConfig.ProtoReflect.Descriptor instead.
func (*GitCheckoutParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *GitCheckoutParentConfig) GetGitCheckout() *GitCheckoutConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

func (x *GitCheckoutParentConfig) GetDep() *DependencyConfig {
	if x != nil {
		return x.Dep
	}
	return nil
}

// FreeTypeParentConfig provides configuration for the FreeType Parent.
type FreeTypeParentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitiles *GitilesParentConfig `protobuf:"bytes,1,opt,name=gitiles,proto3" json:"gitiles,omitempty"`
}

func (x *FreeTypeParentConfig) Reset() {
	*x = FreeTypeParentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeTypeParentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeTypeParentConfig) ProtoMessage() {}

func (x *FreeTypeParentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeTypeParentConfig.ProtoReflect.Descriptor instead.
func (*FreeTypeParentConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{49}
}

func (x *FreeTypeParentConfig) GetGitiles() *GitilesParentConfig {
	if x != nil {
		return x.Gitiles
	}
	return nil
}

// CIPDChildConfig provides configuration for a CIPD package Child.
type CIPDChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// tag to track.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *CIPDChildConfig) Reset() {
	*x = CIPDChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIPDChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDChildConfig) ProtoMessage() {}

func (x *CIPDChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDChildConfig.ProtoReflect.Descriptor instead.
func (*CIPDChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *CIPDChildConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CIPDChildConfig) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// FuchsiaSDKChildConfig provides configuration for the Fuchsia SDK Child.
type FuchsiaSDKChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// include_mac_sdk indicates whether to also roll the version of the Mac
	// SDK. Note that the dependency is not tracked separately; the Mac SDK is
	// simply rolled to the newest available version.
	IncludeMacSdk bool `protobuf:"varint,1,opt,name=include_mac_sdk,json=includeMacSdk,proto3" json:"include_mac_sdk,omitempty"`
}

func (x *FuchsiaSDKChildConfig) Reset() {
	*x = FuchsiaSDKChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuchsiaSDKChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuchsiaSDKChildConfig) ProtoMessage() {}

func (x *FuchsiaSDKChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuchsiaSDKChildConfig.ProtoReflect.Descriptor instead.
func (*FuchsiaSDKChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{51}
}

func (x *FuchsiaSDKChildConfig) GetIncludeMacSdk() bool {
	if x != nil {
		return x.IncludeMacSdk
	}
	return false
}

// SemVerGCSChildConfig provides configuration for a Child in GCS which uses
// semantic versioning.
type SemVerGCSChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gcs *GCSChildConfig `protobuf:"bytes,1,opt,name=gcs,proto3" json:"gcs,omitempty"`
	// short_rev_regex is a regular expression string which indicates what part
	// of the revision ID string should be used as the shortened ID for display.
	// If not specified, the full ID string is used.
	ShortRevRegex string `protobuf:"bytes,2,opt,name=short_rev_regex,json=shortRevRegex,proto3" json:"short_rev_regex,omitempty"`
	// version_regex is a regular expression string containing one or more
	// integer capture groups. The integers matched by the capture groups are
	// compared, in order, when comparing two revisions.
	VersionRegex string `protobuf:"bytes,3,opt,name=version_regex,json=versionRegex,proto3" json:"version_regex,omitempty"`
}

func (x *SemVerGCSChildConfig) Reset() {
	*x = SemVerGCSChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemVerGCSChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemVerGCSChildConfig) ProtoMessage() {}

func (x *SemVerGCSChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemVerGCSChildConfig.ProtoReflect.Descriptor instead.
func (*SemVerGCSChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *SemVerGCSChildConfig) GetGcs() *GCSChildConfig {
	if x != nil {
		return x.Gcs
	}
	return nil
}

func (x *SemVerGCSChildConfig) GetShortRevRegex() string {
	if x != nil {
		return x.ShortRevRegex
	}
	return ""
}

func (x *SemVerGCSChildConfig) GetVersionRegex() string {
	if x != nil {
		return x.VersionRegex
	}
	return ""
}

// GCSChildConfig provides configuration for a Child in GCS.
type GCSChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gcs_bucket used for finding Child revisions.
	GcsBucket string `protobuf:"bytes,1,opt,name=gcs_bucket,json=gcsBucket,proto3" json:"gcs_bucket,omitempty"`
	// gcs_path within the bucket which contains child revisions.
	GcsPath string `protobuf:"bytes,2,opt,name=gcs_path,json=gcsPath,proto3" json:"gcs_path,omitempty"`
}

func (x *GCSChildConfig) Reset() {
	*x = GCSChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSChildConfig) ProtoMessage() {}

func (x *GCSChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSChildConfig.ProtoReflect.Descriptor instead.
func (*GCSChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{53}
}

func (x *GCSChildConfig) GetGcsBucket() string {
	if x != nil {
		return x.GcsBucket
	}
	return ""
}

func (x *GCSChildConfig) GetGcsPath() string {
	if x != nil {
		return x.GcsPath
	}
	return ""
}

// GitCheckoutChildConfig provides configuration for a Child which uses a local
// Git checkout.
type GitCheckoutChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCheckout *GitCheckoutConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
}

func (x *GitCheckoutChildConfig) Reset() {
	*x = GitCheckoutChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutChildConfig) ProtoMessage() {}

func (x *GitCheckoutChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutChildConfig.ProtoReflect.Descriptor instead.
func (*GitCheckoutChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{54}
}

func (x *GitCheckoutChildConfig) GetGitCheckout() *GitCheckoutConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

// GitCheckoutGitHubChildConfig provides configuration for a Child which uses a
// local checkout of a GitHub repo.
type GitCheckoutGitHubChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCheckout *GitCheckoutChildConfig `protobuf:"bytes,1,opt,name=git_checkout,json=gitCheckout,proto3" json:"git_checkout,omitempty"`
	RepoOwner   string                  `protobuf:"bytes,2,opt,name=repo_owner,json=repoOwner,proto3" json:"repo_owner,omitempty"`
	RepoName    string                  `protobuf:"bytes,3,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *GitCheckoutGitHubChildConfig) Reset() {
	*x = GitCheckoutGitHubChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutGitHubChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutGitHubChildConfig) ProtoMessage() {}

func (x *GitCheckoutGitHubChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutGitHubChildConfig.ProtoReflect.Descriptor instead.
func (*GitCheckoutGitHubChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{55}
}

func (x *GitCheckoutGitHubChildConfig) GetGitCheckout() *GitCheckoutChildConfig {
	if x != nil {
		return x.GitCheckout
	}
	return nil
}

func (x *GitCheckoutGitHubChildConfig) GetRepoOwner() string {
	if x != nil {
		return x.RepoOwner
	}
	return ""
}

func (x *GitCheckoutGitHubChildConfig) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

// GitilesChildConfig provides configuration for a Child which uses Gitiles.
type GitilesChildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitiles *GitilesConfig `protobuf:"bytes,1,opt,name=gitiles,proto3" json:"gitiles,omitempty"`
	// path indicates an optional single path of the repo to watch for changes;
	// all commits which do not change this path are ignored.  Note that this
	// may produce strange results if the Git history for the path is not
	// linear.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GitilesChildConfig) Reset() {
	*x = GitilesChildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitilesChildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesChildConfig) ProtoMessage() {}

func (x *GitilesChildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesChildConfig.ProtoReflect.Descriptor instead.
func (*GitilesChildConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{56}
}

func (x *GitilesChildConfig) GetGitiles() *GitilesConfig {
	if x != nil {
		return x.Gitiles
	}
	return nil
}

func (x *GitilesChildConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// NotifierConfig provides configuration for a notification system.
type NotifierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// log_level allows all messages at and above the given severity to be
	// sent. Mutually exclusive with msg_type.
	LogLevel NotifierConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=autoroll.rpc.NotifierConfig_LogLevel" json:"log_level,omitempty"`
	// msg_type limits the notifier to only send messages of the given
	// types. Mutually exclusive with log_level.
	MsgType []NotifierConfig_MsgType `protobuf:"varint,2,rep,packed,name=msg_type,json=msgType,proto3,enum=autoroll.rpc.NotifierConfig_MsgType" json:"msg_type,omitempty"`
	// config provides configuration for the specific type of notifier.
	//
	// Types that are assignable to Config:
	//	*NotifierConfig_Email
	//	*NotifierConfig_Chat
	//	*NotifierConfig_Monorail
	//	*NotifierConfig_Pubsub
	Config isNotifierConfig_Config `protobuf_oneof:"config"`
	// subject indicates a subject line which overrides the default subject line
	// for every notification message, if provided.
	Subject string `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *NotifierConfig) Reset() {
	*x = NotifierConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifierConfig) ProtoMessage() {}

func (x *NotifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifierConfig.ProtoReflect.Descriptor instead.
func (*NotifierConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{57}
}

func (x *NotifierConfig) GetLogLevel() NotifierConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return NotifierConfig_SILENT
}

func (x *NotifierConfig) GetMsgType() []NotifierConfig_MsgType {
	if x != nil {
		return x.MsgType
	}
	return nil
}

func (m *NotifierConfig) GetConfig() isNotifierConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *NotifierConfig) GetEmail() *EmailNotifierConfig {
	if x, ok := x.GetConfig().(*NotifierConfig_Email); ok {
		return x.Email
	}
	return nil
}

func (x *NotifierConfig) GetChat() *ChatNotifierConfig {
	if x, ok := x.GetConfig().(*NotifierConfig_Chat); ok {
		return x.Chat
	}
	return nil
}

func (x *NotifierConfig) GetMonorail() *MonorailNotifierConfig {
	if x, ok := x.GetConfig().(*NotifierConfig_Monorail); ok {
		return x.Monorail
	}
	return nil
}

func (x *NotifierConfig) GetPubsub() *PubSubNotifierConfig {
	if x, ok := x.GetConfig().(*NotifierConfig_Pubsub); ok {
		return x.Pubsub
	}
	return nil
}

func (x *NotifierConfig) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type isNotifierConfig_Config interface {
	isNotifierConfig_Config()
}

type NotifierConfig_Email struct {
	Email *EmailNotifierConfig `protobuf:"bytes,3,opt,name=email,proto3,oneof"`
}

type NotifierConfig_Chat struct {
	Chat *ChatNotifierConfig `protobuf:"bytes,4,opt,name=chat,proto3,oneof"`
}

type NotifierConfig_Monorail struct {
	Monorail *MonorailNotifierConfig `protobuf:"bytes,5,opt,name=monorail,proto3,oneof"`
}

type NotifierConfig_Pubsub struct {
	Pubsub *PubSubNotifierConfig `protobuf:"bytes,6,opt,name=pubsub,proto3,oneof"`
}

func (*NotifierConfig_Email) isNotifierConfig_Config() {}

func (*NotifierConfig_Chat) isNotifierConfig_Config() {}

func (*NotifierConfig_Monorail) isNotifierConfig_Config() {}

func (*NotifierConfig_Pubsub) isNotifierConfig_Config() {}

// EmailNotifierConfig provides configuration for email notifications.
type EmailNotifierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// emails are the email addresses which should receive notifications.
	Emails []string `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *EmailNotifierConfig) Reset() {
	*x = EmailNotifierConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailNotifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailNotifierConfig) ProtoMessage() {}

func (x *EmailNotifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailNotifierConfig.ProtoReflect.Descriptor instead.
func (*EmailNotifierConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{58}
}

func (x *EmailNotifierConfig) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

// ChatNotifierConfig provides configuration for Google Chat notifications.
type ChatNotifierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// room_id in which to post messages.
	RoomId string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *ChatNotifierConfig) Reset() {
	*x = ChatNotifierConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatNotifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatNotifierConfig) ProtoMessage() {}

func (x *ChatNotifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatNotifierConfig.ProtoReflect.Descriptor instead.
func (*ChatNotifierConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{59}
}

func (x *ChatNotifierConfig) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

// MonorailNotifierConfig provides configuration for bug-filing "notifications"
// using Monorail.
type MonorailNotifierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project name under which to file bugs. Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// owner of bugs filed in Monorail. Required.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// cc these email addresses on bugs filed in Monorail.
	Cc []string `protobuf:"bytes,3,rep,name=cc,proto3" json:"cc,omitempty"`
	// components to apply to bugs filed in Monorail.
	Components []string `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty"`
	// labels to apply to bugs filed in Monorail.
	Labels []string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *MonorailNotifierConfig) Reset() {
	*x = MonorailNotifierConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailNotifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailNotifierConfig) ProtoMessage() {}

func (x *MonorailNotifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailNotifierConfig.ProtoReflect.Descriptor instead.
func (*MonorailNotifierConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{60}
}

func (x *MonorailNotifierConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MonorailNotifierConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *MonorailNotifierConfig) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *MonorailNotifierConfig) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *MonorailNotifierConfig) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// PubSubNotifierConfig provides configuration for PubSub notifications.
type PubSubNotifierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic under which to publish PubSub messages.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *PubSubNotifierConfig) Reset() {
	*x = PubSubNotifierConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubNotifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubNotifierConfig) ProtoMessage() {}

func (x *PubSubNotifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubNotifierConfig.ProtoReflect.Descriptor instead.
func (*PubSubNotifierConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{61}
}

func (x *PubSubNotifierConfig) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// ThrottleConfig provides configuration for throttling.
type ThrottleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// attempt_count indicates the number of failed attempts after which to
	// begin throttling.
	AttemptCount int32 `protobuf:"varint,1,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	// time_window during which, if the number of failed attempts exceeds the
	// specified attempt_count, throttling is enabled.
	TimeWindow string `protobuf:"bytes,2,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
}

func (x *ThrottleConfig) Reset() {
	*x = ThrottleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottleConfig) ProtoMessage() {}

func (x *ThrottleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottleConfig.ProtoReflect.Descriptor instead.
func (*ThrottleConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{62}
}

func (x *ThrottleConfig) GetAttemptCount() int32 {
	if x != nil {
		return x.AttemptCount
	}
	return 0
}

func (x *ThrottleConfig) GetTimeWindow() string {
	if x != nil {
		return x.TimeWindow
	}
	return ""
}

// TransitiveDepConfig provides configuration for a dependency referenced by
// both the parent and child, to be updated in the parent to match the revision
// depended on by the child at the revision being rolled.
type TransitiveDepConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// child dependency information.
	Child *VersionFileConfig `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	// parent dependency information.
	Parent *VersionFileConfig `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *TransitiveDepConfig) Reset() {
	*x = TransitiveDepConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitiveDepConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitiveDepConfig) ProtoMessage() {}

func (x *TransitiveDepConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitiveDepConfig.ProtoReflect.Descriptor instead.
func (*TransitiveDepConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{63}
}

func (x *TransitiveDepConfig) GetChild() *VersionFileConfig {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *TransitiveDepConfig) GetParent() *VersionFileConfig {
	if x != nil {
		return x.Parent
	}
	return nil
}

// VersionFileConfig provides configuration for a dependency whose version is
// pinned within a particular file.
type VersionFileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the dependency to be rolled, eg. a repo URL.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// path within the repo of the file which pins the dependency.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *VersionFileConfig) Reset() {
	*x = VersionFileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionFileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionFileConfig) ProtoMessage() {}

func (x *VersionFileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionFileConfig.ProtoReflect.Descriptor instead.
func (*VersionFileConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{64}
}

func (x *VersionFileConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VersionFileConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// DependencyConfig provides configuration for a dependency whose version is
// pinned in a file and which may have transitive dependencies.
type DependencyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary dependency.
	Primary *VersionFileConfig `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	// transitive dependencies.
	Transitive []*TransitiveDepConfig `protobuf:"bytes,2,rep,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *DependencyConfig) Reset() {
	*x = DependencyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyConfig) ProtoMessage() {}

func (x *DependencyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyConfig.ProtoReflect.Descriptor instead.
func (*DependencyConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{65}
}

func (x *DependencyConfig) GetPrimary() *VersionFileConfig {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *DependencyConfig) GetTransitive() []*TransitiveDepConfig {
	if x != nil {
		return x.Transitive
	}
	return nil
}

// GitCheckoutConfig provides configuration for a Git checkout.
type GitCheckoutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// branch to track.
	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// repo_url to check out.
	RepoUrl string `protobuf:"bytes,2,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	// rev_link_tmpl is an optional template used for generating links to
	// revisions. If not specified, revisions generated by the checkout will not
	// have an associated URL.
	RevLinkTmpl string `protobuf:"bytes,3,opt,name=rev_link_tmpl,json=revLinkTmpl,proto3" json:"rev_link_tmpl,omitempty"`
	// dependencies is an optional specification of dependencies to track.
	// Revisions generated by the checkout will contain the pinned versions of
	// these dependencies.
	Dependencies []*VersionFileConfig `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *GitCheckoutConfig) Reset() {
	*x = GitCheckoutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutConfig) ProtoMessage() {}

func (x *GitCheckoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutConfig.ProtoReflect.Descriptor instead.
func (*GitCheckoutConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{66}
}

func (x *GitCheckoutConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitCheckoutConfig) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GitCheckoutConfig) GetRevLinkTmpl() string {
	if x != nil {
		return x.RevLinkTmpl
	}
	return ""
}

func (x *GitCheckoutConfig) GetDependencies() []*VersionFileConfig {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// BuildbucketRevisionFilterConfig provides configuration for a revision filter
// which uses Buildbucket.
type BuildbucketRevisionFilterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Bucket  string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *BuildbucketRevisionFilterConfig) Reset() {
	*x = BuildbucketRevisionFilterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildbucketRevisionFilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildbucketRevisionFilterConfig) ProtoMessage() {}

func (x *BuildbucketRevisionFilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildbucketRevisionFilterConfig.ProtoReflect.Descriptor instead.
func (*BuildbucketRevisionFilterConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{67}
}

func (x *BuildbucketRevisionFilterConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BuildbucketRevisionFilterConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

// ProjectMetadataFileConfig provides configuration for METADATA files in
// the Android repo.
type AndroidRepoManagerConfig_ProjectMetadataFileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// file_path of the project metadata file within the repo.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// name of the project.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the project.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// home_page of the project.
	HomePage string `protobuf:"bytes,4,opt,name=home_page,json=homePage,proto3" json:"home_page,omitempty"`
	// git_url of the project.
	GitUrl string `protobuf:"bytes,5,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	// license_type of the project.
	LicenseType string `protobuf:"bytes,6,opt,name=license_type,json=licenseType,proto3" json:"license_type,omitempty"`
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) Reset() {
	*x = AndroidRepoManagerConfig_ProjectMetadataFileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidRepoManagerConfig_ProjectMetadataFileConfig) ProtoMessage() {}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidRepoManagerConfig_ProjectMetadataFileConfig.ProtoReflect.Descriptor instead.
func (*AndroidRepoManagerConfig_ProjectMetadataFileConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{34, 0}
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) GetHomePage() string {
	if x != nil {
		return x.HomePage
	}
	return ""
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *AndroidRepoManagerConfig_ProjectMetadataFileConfig) GetLicenseType() string {
	if x != nil {
		return x.LicenseType
	}
	return ""
}

type CommandRepoManagerConfig_CommandConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// command to run. If this is the command used to update the revision of
	// the Child, this should be a text template which uses SetPinnedRevVars
	// to get the from- and to-revisions.
	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	// dir is the relative path within the Git checkout to run the command.
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	// env are environment variables to supply to the command, in KEY=VALUE
	// format.
	Env []string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *CommandRepoManagerConfig_CommandConfig) Reset() {
	*x = CommandRepoManagerConfig_CommandConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRepoManagerConfig_CommandConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRepoManagerConfig_CommandConfig) ProtoMessage() {}

func (x *CommandRepoManagerConfig_CommandConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRepoManagerConfig_CommandConfig.ProtoReflect.Descriptor instead.
func (*CommandRepoManagerConfig_CommandConfig) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CommandRepoManagerConfig_CommandConfig) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CommandRepoManagerConfig_CommandConfig) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *CommandRepoManagerConfig_CommandConfig) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

type CopyParentConfig_CopyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// src_rel_path is the relative path within the Child.
	SrcRelPath string `protobuf:"bytes,1,opt,name=src_rel_path,json=srcRelPath,proto3" json:"src_rel_path,omitempty"`
	// dst_rel_path is the relative path within the Parent.
	DstRelPath string `protobuf:"bytes,2,opt,name=dst_rel_path,json=dstRelPath,proto3" json:"dst_rel_path,omitempty"`
}

func (x *CopyParentConfig_CopyEntry) Reset() {
	*x = CopyParentConfig_CopyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyParentConfig_CopyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyParentConfig_CopyEntry) ProtoMessage() {}

func (x *CopyParentConfig_CopyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyParentConfig_CopyEntry.ProtoReflect.Descriptor instead.
func (*CopyParentConfig_CopyEntry) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{40, 0}
}

func (x *CopyParentConfig_CopyEntry) GetSrcRelPath() string {
	if x != nil {
		return x.SrcRelPath
	}
	return ""
}

func (x *CopyParentConfig_CopyEntry) GetDstRelPath() string {
	if x != nil {
		return x.DstRelPath
	}
	return ""
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x76,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x65, 0x68, 0x69, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x42, 0x65, 0x68, 0x69,
	0x6e, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x06, 0x54, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3d, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xc8, 0x03,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x4c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x4c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x08, 0x74, 0x72, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x07, 0x74, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x73,
	0x22, 0x76, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x66, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x66, 0x61, 0x6c,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x22, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xec, 0x05, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x55, 0x72, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x48, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x4c, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c,
	0x6c, 0x43, 0x4c, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x3b, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x4c, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x4d,
	0x69, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x6c, 0x22, 0x30, 0x0a, 0x11, 0x55, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x40, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x23, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x63, 0x6c, 0x22, 0x8e, 0x0d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x66, 0x61, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6c,
	0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x06,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x37, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x33,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x33, 0x12, 0x3e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x12, 0x67, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x01, 0x52, 0x16, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x14, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72,
	0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x01, 0x52, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x5d, 0x0a, 0x15, 0x66, 0x72, 0x65, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x13, 0x66, 0x72,
	0x65, 0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x7a, 0x0a, 0x20, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x5f, 0x73, 0x64, 0x6b,
	0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x63, 0x68, 0x73,
	0x69, 0x61, 0x53, 0x44, 0x4b, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52,
	0x1c, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x53, 0x64, 0x6b, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x33, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x33, 0x52, 0x65,
	0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xf6, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x12,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6d,
	0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4c,
	0x6f, 0x67, 0x55, 0x72, 0x6c, 0x54, 0x6d, 0x70, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x71, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x79, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x71, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x72, 0x79, 0x62,
	0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x63, 0x71, 0x5f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x79, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x71, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x79, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x62,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x62, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22,
	0x23, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f,
	0x49, 0x44, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x54, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48,
	0x52, 0x4f, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x52, 0x4f,
	0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x51, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x49, 0x42, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x72,
	0x0a, 0x0c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x33, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xcb, 0x02, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72,
	0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x22, 0x45, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x90, 0x05, 0x0a, 0x18, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6d, 0x70,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6d, 0x70, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x62, 0x64, 0x69, 0x72, 0x12, 0x45, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xc7, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x18,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x76, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x67, 0x65, 0x74, 0x54, 0x69, 0x70, 0x52, 0x65, 0x76, 0x12, 0x5a, 0x0a, 0x0e, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x76, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x1a, 0x4d, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e,
	0x76, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x46, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x22, 0x46, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x53,
	0x44, 0x4b, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72,
	0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x53,
	0x44, 0x4b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x5f,
	0x62, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67,
	0x65, 0x6e, 0x53, 0x64, 0x6b, 0x42, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x67,
	0x65, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x62, 0x70, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x53, 0x64, 0x6b, 0x42, 0x70,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x33, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x22, 0xf4, 0x08, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f,
	0x70, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x70, 0x73, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x64,
	0x0a, 0x18, 0x64, 0x65, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x64,
	0x65, 0x70, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x1f, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x1b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a,
	0x0e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x69, 0x70,
	0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x49, 0x50,
	0x44, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x69, 0x70, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x66, 0x75, 0x63,
	0x68, 0x73, 0x69, 0x61, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x53, 0x44, 0x4b, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x0f, 0x66, 0x75, 0x63,
	0x68, 0x73, 0x69, 0x61, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x12,
	0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72,
	0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01,
	0x52, 0x10, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x12, 0x67, 0x0a, 0x19, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x01, 0x52, 0x16, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x0d, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x5f, 0x67,
	0x63, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x47, 0x43, 0x53, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x47, 0x63, 0x73, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x6f, 0x0a, 0x1b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x19, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3b, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x1a,
	0x4f, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x65, 0x70, 0x73, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6b,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x95, 0x01, 0x0a,
	0x1b, 0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x65, 0x70, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x32, 0x0a, 0x06, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x21, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x67, 0x69,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67,
	0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x67, 0x69, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x03, 0x64, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x64,
	0x65, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x22, 0xcf, 0x02, 0x0a, 0x15, 0x44, 0x45, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x67, 0x69,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x53, 0x75, 0x62, 0x64, 0x69, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x45,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72,
	0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x48, 0x6f, 0x6f,
	0x6b, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42,
	0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x64, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x64, 0x65, 0x70, 0x22, 0x53, 0x0a, 0x14, 0x46, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x07,
	0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x43, 0x49, 0x50,
	0x44, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x3f, 0x0a, 0x15, 0x46, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x53, 0x44, 0x4b,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x63,
	0x53, 0x64, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x47, 0x43,
	0x53, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x03,
	0x67, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x43, 0x53, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x67, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x76, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0x4a, 0x0a, 0x0e, 0x47, 0x43, 0x53,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x63, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x63,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x63,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x42, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x69, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x35, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb1, 0x05, 0x0a, 0x0e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x43, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x10, 0x04, 0x22, 0xbb, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x57, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x57,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x54,
	0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x08, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2d,
	0x0a, 0x13, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2d, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x16, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x2c, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x56, 0x0a,
	0x0e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a,
	0x11, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x47, 0x69,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x6d, 0x70, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x6d, 0x70, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x1f, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2a, 0x2d, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x2a,
	0x2e, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x2a,
	0x9f, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x50, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x43,
	0x48, 0x52, 0x4f, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x49, 0x50, 0x44, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x55, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x4c, 0x55, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x52, 0x54,
	0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x4c, 0x55, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x46, 0x55, 0x43, 0x48, 0x53, 0x49, 0x41, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x4b, 0x49, 0x41, 0x5f, 0x47, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x50, 0x10, 0x07, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x10, 0x08, 0x12,
	0x20, 0x0a, 0x1c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x55, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x50, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x52, 0x54, 0x10,
	0x09, 0x32, 0xf6, 0x05, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f,
	0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x25,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x55, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x74, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x72, 0x6f, 0x6c, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x6f,
	0x2e, 0x73, 0x6b, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x6c, 0x6c, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_rpc_proto_goTypes = []interface{}{
	(Mode)(0),                                                  // 0: autoroll.rpc.Mode
	(Strategy)(0),                                              // 1: autoroll.rpc.Strategy
	(PreUploadStep)(0),                                         // 2: autoroll.rpc.PreUploadStep
	(TryJob_Result)(0),                                         // 3: autoroll.rpc.TryJob.Result
	(TryJob_Status)(0),                                         // 4: autoroll.rpc.TryJob.Status
	(AutoRollCL_Result)(0),                                     // 5: autoroll.rpc.AutoRollCL.Result
	(ManualRoll_Result)(0),                                     // 6: autoroll.rpc.ManualRoll.Result
	(ManualRoll_Status)(0),                                     // 7: autoroll.rpc.ManualRoll.Status
	(CommitMsgConfig_BuiltIn)(0),                               // 8: autoroll.rpc.CommitMsgConfig.BuiltIn
	(GerritConfig_Config)(0),                                   // 9: autoroll.rpc.GerritConfig.Config
	(NotifierConfig_LogLevel)(0),                               // 10: autoroll.rpc.NotifierConfig.LogLevel
	(NotifierConfig_MsgType)(0),                                // 11: autoroll.rpc.NotifierConfig.MsgType
	(*AutoRollMiniStatus)(nil),                                 // 12: autoroll.rpc.AutoRollMiniStatus
	(*TryJob)(nil),                                             // 13: autoroll.rpc.TryJob
	(*AutoRollCL)(nil),                                         // 14: autoroll.rpc.AutoRollCL
	(*Revision)(nil),                                           // 15: autoroll.rpc.Revision
	(*AutoRollConfig)(nil),                                     // 16: autoroll.rpc.AutoRollConfig
	(*ModeChange)(nil),                                         // 17: autoroll.rpc.ModeChange
	(*StrategyChange)(nil),                                     // 18: autoroll.rpc.StrategyChange
	(*ManualRoll)(nil),                                         // 19: autoroll.rpc.ManualRoll
	(*AutoRollStatus)(nil),                                     // 20: autoroll.rpc.AutoRollStatus
	(*GetRollersRequest)(nil),                                  // 21: autoroll.rpc.GetRollersRequest
	(*GetRollersResponse)(nil),                                 // 22: autoroll.rpc.GetRollersResponse
	(*GetMiniStatusRequest)(nil),                               // 23: autoroll.rpc.GetMiniStatusRequest
	(*GetMiniStatusResponse)(nil),                              // 24: autoroll.rpc.GetMiniStatusResponse
	(*GetStatusRequest)(nil),                                   // 25: autoroll.rpc.GetStatusRequest
	(*GetStatusResponse)(nil),                                  // 26: autoroll.rpc.GetStatusResponse
	(*SetModeRequest)(nil),                                     // 27: autoroll.rpc.SetModeRequest
	(*SetModeResponse)(nil),                                    // 28: autoroll.rpc.SetModeResponse
	(*SetStrategyRequest)(nil),                                 // 29: autoroll.rpc.SetStrategyRequest
	(*SetStrategyResponse)(nil),                                // 30: autoroll.rpc.SetStrategyResponse
	(*CreateManualRollRequest)(nil),                            // 31: autoroll.rpc.CreateManualRollRequest
	(*CreateManualRollResponse)(nil),                           // 32: autoroll.rpc.CreateManualRollResponse
	(*UnthrottleRequest)(nil),                                  // 33: autoroll.rpc.UnthrottleRequest
	(*UnthrottleResponse)(nil),                                 // 34: autoroll.rpc.UnthrottleResponse
	(*GetConfigRequest)(nil),                                   // 35: autoroll.rpc.GetConfigRequest
	(*GetConfigResponse)(nil),                                  // 36: autoroll.rpc.GetConfigResponse
	(*PutConfigRequest)(nil),                                   // 37: autoroll.rpc.PutConfigRequest
	(*PutConfigResponse)(nil),                                  // 38: autoroll.rpc.PutConfigResponse
	(*Config)(nil),                                             // 39: autoroll.rpc.Config
	(*CommitMsgConfig)(nil),                                    // 40: autoroll.rpc.CommitMsgConfig
	(*GerritConfig)(nil),                                       // 41: autoroll.rpc.GerritConfig
	(*GitHubConfig)(nil),                                       // 42: autoroll.rpc.GitHubConfig
	(*Google3Config)(nil),                                      // 43: autoroll.rpc.Google3Config
	(*KubernetesConfig)(nil),                                   // 44: autoroll.rpc.KubernetesConfig
	(*KubernetesSecret)(nil),                                   // 45: autoroll.rpc.KubernetesSecret
	(*AndroidRepoManagerConfig)(nil),                           // 46: autoroll.rpc.AndroidRepoManagerConfig
	(*CommandRepoManagerConfig)(nil),                           // 47: autoroll.rpc.CommandRepoManagerConfig
	(*FreeTypeRepoManagerConfig)(nil),                          // 48: autoroll.rpc.FreeTypeRepoManagerConfig
	(*FuchsiaSDKAndroidRepoManagerConfig)(nil),                 // 49: autoroll.rpc.FuchsiaSDKAndroidRepoManagerConfig
	(*Google3RepoManagerConfig)(nil),                           // 50: autoroll.rpc.Google3RepoManagerConfig
	(*ParentChildRepoManagerConfig)(nil),                       // 51: autoroll.rpc.ParentChildRepoManagerConfig
	(*CopyParentConfig)(nil),                                   // 52: autoroll.rpc.CopyParentConfig
	(*DEPSLocalGitHubParentConfig)(nil),                        // 53: autoroll.rpc.DEPSLocalGitHubParentConfig
	(*DEPSLocalGerritParentConfig)(nil),                        // 54: autoroll.rpc.DEPSLocalGerritParentConfig
	(*GitCheckoutGitHubParentConfig)(nil),                      // 55: autoroll.rpc.GitCheckoutGitHubParentConfig
	(*GitCheckoutGitHubFileParentConfig)(nil),                  // 56: autoroll.rpc.GitCheckoutGitHubFileParentConfig
	(*GitilesParentConfig)(nil),                                // 57: autoroll.rpc.GitilesParentConfig
	(*GitilesConfig)(nil),                                      // 58: autoroll.rpc.GitilesConfig
	(*DEPSLocalParentConfig)(nil),                              // 59: autoroll.rpc.DEPSLocalParentConfig
	(*GitCheckoutParentConfig)(nil),                            // 60: autoroll.rpc.GitCheckoutParentConfig
	(*FreeTypeParentConfig)(nil),                               // 61: autoroll.rpc.FreeTypeParentConfig
	(*CIPDChildConfig)(nil),                                    // 62: autoroll.rpc.CIPDChildConfig
	(*FuchsiaSDKChildConfig)(nil),                              // 63: autoroll.rpc.FuchsiaSDKChildConfig
	(*SemVerGCSChildConfig)(nil),                               // 64: autoroll.rpc.SemVerGCSChildConfig
	(*GCSChildConfig)(nil),                                     // 65: autoroll.rpc.GCSChildConfig
	(*GitCheckoutChildConfig)(nil),                             // 66: autoroll.rpc.GitCheckoutChildConfig
	(*GitCheckoutGitHubChildConfig)(nil),                       // 67: autoroll.rpc.GitCheckoutGitHubChildConfig
	(*GitilesChildConfig)(nil),                                 // 68: autoroll.rpc.GitilesChildConfig
	(*NotifierConfig)(nil),                                     // 69: autoroll.rpc.NotifierConfig
	(*EmailNotifierConfig)(nil),                                // 70: autoroll.rpc.EmailNotifierConfig
	(*ChatNotifierConfig)(nil),                                 // 71: autoroll.rpc.ChatNotifierConfig
	(*MonorailNotifierConfig)(nil),                             // 72: autoroll.rpc.MonorailNotifierConfig
	(*PubSubNotifierConfig)(nil),                               // 73: autoroll.rpc.PubSubNotifierConfig
	(*ThrottleConfig)(nil),                                     // 74: autoroll.rpc.ThrottleConfig
	(*TransitiveDepConfig)(nil),                                // 75: autoroll.rpc.TransitiveDepConfig
	(*VersionFileConfig)(nil),                                  // 76: autoroll.rpc.VersionFileConfig
	(*DependencyConfig)(nil),                                   // 77: autoroll.rpc.DependencyConfig
	(*GitCheckoutConfig)(nil),                                  // 78: autoroll.rpc.GitCheckoutConfig
	(*BuildbucketRevisionFilterConfig)(nil),                    // 79: autoroll.rpc.BuildbucketRevisionFilterConfig
	(*AndroidRepoManagerConfig_ProjectMetadataFileConfig)(nil), // 80: autoroll.rpc.AndroidRepoManagerConfig.ProjectMetadataFileConfig
	(*CommandRepoManagerConfig_CommandConfig)(nil),             // 81: autoroll.rpc.CommandRepoManagerConfig.CommandConfig
	(*CopyParentConfig_CopyEntry)(nil),                         // 82: autoroll.rpc.CopyParentConfig.CopyEntry
	(*timestamp.Timestamp)(nil),                                // 83: google.protobuf.Timestamp
}
var file_rpc_proto_depIdxs = []int32{
	0,   // 0: autoroll.rpc.AutoRollMiniStatus.mode:type_name -> autoroll.rpc.Mode
	4,   // 1: autoroll.rpc.TryJob.status:type_name -> autoroll.rpc.TryJob.Status
	3,   // 2: autoroll.rpc.TryJob.result:type_name -> autoroll.rpc.TryJob.Result
	5,   // 3: autoroll.rpc.AutoRollCL.result:type_name -> autoroll.rpc.AutoRollCL.Result
	83,  // 4: autoroll.rpc.AutoRollCL.created:type_name -> google.protobuf.Timestamp
	83,  // 5: autoroll.rpc.AutoRollCL.modified:type_name -> google.protobuf.Timestamp
	13,  // 6: autoroll.rpc.AutoRollCL.try_jobs:type_name -> autoroll.rpc.TryJob
	83,  // 7: autoroll.rpc.Revision.time:type_name -> google.protobuf.Timestamp
	0,   // 8: autoroll.rpc.ModeChange.mode:type_name -> autoroll.rpc.Mode
	83,  // 9: autoroll.rpc.ModeChange.time:type_name -> google.protobuf.Timestamp
	1,   // 10: autoroll.rpc.StrategyChange.strategy:type_name -> autoroll.rpc.Strategy
	83,  // 11: autoroll.rpc.StrategyChange.time:type_name -> google.protobuf.Timestamp
	6,   // 12: autoroll.rpc.ManualRoll.result:type_name -> autoroll.rpc.ManualRoll.Result
	7,   // 13: autoroll.rpc.ManualRoll.status:type_name -> autoroll.rpc.ManualRoll.Status
	83,  // 14: autoroll.rpc.ManualRoll.timestamp:type_name -> google.protobuf.Timestamp
	12,  // 15: autoroll.rpc.AutoRollStatus.mini_status:type_name -> autoroll.rpc.AutoRollMiniStatus
	16,  // 16: autoroll.rpc.AutoRollStatus.config:type_name -> autoroll.rpc.AutoRollConfig
	17,  // 17: autoroll.rpc.AutoRollStatus.mode:type_name -> autoroll.rpc.ModeChange
	18,  // 18: autoroll.rpc.AutoRollStatus.strategy:type_name -> autoroll.rpc.StrategyChange
	15,  // 19: autoroll.rpc.AutoRollStatus.not_rolled_revisions:type_name -> autoroll.rpc.Revision
	14,  // 20: autoroll.rpc.AutoRollStatus.current_roll:type_name -> autoroll.rpc.AutoRollCL
	14,  // 21: autoroll.rpc.AutoRollStatus.last_roll:type_name -> autoroll.rpc.AutoRollCL
	14,  // 22: autoroll.rpc.AutoRollStatus.recent_rolls:type_name -> autoroll.rpc.AutoRollCL
	19,  // 23: autoroll.rpc.AutoRollStatus.manual_rolls:type_name -> autoroll.rpc.ManualRoll
	83,  // 24: autoroll.rpc.AutoRollStatus.throttled_until:type_name -> google.protobuf.Timestamp
	12,  // 25: autoroll.rpc.GetRollersResponse.rollers:type_name -> autoroll.rpc.AutoRollMiniStatus
	12,  // 26: autoroll.rpc.GetMiniStatusResponse.status:type_name -> autoroll.rpc.AutoRollMiniStatus
	20,  // 27: autoroll.rpc.GetStatusResponse.status:type_name -> autoroll.rpc.AutoRollStatus
	0,   // 28: autoroll.rpc.SetModeRequest.mode:type_name -> autoroll.rpc.Mode
	20,  // 29: autoroll.rpc.SetModeResponse.status:type_name -> autoroll.rpc.AutoRollStatus
	1,   // 30: autoroll.rpc.SetStrategyRequest.strategy:type_name -> autoroll.rpc.Strategy
	20,  // 31: autoroll.rpc.SetStrategyResponse.status:type_name -> autoroll.rpc.AutoRollStatus
	19,  // 32: autoroll.rpc.CreateManualRollResponse.roll:type_name -> autoroll.rpc.ManualRoll
	39,  // 33: autoroll.rpc.GetConfigResponse.config:type_name -> autoroll.rpc.Config
	39,  // 34: autoroll.rpc.PutConfigRequest.config:type_name -> autoroll.rpc.Config
	40,  // 35: autoroll.rpc.Config.commit_msg:type_name -> autoroll.rpc.CommitMsgConfig
	41,  // 36: autoroll.rpc.Config.gerrit:type_name -> autoroll.rpc.GerritConfig
	42,  // 37: autoroll.rpc.Config.github:type_name -> autoroll.rpc.GitHubConfig
	43,  // 38: autoroll.rpc.Config.google3:type_name -> autoroll.rpc.Google3Config
	44,  // 39: autoroll.rpc.Config.kubernetes:type_name -> autoroll.rpc.KubernetesConfig
	51,  // 40: autoroll.rpc.Config.parent_child_repo_manager:type_name -> autoroll.rpc.ParentChildRepoManagerConfig
	46,  // 41: autoroll.rpc.Config.android_repo_manager:type_name -> autoroll.rpc.AndroidRepoManagerConfig
	47,  // 42: autoroll.rpc.Config.command_repo_manager:type_name -> autoroll.rpc.CommandRepoManagerConfig
	48,  // 43: autoroll.rpc.Config.freetype_repo_manager:type_name -> autoroll.rpc.FreeTypeRepoManagerConfig
	49,  // 44: autoroll.rpc.Config.fuchsia_sdk_android_repo_manager:type_name -> autoroll.rpc.FuchsiaSDKAndroidRepoManagerConfig
	50,  // 45: autoroll.rpc.Config.google3_repo_manager:type_name -> autoroll.rpc.Google3RepoManagerConfig
	69,  // 46: autoroll.rpc.Config.notifiers:type_name -> autoroll.rpc.NotifierConfig
	74,  // 47: autoroll.rpc.Config.safety_throttle:type_name -> autoroll.rpc.ThrottleConfig
	75,  // 48: autoroll.rpc.Config.transitive_deps:type_name -> autoroll.rpc.TransitiveDepConfig
	8,   // 49: autoroll.rpc.CommitMsgConfig.built_in:type_name -> autoroll.rpc.CommitMsgConfig.BuiltIn
	9,   // 50: autoroll.rpc.GerritConfig.config:type_name -> autoroll.rpc.GerritConfig.Config
	45,  // 51: autoroll.rpc.KubernetesConfig.secrets:type_name -> autoroll.rpc.KubernetesSecret
	2,   // 52: autoroll.rpc.AndroidRepoManagerConfig.pre_upload_steps:type_name -> autoroll.rpc.PreUploadStep
	80,  // 53: autoroll.rpc.AndroidRepoManagerConfig.metadata:type_name -> autoroll.rpc.AndroidRepoManagerConfig.ProjectMetadataFileConfig
	78,  // 54: autoroll.rpc.CommandRepoManagerConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutConfig
	81,  // 55: autoroll.rpc.CommandRepoManagerConfig.get_tip_rev:type_name -> autoroll.rpc.CommandRepoManagerConfig.CommandConfig
	81,  // 56: autoroll.rpc.CommandRepoManagerConfig.get_pinned_rev:type_name -> autoroll.rpc.CommandRepoManagerConfig.CommandConfig
	81,  // 57: autoroll.rpc.CommandRepoManagerConfig.set_pinned_rev:type_name -> autoroll.rpc.CommandRepoManagerConfig.CommandConfig
	61,  // 58: autoroll.rpc.FreeTypeRepoManagerConfig.parent:type_name -> autoroll.rpc.FreeTypeParentConfig
	68,  // 59: autoroll.rpc.FreeTypeRepoManagerConfig.child:type_name -> autoroll.rpc.GitilesChildConfig
	60,  // 60: autoroll.rpc.FuchsiaSDKAndroidRepoManagerConfig.parent:type_name -> autoroll.rpc.GitCheckoutParentConfig
	63,  // 61: autoroll.rpc.FuchsiaSDKAndroidRepoManagerConfig.child:type_name -> autoroll.rpc.FuchsiaSDKChildConfig
	52,  // 62: autoroll.rpc.ParentChildRepoManagerConfig.copy_parent:type_name -> autoroll.rpc.CopyParentConfig
	53,  // 63: autoroll.rpc.ParentChildRepoManagerConfig.deps_local_github_parent:type_name -> autoroll.rpc.DEPSLocalGitHubParentConfig
	54,  // 64: autoroll.rpc.ParentChildRepoManagerConfig.deps_local_gerrit_parent:type_name -> autoroll.rpc.DEPSLocalGerritParentConfig
	56,  // 65: autoroll.rpc.ParentChildRepoManagerConfig.git_checkout_github_file_parent:type_name -> autoroll.rpc.GitCheckoutGitHubFileParentConfig
	57,  // 66: autoroll.rpc.ParentChildRepoManagerConfig.gitiles_parent:type_name -> autoroll.rpc.GitilesParentConfig
	62,  // 67: autoroll.rpc.ParentChildRepoManagerConfig.cipd_child:type_name -> autoroll.rpc.CIPDChildConfig
	63,  // 68: autoroll.rpc.ParentChildRepoManagerConfig.fuchsia_sdk_child:type_name -> autoroll.rpc.FuchsiaSDKChildConfig
	66,  // 69: autoroll.rpc.ParentChildRepoManagerConfig.git_checkout_child:type_name -> autoroll.rpc.GitCheckoutChildConfig
	67,  // 70: autoroll.rpc.ParentChildRepoManagerConfig.git_checkout_github_child:type_name -> autoroll.rpc.GitCheckoutGitHubChildConfig
	68,  // 71: autoroll.rpc.ParentChildRepoManagerConfig.gitiles_child:type_name -> autoroll.rpc.GitilesChildConfig
	64,  // 72: autoroll.rpc.ParentChildRepoManagerConfig.semver_gcs_child:type_name -> autoroll.rpc.SemVerGCSChildConfig
	79,  // 73: autoroll.rpc.ParentChildRepoManagerConfig.buildbucket_revision_filter:type_name -> autoroll.rpc.BuildbucketRevisionFilterConfig
	57,  // 74: autoroll.rpc.CopyParentConfig.gitiles:type_name -> autoroll.rpc.GitilesParentConfig
	82,  // 75: autoroll.rpc.CopyParentConfig.copies:type_name -> autoroll.rpc.CopyParentConfig.CopyEntry
	59,  // 76: autoroll.rpc.DEPSLocalGitHubParentConfig.deps_local:type_name -> autoroll.rpc.DEPSLocalParentConfig
	42,  // 77: autoroll.rpc.DEPSLocalGitHubParentConfig.github:type_name -> autoroll.rpc.GitHubConfig
	59,  // 78: autoroll.rpc.DEPSLocalGerritParentConfig.deps_local:type_name -> autoroll.rpc.DEPSLocalParentConfig
	41,  // 79: autoroll.rpc.DEPSLocalGerritParentConfig.gerrit:type_name -> autoroll.rpc.GerritConfig
	60,  // 80: autoroll.rpc.GitCheckoutGitHubParentConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutParentConfig
	55,  // 81: autoroll.rpc.GitCheckoutGitHubFileParentConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutGitHubParentConfig
	2,   // 82: autoroll.rpc.GitCheckoutGitHubFileParentConfig.pre_upload_steps:type_name -> autoroll.rpc.PreUploadStep
	58,  // 83: autoroll.rpc.GitilesParentConfig.gitiles:type_name -> autoroll.rpc.GitilesConfig
	77,  // 84: autoroll.rpc.GitilesParentConfig.dep:type_name -> autoroll.rpc.DependencyConfig
	41,  // 85: autoroll.rpc.GitilesParentConfig.gerrit:type_name -> autoroll.rpc.GerritConfig
	76,  // 86: autoroll.rpc.GitilesConfig.dependencies:type_name -> autoroll.rpc.VersionFileConfig
	60,  // 87: autoroll.rpc.DEPSLocalParentConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutParentConfig
	2,   // 88: autoroll.rpc.DEPSLocalParentConfig.pre_upload_steps:type_name -> autoroll.rpc.PreUploadStep
	78,  // 89: autoroll.rpc.GitCheckoutParentConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutConfig
	77,  // 90: autoroll.rpc.GitCheckoutParentConfig.dep:type_name -> autoroll.rpc.DependencyConfig
	57,  // 91: autoroll.rpc.FreeTypeParentConfig.gitiles:type_name -> autoroll.rpc.GitilesParentConfig
	65,  // 92: autoroll.rpc.SemVerGCSChildConfig.gcs:type_name -> autoroll.rpc.GCSChildConfig
	78,  // 93: autoroll.rpc.GitCheckoutChildConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutConfig
	66,  // 94: autoroll.rpc.GitCheckoutGitHubChildConfig.git_checkout:type_name -> autoroll.rpc.GitCheckoutChildConfig
	58,  // 95: autoroll.rpc.GitilesChildConfig.gitiles:type_name -> autoroll.rpc.GitilesConfig
	10,  // 96: autoroll.rpc.NotifierConfig.log_level:type_name -> autoroll.rpc.NotifierConfig.LogLevel
	11,  // 97: autoroll.rpc.NotifierConfig.msg_type:type_name -> autoroll.rpc.NotifierConfig.MsgType
	70,  // 98: autoroll.rpc.NotifierConfig.email:type_name -> autoroll.rpc.EmailNotifierConfig
	71,  // 99: autoroll.rpc.NotifierConfig.chat:type_name -> autoroll.rpc.ChatNotifierConfig
	72,  // 100: autoroll.rpc.NotifierConfig.monorail:type_name -> autoroll.rpc.MonorailNotifierConfig
	73,  // 101: autoroll.rpc.NotifierConfig.pubsub:type_name -> autoroll.rpc.PubSubNotifierConfig
	76,  // 102: autoroll.rpc.TransitiveDepConfig.child:type_name -> autoroll.rpc.VersionFileConfig
	76,  // 103: autoroll.rpc.TransitiveDepConfig.parent:type_name -> autoroll.rpc.VersionFileConfig
	76,  // 104: autoroll.rpc.DependencyConfig.primary:type_name -> autoroll.rpc.VersionFileConfig
	75,  // 105: autoroll.rpc.DependencyConfig.transitive:type_name -> autoroll.rpc.TransitiveDepConfig
	76,  // 106: autoroll.rpc.GitCheckoutConfig.dependencies:type_name -> autoroll.rpc.VersionFileConfig
	21,  // 107: autoroll.rpc.AutoRollService.GetRollers:input_type -> autoroll.rpc.GetRollersRequest
	23,  // 108: autoroll.rpc.AutoRollService.GetMiniStatus:input_type -> autoroll.rpc.GetMiniStatusRequest
	25,  // 109: autoroll.rpc.AutoRollService.GetStatus:input_type -> autoroll.rpc.GetStatusRequest
	27,  // 110: autoroll.rpc.AutoRollService.SetMode:input_type -> autoroll.rpc.SetModeRequest
	29,  // 111: autoroll.rpc.AutoRollService.SetStrategy:input_type -> autoroll.rpc.SetStrategyRequest
	31,  // 112: autoroll.rpc.AutoRollService.CreateManualRoll:input_type -> autoroll.rpc.CreateManualRollRequest
	33,  // 113: autoroll.rpc.AutoRollService.Unthrottle:input_type -> autoroll.rpc.UnthrottleRequest
	35,  // 114: autoroll.rpc.AutoRollService.GetConfig:input_type -> autoroll.rpc.GetConfigRequest
	37,  // 115: autoroll.rpc.AutoRollService.PutConfig:input_type -> autoroll.rpc.PutConfigRequest
	22,  // 116: autoroll.rpc.AutoRollService.GetRollers:output_type -> autoroll.rpc.GetRollersResponse
	24,  // 117: autoroll.rpc.AutoRollService.GetMiniStatus:output_type -> autoroll.rpc.GetMiniStatusResponse
	26,  // 118: autoroll.rpc.AutoRollService.GetStatus:output_type -> autoroll.rpc.GetStatusResponse
	28,  // 119: autoroll.rpc.AutoRollService.SetMode:output_type -> autoroll.rpc.SetModeResponse
	30,  // 120: autoroll.rpc.AutoRollService.SetStrategy:output_type -> autoroll.rpc.SetStrategyResponse
	32,  // 121: autoroll.rpc.AutoRollService.CreateManualRoll:output_type -> autoroll.rpc.CreateManualRollResponse
	34,  // 122: autoroll.rpc.AutoRollService.Unthrottle:output_type -> autoroll.rpc.UnthrottleResponse
	36,  // 123: autoroll.rpc.AutoRollService.GetConfig:output_type -> autoroll.rpc.GetConfigResponse
	38,  // 124: autoroll.rpc.AutoRollService.PutConfig:output_type -> autoroll.rpc.PutConfigResponse
	116, // [116:125] is the sub-list for method output_type
	107, // [107:116] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRollMiniStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRollCL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRollConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRollStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRollersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRollersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManualRollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManualRollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnthrottleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnthrottleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMsgConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Google3Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidRepoManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRepoManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeTypeRepoManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuchsiaSDKAndroidRepoManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Google3RepoManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentChildRepoManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DEPSLocalGitHubParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DEPSLocalGerritParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutGitHubParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutGitHubFileParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitilesParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitilesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DEPSLocalParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeTypeParentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIPDChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuchsiaSDKChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemVerGCSChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutGitHubChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitilesChildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifierConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailNotifierConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatNotifierConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailNotifierConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubNotifierConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitiveDepConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionFileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildbucketRevisionFilterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidRepoManagerConfig_ProjectMetadataFileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRepoManagerConfig_CommandConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyParentConfig_CopyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpc_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Config_Gerrit)(nil),
		(*Config_Github)(nil),
		(*Config_Google3)(nil),
		(*Config_ParentChildRepoManager)(nil),
		(*Config_AndroidRepoManager)(nil),
		(*Config_CommandRepoManager)(nil),
		(*Config_FreetypeRepoManager)(nil),
		(*Config_FuchsiaSdkAndroidRepoManager)(nil),
		(*Config_Google3RepoManager)(nil),
	}
	file_rpc_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*CommitMsgConfig_BuiltIn_)(nil),
		(*CommitMsgConfig_Custom)(nil),
	}
	file_rpc_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*ParentChildRepoManagerConfig_CopyParent)(nil),
		(*ParentChildRepoManagerConfig_DepsLocalGithubParent)(nil),
		(*ParentChildRepoManagerConfig_DepsLocalGerritParent)(nil),
		(*ParentChildRepoManagerConfig_GitCheckoutGithubFileParent)(nil),
		(*ParentChildRepoManagerConfig_GitilesParent)(nil),
		(*ParentChildRepoManagerConfig_CipdChild)(nil),
		(*ParentChildRepoManagerConfig_FuchsiaSdkChild)(nil),
		(*ParentChildRepoManagerConfig_GitCheckoutChild)(nil),
		(*ParentChildRepoManagerConfig_GitCheckoutGithubChild)(nil),
		(*ParentChildRepoManagerConfig_GitilesChild)(nil),
		(*ParentChildRepoManagerConfig_SemverGcsChild)(nil),
		(*ParentChildRepoManagerConfig_BuildbucketRevisionFilter)(nil),
	}
	file_rpc_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*NotifierConfig_Email)(nil),
		(*NotifierConfig_Chat)(nil),
		(*NotifierConfig_Monorail)(nil),
		(*NotifierConfig_Pubsub)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		EnumInfos:         file_rpc_proto_enumTypes,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}
