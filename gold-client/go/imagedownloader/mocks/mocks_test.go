// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.skia.org/infra/golden/go/types"
)

// NewImageDownloader creates a new instance of ImageDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageDownloader {
	mock := &ImageDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ImageDownloader is an autogenerated mock type for the ImageDownloader type
type ImageDownloader struct {
	mock.Mock
}

type ImageDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageDownloader) EXPECT() *ImageDownloader_Expecter {
	return &ImageDownloader_Expecter{mock: &_m.Mock}
}

// DownloadImage provides a mock function for the type ImageDownloader
func (_mock *ImageDownloader) DownloadImage(ctx context.Context, goldURL string, digest types.Digest) ([]byte, error) {
	ret := _mock.Called(ctx, goldURL, digest)

	if len(ret) == 0 {
		panic("no return value specified for DownloadImage")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.Digest) ([]byte, error)); ok {
		return returnFunc(ctx, goldURL, digest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.Digest) []byte); ok {
		r0 = returnFunc(ctx, goldURL, digest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.Digest) error); ok {
		r1 = returnFunc(ctx, goldURL, digest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ImageDownloader_DownloadImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadImage'
type ImageDownloader_DownloadImage_Call struct {
	*mock.Call
}

// DownloadImage is a helper method to define mock.On call
//   - ctx context.Context
//   - goldURL string
//   - digest types.Digest
func (_e *ImageDownloader_Expecter) DownloadImage(ctx interface{}, goldURL interface{}, digest interface{}) *ImageDownloader_DownloadImage_Call {
	return &ImageDownloader_DownloadImage_Call{Call: _e.mock.On("DownloadImage", ctx, goldURL, digest)}
}

func (_c *ImageDownloader_DownloadImage_Call) Run(run func(ctx context.Context, goldURL string, digest types.Digest)) *ImageDownloader_DownloadImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.Digest
		if args[2] != nil {
			arg2 = args[2].(types.Digest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ImageDownloader_DownloadImage_Call) Return(bytes []byte, err error) *ImageDownloader_DownloadImage_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *ImageDownloader_DownloadImage_Call) RunAndReturn(run func(ctx context.Context, goldURL string, digest types.Digest) ([]byte, error)) *ImageDownloader_DownloadImage_Call {
	_c.Call.Return(run)
	return _c
}
