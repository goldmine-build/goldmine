// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	jsonio "go.skia.org/infra/golden/go/jsonio"

	mock "github.com/stretchr/testify/mock"

	types "go.skia.org/infra/golden/go/types"
)

// GoldClient is an autogenerated mock type for the GoldClient type
type GoldClient struct {
	mock.Mock
}

// Check provides a mock function with given fields: name, imgFileName
func (_m *GoldClient) Check(name types.TestName, imgFileName string) (bool, error) {
	ret := _m.Called(name, imgFileName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.TestName, string) bool); ok {
		r0 = rf(name, imgFileName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.TestName, string) error); ok {
		r1 = rf(name, imgFileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Diff provides a mock function with given fields: ctx, name, corpus, imgFileName, outDir
func (_m *GoldClient) Diff(ctx context.Context, name types.TestName, corpus string, imgFileName string, outDir string) error {
	ret := _m.Called(ctx, name, corpus, imgFileName, outDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.TestName, string, string, string) error); ok {
		r0 = rf(ctx, name, corpus, imgFileName, outDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Finalize provides a mock function with given fields:
func (_m *GoldClient) Finalize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSharedConfig provides a mock function with given fields: sharedConfig, skipValidation
func (_m *GoldClient) SetSharedConfig(sharedConfig jsonio.GoldResults, skipValidation bool) error {
	ret := _m.Called(sharedConfig, skipValidation)

	var r0 error
	if rf, ok := ret.Get(0).(func(jsonio.GoldResults, bool) error); ok {
		r0 = rf(sharedConfig, skipValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Test provides a mock function with given fields: name, imgFileName, additionalKeys
func (_m *GoldClient) Test(name types.TestName, imgFileName string, additionalKeys map[string]string) (bool, error) {
	ret := _m.Called(name, imgFileName, additionalKeys)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.TestName, string, map[string]string) bool); ok {
		r0 = rf(name, imgFileName, additionalKeys)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.TestName, string, map[string]string) error); ok {
		r1 = rf(name, imgFileName, additionalKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriageAsPositive provides a mock function with given fields: testName, digest, changeListId
func (_m *GoldClient) TriageAsPositive(testName types.TestName, digest types.Digest, changeListId string) error {
	ret := _m.Called(testName, digest, changeListId)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.TestName, types.Digest, string) error); ok {
		r0 = rf(testName, digest, changeListId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Whoami provides a mock function with given fields:
func (_m *GoldClient) Whoami() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
