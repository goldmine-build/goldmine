// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	image "image"

	mock "github.com/stretchr/testify/mock"
)

// Matcher is an autogenerated mock type for the Matcher type
type Matcher struct {
	mock.Mock
}

type Matcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Matcher) EXPECT() *Matcher_Expecter {
	return &Matcher_Expecter{mock: &_m.Mock}
}

// Match provides a mock function with given fields: expected, actual
func (_m *Matcher) Match(expected image.Image, actual image.Image) bool {
	ret := _m.Called(expected, actual)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(image.Image, image.Image) bool); ok {
		r0 = rf(expected, actual)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Matcher_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type Matcher_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - expected image.Image
//   - actual image.Image
func (_e *Matcher_Expecter) Match(expected interface{}, actual interface{}) *Matcher_Match_Call {
	return &Matcher_Match_Call{Call: _e.mock.On("Match", expected, actual)}
}

func (_c *Matcher_Match_Call) Run(run func(expected image.Image, actual image.Image)) *Matcher_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(image.Image), args[1].(image.Image))
	})
	return _c
}

func (_c *Matcher_Match_Call) Return(_a0 bool) *Matcher_Match_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Matcher_Match_Call) RunAndReturn(run func(image.Image, image.Image) bool) *Matcher_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewMatcher creates a new instance of Matcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Matcher {
	mock := &Matcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
