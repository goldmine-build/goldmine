// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewGCSUploader creates a new instance of GCSUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGCSUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *GCSUploader {
	mock := &GCSUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GCSUploader is an autogenerated mock type for the GCSUploader type
type GCSUploader struct {
	mock.Mock
}

type GCSUploader_Expecter struct {
	mock *mock.Mock
}

func (_m *GCSUploader) EXPECT() *GCSUploader_Expecter {
	return &GCSUploader_Expecter{mock: &_m.Mock}
}

// UploadBytes provides a mock function for the type GCSUploader
func (_mock *GCSUploader) UploadBytes(ctx context.Context, data []byte, fallbackSrc string, dst string) error {
	ret := _mock.Called(ctx, data, fallbackSrc, dst)

	if len(ret) == 0 {
		panic("no return value specified for UploadBytes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string, string) error); ok {
		r0 = returnFunc(ctx, data, fallbackSrc, dst)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GCSUploader_UploadBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBytes'
type GCSUploader_UploadBytes_Call struct {
	*mock.Call
}

// UploadBytes is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
//   - fallbackSrc string
//   - dst string
func (_e *GCSUploader_Expecter) UploadBytes(ctx interface{}, data interface{}, fallbackSrc interface{}, dst interface{}) *GCSUploader_UploadBytes_Call {
	return &GCSUploader_UploadBytes_Call{Call: _e.mock.On("UploadBytes", ctx, data, fallbackSrc, dst)}
}

func (_c *GCSUploader_UploadBytes_Call) Run(run func(ctx context.Context, data []byte, fallbackSrc string, dst string)) *GCSUploader_UploadBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GCSUploader_UploadBytes_Call) Return(err error) *GCSUploader_UploadBytes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GCSUploader_UploadBytes_Call) RunAndReturn(run func(ctx context.Context, data []byte, fallbackSrc string, dst string) error) *GCSUploader_UploadBytes_Call {
	_c.Call.Return(run)
	return _c
}

// UploadJSON provides a mock function for the type GCSUploader
func (_mock *GCSUploader) UploadJSON(ctx context.Context, data interface{}, tempFileName string, gcsObjectPath string) error {
	ret := _mock.Called(ctx, data, tempFileName, gcsObjectPath)

	if len(ret) == 0 {
		panic("no return value specified for UploadJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, string, string) error); ok {
		r0 = returnFunc(ctx, data, tempFileName, gcsObjectPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GCSUploader_UploadJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadJSON'
type GCSUploader_UploadJSON_Call struct {
	*mock.Call
}

// UploadJSON is a helper method to define mock.On call
//   - ctx context.Context
//   - data interface{}
//   - tempFileName string
//   - gcsObjectPath string
func (_e *GCSUploader_Expecter) UploadJSON(ctx interface{}, data interface{}, tempFileName interface{}, gcsObjectPath interface{}) *GCSUploader_UploadJSON_Call {
	return &GCSUploader_UploadJSON_Call{Call: _e.mock.On("UploadJSON", ctx, data, tempFileName, gcsObjectPath)}
}

func (_c *GCSUploader_UploadJSON_Call) Run(run func(ctx context.Context, data interface{}, tempFileName string, gcsObjectPath string)) *GCSUploader_UploadJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *GCSUploader_UploadJSON_Call) Return(err error) *GCSUploader_UploadJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GCSUploader_UploadJSON_Call) RunAndReturn(run func(ctx context.Context, data interface{}, tempFileName string, gcsObjectPath string) error) *GCSUploader_UploadJSON_Call {
	_c.Call.Return(run)
	return _c
}
