syntax = "proto3";

// Working in progress protobuf and service definition.
//
package pinpoint.v1;
option go_package = "go.skia.org/infra/pinpoint/proto/v1;pinpointpb";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// The direct mirror of the existing bisect request in catapult.
// https://chromium.googlesource.com/catapult.git/+/09398d/
// dashboard/dashboard/pinpoint/models/job.py#339
//
// Note, some fields are only for backward-compatibility only.
message ScheduleBisectRequest {
	string comparison_mode = 1;
	string start_git_hash = 2;
	string end_git_hash = 3;

	// The builder/bot configuration name, this usually specifies the builder that can trigger
	// the build.
	string configuration = 4;

	// The Chrome perf benchmark test target.
	// All the targets are generated from here:
	// https://chromium.googlesource.com/chromium/src/+/52c8723/tools/perf/core/perf_data_generator.py
	string benchmark = 5;

	// https://chromium.googlesource.com/catapult.git/+/e8367e6/telemetry
	// The story is usually a test case that runs a set of actions in a certain scenario, and
	// collects performance histogram data to analyze.
	string story = 6;
	string chart = 7;
	string statistic = 8;

	// Comparison Magnitude is the expected absolute difference of a potential regression.
	// Only used in bisections. Default is 1.0.
	string comparison_magnitude = 9;

	// The Change (Commits + Patch) to apply to every change for all the subsequence runs.
	string pin = 10;

	// The Monorail project ID.
	string project = 11;

	// The monorail issue id number to post updates to.
	string bug_id = 12;

	// The user email who triggers the job.
	string user = 13;

	// The mechanism in which benchmark measurements are aggregated by.
	// One of sum, mean, min, max count, and std.
	string aggregation_method = 14;

	// StoryTags is a comma delimited string of tags to pass for the story.
	// For example, "all", "representative_win_desktop" or "2019,2018".
	string story_tags = 15;

	// The minimum number of test iterations run.
	string initial_attempt_count = 16;

	// A dict of key-value pairs used to filter the Jobs listings.
	map<string,string> tags = 17;
}

message QueryBisectRequest {
	string job_id = 1;
}

message BisectExecution {
	string job_id = 1;
}

// See LegacyJobResponse below
message LegacyJobRequest {
	string job_id = 1;
}

// This is a direct mapping from /api/job in catapult.
//
// This is backward compatible support before the service in catapult is completely shut down.
// Note that there is not schema definition so the output structure is more or less
// a guess from the response. Example output:
// https://pinpoint-dot-chromeperf.appspot.com/api/job/102beaa5ee0000?o=STATE&?o=ESTIMATE
message LegacyJobResponse {
	string job_id = 1;
	string configuration = 2;
	string results_url = 3;
	int32 improvement_direction = 4;

	message Argument {
		string comparison_mode = 1;
		string target = 2;
		string start_git_hash = 3;
		string end_git_hash = 4;
		string trace = 5;
		map<string,string> tags = 6;
		int32 initial_attempt_count = 7;
		string configuration = 8;
		string benchmark = 9;
		string story = 10;
		string story_tags = 11;
		string chart = 12;
		string statistic = 13;
		double comparison_magnitude = 14;
		string extra_test_args = 15;
		string pin = 16;
		string project = 17;
		string bug_id = 18;
		string batch_id = 19;
	}
	Argument arguments = 5;

	string bug_id = 6;
	string project = 7;
	string comparison_mode = 8;
	string name = 9;
	string user = 10;
	google.protobuf.Timestamp created = 11;
	google.protobuf.Timestamp updated = 12;
	google.protobuf.Timestamp started_time = 13;
	int32 difference_count = 14;
	string exception = 15;
	string status = 16;
	string cancel_reason = 17;
	string batch_id = 18;
	repeated string bots = 19;
	string metric = 20;
	repeated string quests = 21;

	message State {
		message Change {
			// TBD: Commit details
		}
		repeated Change change = 1;

		message Attempt {
			message Execution {
				bool completed = 1;
				string exception = 2;

				message Detail {
					string key = 1;
					string value = 2;
					string url = 3;
				}
				repeated Detail details = 3;
			}
			repeated Execution executions = 1;
		}
		repeated Attempt attempts = 2;

		message Comparision {
			string next = 1;
			string prev = 2;
		}
		Comparision comparisions = 3;
		repeated double values = 4;
	}
	repeated State state = 22;
}

service Pinpoint {
  rpc ScheduleBisection(ScheduleBisectRequest) returns (BisectExecution) {
    option (google.api.http) = {
      post: "/pinpoint/v1/schedule"
    };
  }

  rpc QueryBisection(QueryBisectRequest) returns (BisectExecution) {
    option (google.api.http) = {
      get: "/pinpoint/v1/query"
    };
  }

	rpc LegacyJobQuery(LegacyJobRequest) returns (LegacyJobResponse) {
    option (google.api.http) = {
      get: "/pinpoint/v1/legacy-job"
    };
  }

}
